{"version":3,"sources":["webpack:///./node_modules/devextreme-angular/ui/switch.js","webpack:///./node_modules/devextreme/ui/switch.js"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,qGAA2B;AAC5D,yBAAyB,mBAAO,CAAC,qGAA2B;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,eAAe,mBAAO,CAAC,oEAAsB;AAC7C,kBAAkB,mBAAO,CAAC,sEAAa;AACvC,cAAc,mBAAO,CAAC,oEAAgB;AACtC,kBAAkB,mBAAO,CAAC,8EAAmB;AAC7C,sBAAsB,mBAAO,CAAC,sFAAuB;AACrD,oBAAoB,mBAAO,CAAC,kFAAqB;AACjD,iBAAiB,mBAAO,CAAC,4EAAkB;AAC3C,sBAAsB,mBAAO,CAAC,sFAAuB;AACrD,uBAAuB,mBAAO,CAAC,wFAAwB;AACvD;AACA;AACA,gDAAgD,0BAA0B,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,aAAa,oDAAoD;AACjE,aAAa,8CAA8C;AAC3D,aAAa,kDAAkD;AAC/D,aAAa,sDAAsD;AACnE,aAAa,oDAAoD;AACjE,aAAa,0BAA0B;AACvC,aAAa,mCAAmC;AAChD,aAAa,yBAAyB;AACtC,aAAa,4BAA4B;AACzC,aAAa,kCAAkC;AAC/C,aAAa,uBAAuB;AACpC,aAAa,qBAAqB;AAClC,aAAa,kCAAkC;AAC/C,aAAa,wBAAwB;AACrC,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,uBAAuB;AACpC,aAAa,yBAAyB;AACtC,aAAa,2BAA2B;AACxC,aAAa,gCAAgC;AAC7C,aAAa,+BAA+B;AAC5C,aAAa,yBAAyB;AACtC,aAAa,gCAAgC;AAC7C,aAAa,sCAAsC;AACnD,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,sBAAsB;AACnC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB;AACpF,mEAAmE,mBAAmB;AACtF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,oDAAoD;AACpD,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,wCAAwC;AACjD,SAAS,wCAAwC;AACjD,SAAS,0CAA0C;AACnD,SAAS,0CAA0C;AACnD,SAAS,gCAAgC,mDAAmD,IAAI;AAChG,MAAM;AACN;AACA,uBAAuB,uEAAuE;AAC9F,uBAAuB,qBAAqB;AAC5C,gCAAgC,qBAAqB;AACrD,sBAAsB,qBAAqB;AAC3C,yBAAyB,qBAAqB;AAC9C,+BAA+B,qBAAqB;AACpD,oBAAoB,qBAAqB;AACzC,kBAAkB,qBAAqB;AACvC,+BAA+B,qBAAqB;AACpD,qBAAqB,qBAAqB;AAC1C,kBAAkB,qBAAqB;AACvC,qBAAqB,qBAAqB;AAC1C,oBAAoB,qBAAqB;AACzC,sBAAsB,qBAAqB;AAC3C,wBAAwB,qBAAqB;AAC7C,6BAA6B,qBAAqB;AAClD,4BAA4B,qBAAqB;AACjD,sBAAsB,qBAAqB;AAC3C,6BAA6B,qBAAqB;AAClD,mCAAmC,qBAAqB;AACxD,mBAAmB,qBAAqB;AACxC,qBAAqB,qBAAqB;AAC1C,mBAAmB,qBAAqB;AACxC,4BAA4B,sBAAsB;AAClD,yBAAyB,sBAAsB;AAC/C,2BAA2B,sBAAsB;AACjD,6BAA6B,sBAAsB;AACnD,4BAA4B,sBAAsB;AAClD,6BAA6B,sBAAsB;AACnD,sCAAsC,sBAAsB;AAC5D,4BAA4B,sBAAsB;AAClD,+BAA+B,sBAAsB;AACrD,qCAAqC,sBAAsB;AAC3D,0BAA0B,sBAAsB;AAChD,wBAAwB,sBAAsB;AAC9C,qCAAqC,sBAAsB;AAC3D,2BAA2B,sBAAsB;AACjD,wBAAwB,sBAAsB;AAC9C,2BAA2B,sBAAsB;AACjD,0BAA0B,sBAAsB;AAChD,4BAA4B,sBAAsB;AAClD,8BAA8B,sBAAsB;AACpD,mCAAmC,sBAAsB;AACzD,kCAAkC,sBAAsB;AACxD,4BAA4B,sBAAsB;AAClD,mCAAmC,sBAAsB;AACzD,yCAAyC,sBAAsB;AAC/D,yBAAyB,sBAAsB;AAC/C,2BAA2B,sBAAsB;AACjD,yBAAyB,sBAAsB;AAC/C,oBAAoB,sBAAsB;AAC1C,oBAAoB,gEAAgE;AACpF,qBAAqB,2DAA2D;AAChF;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;;;;;AC1fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,oEAAkB;AAClC,mBAAmB,mBAAO,CAAC,4FAA8B;AACzD,cAAc,mBAAO,CAAC,kEAAiB;AACvC,aAAa,mBAAO,CAAC,4EAAsB;AAC3C,gBAAgB,mBAAO,CAAC,0FAA2B;AACnD,wBAAwB,mBAAO,CAAC,8FAA+B;AAC/D,aAAa,mBAAO,CAAC,sEAAiB;AACtC,iBAAiB,mBAAO,CAAC,kEAAiB;AAC1C,qBAAqB,mBAAO,CAAC,kGAAiC;AAC9D,aAAa,mBAAO,CAAC,wDAAU;AAC/B,SAAS,mBAAO,CAAC,kEAAiB;AAClC,0BAA0B,mBAAO,CAAC,kFAAyB;AAC3D,iBAAiB,mBAAO,CAAC,kEAAiB;AAC1C,gBAAgB,mBAAO,CAAC,0FAA6B;AACrD,eAAe,mBAAO,CAAC,gFAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,8BAA8B;AAC9B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA","file":"default~views-administration-administration-module-ngfactory~views-asset-asset-module-ngfactory~view~5bc09b5d.js","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar platform_browser_1 = require(\"@angular/platform-browser\");\r\nvar platform_browser_2 = require(\"@angular/platform-browser\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar switch_1 = require(\"devextreme/ui/switch\");\r\nvar validator_1 = require(\"./validator\");\r\nvar forms_1 = require(\"@angular/forms\");\r\nvar component_1 = require(\"../core/component\");\r\nvar template_host_1 = require(\"../core/template-host\");\r\nvar integration_1 = require(\"../core/integration\");\r\nvar template_1 = require(\"../core/template\");\r\nvar nested_option_1 = require(\"../core/nested-option\");\r\nvar watcher_helper_1 = require(\"../core/watcher-helper\");\r\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n    provide: forms_1.NG_VALUE_ACCESSOR,\r\n    useExisting: core_1.forwardRef(function () { return DxSwitchComponent; }),\r\n    multi: true\r\n};\r\n/**\r\n * The Switch is a widget that can be in two states: \"On\" and \"Off\".\r\n */\r\nvar DxSwitchComponent = (function (_super) {\r\n    __extends(DxSwitchComponent, _super);\r\n    function DxSwitchComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this.touched = function (_) { };\r\n        _this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'isValidChange' },\r\n            { emit: 'nameChange' },\r\n            { emit: 'offTextChange' },\r\n            { emit: 'onTextChange' },\r\n            { emit: 'readOnlyChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'switchedOffTextChange' },\r\n            { emit: 'switchedOnTextChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'validationErrorChange' },\r\n            { emit: 'validationMessageModeChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'onBlur' }\r\n        ]);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"accessKey\", {\r\n        get: /**\r\n             * Specifies the shortcut key that sets focus on the widget.\r\n             */\r\n        function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"activeStateEnabled\", {\r\n        get: /**\r\n             * Specifies whether or not the widget changes its state when interacting with a user.\r\n             */\r\n        function () {\r\n            return this._getOption('activeStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('activeStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"disabled\", {\r\n        get: /**\r\n             * Specifies whether the widget responds to user interaction.\r\n             */\r\n        function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"elementAttr\", {\r\n        get: /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n        function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"focusStateEnabled\", {\r\n        get: /**\r\n             * Specifies whether the widget can be focused using keyboard navigation.\r\n             */\r\n        function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"height\", {\r\n        get: /**\r\n             * Specifies the widget's height.\r\n             */\r\n        function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"hint\", {\r\n        get: /**\r\n             * Specifies text for a hint that appears when a user pauses on the widget.\r\n             */\r\n        function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"hoverStateEnabled\", {\r\n        get: /**\r\n             * Specifies whether the widget changes its state when a user pauses on it.\r\n             */\r\n        function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"isValid\", {\r\n        get: /**\r\n             * Specifies whether the editor's value is valid.\r\n             */\r\n        function () {\r\n            return this._getOption('isValid');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('isValid', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"name\", {\r\n        get: /**\r\n             * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n             */\r\n        function () {\r\n            return this._getOption('name');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('name', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"offText\", {\r\n        get: /**\r\n             * Use the switchedOffText option instead.\r\n             */\r\n        function () {\r\n            return this._getOption('offText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('offText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"onText\", {\r\n        get: /**\r\n             * Use the switchedOnText option instead.\r\n             */\r\n        function () {\r\n            return this._getOption('onText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('onText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"readOnly\", {\r\n        get: /**\r\n             * A Boolean value specifying whether or not the widget is read-only.\r\n             */\r\n        function () {\r\n            return this._getOption('readOnly');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('readOnly', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"rtlEnabled\", {\r\n        get: /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n        function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"switchedOffText\", {\r\n        get: /**\r\n             * Specifies the text displayed when the widget is switched off.\r\n             */\r\n        function () {\r\n            return this._getOption('switchedOffText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('switchedOffText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"switchedOnText\", {\r\n        get: /**\r\n             * Specifies the text displayed when the widget is switched on.\r\n             */\r\n        function () {\r\n            return this._getOption('switchedOnText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('switchedOnText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"tabIndex\", {\r\n        get: /**\r\n             * Specifies the number of the element when the Tab key is used for navigating.\r\n             */\r\n        function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"validationError\", {\r\n        get: /**\r\n             * Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option.\r\n             */\r\n        function () {\r\n            return this._getOption('validationError');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationError', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"validationMessageMode\", {\r\n        get: /**\r\n             * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.\r\n             */\r\n        function () {\r\n            return this._getOption('validationMessageMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationMessageMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"value\", {\r\n        get: /**\r\n             * A Boolean value specifying whether the current switch state is \"On\" or \"Off\".\r\n             */\r\n        function () {\r\n            return this._getOption('value');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('value', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"visible\", {\r\n        get: /**\r\n             * Specifies whether the widget is visible.\r\n             */\r\n        function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSwitchComponent.prototype, \"width\", {\r\n        get: /**\r\n             * Specifies the widget's width.\r\n             */\r\n        function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxSwitchComponent.prototype.change = function (_) { };\r\n    DxSwitchComponent.prototype._createInstance = function (element, options) {\r\n        return new switch_1.default(element, options);\r\n    };\r\n    DxSwitchComponent.prototype.writeValue = function (value) {\r\n        this.eventHelper.lockedValueChangeEvent = true;\r\n        this.value = value;\r\n        this.eventHelper.lockedValueChangeEvent = false;\r\n    };\r\n    DxSwitchComponent.prototype.setDisabledState = function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n    };\r\n    DxSwitchComponent.prototype.registerOnChange = function (fn) { this.change = fn; };\r\n    DxSwitchComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };\r\n    DxSwitchComponent.prototype._createWidget = function (element) {\r\n        var _this = this;\r\n        _super.prototype._createWidget.call(this, element);\r\n        this.instance.on('focusOut', function (e) {\r\n            _this.eventHelper.fireNgEvent('onBlur', [e]);\r\n        });\r\n    };\r\n    DxSwitchComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxSwitchComponent.prototype.ngOnInit = function () {\r\n        _super.prototype.ngOnInit.call(this);\r\n        if (this.validator) {\r\n            this.validator.createInstanceOnInit = false;\r\n        }\r\n    };\r\n    DxSwitchComponent.prototype.ngAfterViewInit = function () {\r\n        _super.prototype.ngAfterViewInit.call(this);\r\n        if (this.validator) {\r\n            this.validator.createInstance(this.element.nativeElement);\r\n        }\r\n    };\r\n    DxSwitchComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dx-switch',\r\n                    template: '',\r\n                    providers: [\r\n                        template_host_1.DxTemplateHost,\r\n                        watcher_helper_1.WatcherHelper,\r\n                        CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n                        nested_option_1.NestedOptionHost\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxSwitchComponent.ctorParameters = function () { return [\r\n        { type: core_1.ElementRef, },\r\n        { type: core_1.NgZone, },\r\n        { type: template_host_1.DxTemplateHost, },\r\n        { type: watcher_helper_1.WatcherHelper, },\r\n        { type: nested_option_1.NestedOptionHost, },\r\n        { type: platform_browser_2.TransferState, },\r\n        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PLATFORM_ID,] },] },\r\n    ]; };\r\n    DxSwitchComponent.propDecorators = {\r\n        \"validator\": [{ type: core_1.ContentChild, args: [validator_1.DxValidatorComponent,] },],\r\n        \"accessKey\": [{ type: core_1.Input },],\r\n        \"activeStateEnabled\": [{ type: core_1.Input },],\r\n        \"disabled\": [{ type: core_1.Input },],\r\n        \"elementAttr\": [{ type: core_1.Input },],\r\n        \"focusStateEnabled\": [{ type: core_1.Input },],\r\n        \"height\": [{ type: core_1.Input },],\r\n        \"hint\": [{ type: core_1.Input },],\r\n        \"hoverStateEnabled\": [{ type: core_1.Input },],\r\n        \"isValid\": [{ type: core_1.Input },],\r\n        \"name\": [{ type: core_1.Input },],\r\n        \"offText\": [{ type: core_1.Input },],\r\n        \"onText\": [{ type: core_1.Input },],\r\n        \"readOnly\": [{ type: core_1.Input },],\r\n        \"rtlEnabled\": [{ type: core_1.Input },],\r\n        \"switchedOffText\": [{ type: core_1.Input },],\r\n        \"switchedOnText\": [{ type: core_1.Input },],\r\n        \"tabIndex\": [{ type: core_1.Input },],\r\n        \"validationError\": [{ type: core_1.Input },],\r\n        \"validationMessageMode\": [{ type: core_1.Input },],\r\n        \"value\": [{ type: core_1.Input },],\r\n        \"visible\": [{ type: core_1.Input },],\r\n        \"width\": [{ type: core_1.Input },],\r\n        \"onContentReady\": [{ type: core_1.Output },],\r\n        \"onDisposing\": [{ type: core_1.Output },],\r\n        \"onInitialized\": [{ type: core_1.Output },],\r\n        \"onOptionChanged\": [{ type: core_1.Output },],\r\n        \"onValueChanged\": [{ type: core_1.Output },],\r\n        \"accessKeyChange\": [{ type: core_1.Output },],\r\n        \"activeStateEnabledChange\": [{ type: core_1.Output },],\r\n        \"disabledChange\": [{ type: core_1.Output },],\r\n        \"elementAttrChange\": [{ type: core_1.Output },],\r\n        \"focusStateEnabledChange\": [{ type: core_1.Output },],\r\n        \"heightChange\": [{ type: core_1.Output },],\r\n        \"hintChange\": [{ type: core_1.Output },],\r\n        \"hoverStateEnabledChange\": [{ type: core_1.Output },],\r\n        \"isValidChange\": [{ type: core_1.Output },],\r\n        \"nameChange\": [{ type: core_1.Output },],\r\n        \"offTextChange\": [{ type: core_1.Output },],\r\n        \"onTextChange\": [{ type: core_1.Output },],\r\n        \"readOnlyChange\": [{ type: core_1.Output },],\r\n        \"rtlEnabledChange\": [{ type: core_1.Output },],\r\n        \"switchedOffTextChange\": [{ type: core_1.Output },],\r\n        \"switchedOnTextChange\": [{ type: core_1.Output },],\r\n        \"tabIndexChange\": [{ type: core_1.Output },],\r\n        \"validationErrorChange\": [{ type: core_1.Output },],\r\n        \"validationMessageModeChange\": [{ type: core_1.Output },],\r\n        \"valueChange\": [{ type: core_1.Output },],\r\n        \"visibleChange\": [{ type: core_1.Output },],\r\n        \"widthChange\": [{ type: core_1.Output },],\r\n        \"onBlur\": [{ type: core_1.Output },],\r\n        \"change\": [{ type: core_1.HostListener, args: ['valueChange', ['$event'],] },],\r\n        \"touched\": [{ type: core_1.HostListener, args: ['onBlur', ['$event'],] },],\r\n    };\r\n    return DxSwitchComponent;\r\n}(component_1.DxComponent));\r\nexports.DxSwitchComponent = DxSwitchComponent;\r\nvar DxSwitchModule = (function () {\r\n    function DxSwitchModule() {\r\n    }\r\n    DxSwitchModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    imports: [\r\n                        integration_1.DxIntegrationModule,\r\n                        template_1.DxTemplateModule,\r\n                        platform_browser_1.BrowserTransferStateModule\r\n                    ],\r\n                    declarations: [\r\n                        DxSwitchComponent\r\n                    ],\r\n                    exports: [\r\n                        DxSwitchComponent,\r\n                        template_1.DxTemplateModule\r\n                    ]\r\n                },] },\r\n    ];\r\n    return DxSwitchModule;\r\n}());\r\nexports.DxSwitchModule = DxSwitchModule;\r\n//# sourceMappingURL=switch.js.map","/**\r\n * DevExtreme (ui/switch.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../core/renderer\"),\r\n    eventsEngine = require(\"../events/core/events_engine\"),\r\n    devices = require(\"../core/devices\"),\r\n    extend = require(\"../core/utils/extend\").extend,\r\n    inkRipple = require(\"./widget/utils.ink_ripple\"),\r\n    registerComponent = require(\"../core/component_registrator\"),\r\n    Editor = require(\"./editor/editor\"),\r\n    eventUtils = require(\"../events/utils\"),\r\n    feedbackEvents = require(\"../events/core/emitter.feedback\"),\r\n    themes = require(\"./themes\"),\r\n    fx = require(\"../animation/fx\"),\r\n    messageLocalization = require(\"../localization/message\"),\r\n    clickEvent = require(\"../events/click\"),\r\n    Swipeable = require(\"../events/gesture/swipeable\"),\r\n    Deferred = require(\"../core/utils/deferred\").Deferred;\r\nvar SWITCH_CLASS = \"dx-switch\",\r\n    SWITCH_WRAPPER_CLASS = SWITCH_CLASS + \"-wrapper\",\r\n    SWITCH_CONTAINER_CLASS = SWITCH_CLASS + \"-container\",\r\n    SWITCH_INNER_CLASS = SWITCH_CLASS + \"-inner\",\r\n    SWITCH_HANDLE_CLASS = SWITCH_CLASS + \"-handle\",\r\n    SWITCH_ON_VALUE_CLASS = SWITCH_CLASS + \"-on-value\",\r\n    SWITCH_ON_CLASS = SWITCH_CLASS + \"-on\",\r\n    SWITCH_OFF_CLASS = SWITCH_CLASS + \"-off\",\r\n    SWITCH_ANIMATION_DURATION = 100;\r\nvar Switch = Editor.inherit({\r\n    _supportedKeys: function() {\r\n        var isRTL = this.option(\"rtlEnabled\");\r\n        var click = function(e) {\r\n                e.preventDefault();\r\n                this._clickAction({\r\n                    event: e\r\n                })\r\n            },\r\n            move = function(value, e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._animateValue(value)\r\n            };\r\n        return extend(this.callBase(), {\r\n            space: click,\r\n            enter: click,\r\n            leftArrow: move.bind(this, isRTL ? true : false),\r\n            rightArrow: move.bind(this, isRTL ? false : true)\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            hoverStateEnabled: true,\r\n            activeStateEnabled: true,\r\n            switchedOnText: this._getLocalizationMessage(\"On\"),\r\n            switchedOffText: this._getLocalizationMessage(\"Off\"),\r\n            value: false,\r\n            useInkRipple: false,\r\n            _animateHandle: true\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        var themeName = themes.current();\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return \"desktop\" === devices.real().deviceType && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return themes.isAndroid5(themeName)\r\n            },\r\n            options: {\r\n                useInkRipple: true\r\n            }\r\n        }, {\r\n            device: function(_device) {\r\n                return themes.isIos7(themeName)\r\n            },\r\n            options: {\r\n                _animateHandle: false\r\n            }\r\n        }])\r\n    },\r\n    _setDeprecatedOptions: function() {\r\n        this.callBase();\r\n        extend(this._deprecatedOptions, {\r\n            onText: {\r\n                since: \"18.2\",\r\n                alias: \"switchedOnText\"\r\n            },\r\n            offText: {\r\n                since: \"18.2\",\r\n                alias: \"switchedOffText\"\r\n            }\r\n        })\r\n    },\r\n    _getLocalizationMessage: function(state) {\r\n        var newMessage = messageLocalization.format(\"dxSwitch-switched\" + state + \"Text\"),\r\n            oldMessage = messageLocalization.format(\"dxSwitch-\" + state.toLowerCase() + \"Text\");\r\n        return newMessage || oldMessage\r\n    },\r\n    _feedbackHideTimeout: 0,\r\n    _animating: false,\r\n    _initMarkup: function() {\r\n        this._renderContainers();\r\n        this.option(\"useInkRipple\") && this._renderInkRipple();\r\n        this.$element().addClass(SWITCH_CLASS).append(this._$switchWrapper);\r\n        this._renderSubmitElement();\r\n        this._renderClick();\r\n        this.setAria(\"role\", \"button\");\r\n        this._renderSwipeable();\r\n        this.callBase();\r\n        this._renderSwitchInner();\r\n        this._renderLabels();\r\n        this._renderValue()\r\n    },\r\n    _getInnerOffset: function(value, offset) {\r\n        var ratio = (offset - this._offsetDirection() * Number(!value)) / 2;\r\n        return 100 * ratio + \"%\"\r\n    },\r\n    _getHandleOffset: function(value, offset) {\r\n        if (this.option(\"rtlEnabled\")) {\r\n            value = !value\r\n        }\r\n        if (value) {\r\n            var calcValue = -100 + 100 * -offset;\r\n            return calcValue + \"%\"\r\n        } else {\r\n            return 100 * -offset + \"%\"\r\n        }\r\n    },\r\n    _renderSwitchInner: function() {\r\n        this._$switchInner = $(\"<div>\").addClass(SWITCH_INNER_CLASS).appendTo(this._$switchContainer);\r\n        this._$handle = $(\"<div>\").addClass(SWITCH_HANDLE_CLASS).appendTo(this._$switchInner)\r\n    },\r\n    _renderLabels: function() {\r\n        this._$labelOn = $(\"<div>\").addClass(SWITCH_ON_CLASS).prependTo(this._$switchInner);\r\n        this._$labelOff = $(\"<div>\").addClass(SWITCH_OFF_CLASS).appendTo(this._$switchInner);\r\n        this._setLabelsText()\r\n    },\r\n    _renderContainers: function() {\r\n        this._$switchContainer = $(\"<div>\").addClass(SWITCH_CONTAINER_CLASS);\r\n        this._$switchWrapper = $(\"<div>\").addClass(SWITCH_WRAPPER_CLASS).append(this._$switchContainer)\r\n    },\r\n    _renderSwipeable: function() {\r\n        this._createComponent(this.$element(), Swipeable, {\r\n            elastic: false,\r\n            immediate: true,\r\n            onStart: this._swipeStartHandler.bind(this),\r\n            onUpdated: this._swipeUpdateHandler.bind(this),\r\n            onEnd: this._swipeEndHandler.bind(this),\r\n            itemSizeFunc: this._getItemSizeFunc.bind(this)\r\n        })\r\n    },\r\n    _getItemSizeFunc: function() {\r\n        return this._$switchContainer.outerWidth(true) - this._$handle.get(0).getBoundingClientRect().width\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element())\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _renderInkRipple: function() {\r\n        this._inkRipple = inkRipple.render({\r\n            waveSizeCoefficient: 1.7,\r\n            isCentered: true,\r\n            useHoldAnimation: false,\r\n            wavesNumber: 2\r\n        })\r\n    },\r\n    _renderInkWave: function(element, dxEvent, doRender, waveIndex) {\r\n        if (!this._inkRipple) {\r\n            return\r\n        }\r\n        var config = {\r\n            element: element,\r\n            event: dxEvent,\r\n            wave: waveIndex\r\n        };\r\n        if (doRender) {\r\n            this._inkRipple.showWave(config)\r\n        } else {\r\n            this._inkRipple.hideWave(config)\r\n        }\r\n    },\r\n    _updateFocusState: function(e, value) {\r\n        this.callBase.apply(this, arguments);\r\n        this._renderInkWave(this._$handle, e, value, 0)\r\n    },\r\n    _toggleActiveState: function($element, value, e) {\r\n        this.callBase.apply(this, arguments);\r\n        this._renderInkWave(this._$handle, e, value, 1)\r\n    },\r\n    _offsetDirection: function() {\r\n        return this.option(\"rtlEnabled\") ? -1 : 1\r\n    },\r\n    _renderPosition: function(state, swipeOffset) {\r\n        var innerOffset = this._getInnerOffset(state, swipeOffset),\r\n            handleOffset = this._getHandleOffset(state, swipeOffset);\r\n        if (this.option(\"_animateHandle\")) {\r\n            this._$switchInner.css(\"transform\", \" translateX(\" + innerOffset + \")\");\r\n            this._$handle.css(\"transform\", \" translateX(\" + handleOffset + \")\")\r\n        }\r\n    },\r\n    _validateValue: function() {\r\n        var check = this.option(\"value\");\r\n        if (\"boolean\" !== typeof check) {\r\n            this._options.value = !!check\r\n        }\r\n    },\r\n    _renderClick: function() {\r\n        var eventName = eventUtils.addNamespace(clickEvent.name, this.NAME);\r\n        var $element = this.$element();\r\n        this._clickAction = this._createAction(this._clickHandler.bind(this));\r\n        eventsEngine.off($element, eventName);\r\n        eventsEngine.on($element, eventName, function(e) {\r\n            this._clickAction({\r\n                event: e\r\n            })\r\n        }.bind(this))\r\n    },\r\n    _clickHandler: function(args) {\r\n        var e = args.event;\r\n        this._saveValueChangeEvent(e);\r\n        if (this._animating || this._swiping) {\r\n            return\r\n        }\r\n        this._animateValue(!this.option(\"value\"))\r\n    },\r\n    _animateValue: function(value) {\r\n        var startValue = this.option(\"value\"),\r\n            endValue = value;\r\n        if (startValue === endValue) {\r\n            return\r\n        }\r\n        this._animating = true;\r\n        var fromInnerOffset = this._getInnerOffset(startValue, 0),\r\n            toInnerOffset = this._getInnerOffset(endValue, 0),\r\n            fromHandleOffset = this._getHandleOffset(startValue, 0),\r\n            toHandleOffset = this._getHandleOffset(endValue, 0);\r\n        var that = this,\r\n            fromInnerConfig = {},\r\n            toInnerConfig = {},\r\n            fromHandleConfig = {},\r\n            toHandlerConfig = {};\r\n        fromInnerConfig.transform = \" translateX(\" + fromInnerOffset + \")\";\r\n        toInnerConfig.transform = \" translateX(\" + toInnerOffset + \")\";\r\n        fromHandleConfig.transform = \" translateX(\" + fromHandleOffset + \")\";\r\n        toHandlerConfig.transform = \" translateX(\" + toHandleOffset + \")\";\r\n        this.$element().toggleClass(SWITCH_ON_VALUE_CLASS, endValue);\r\n        fx.animate(this._$handle, {\r\n            from: fromHandleConfig,\r\n            to: toHandlerConfig,\r\n            duration: SWITCH_ANIMATION_DURATION\r\n        });\r\n        fx.animate(this._$switchInner, {\r\n            from: fromInnerConfig,\r\n            to: toInnerConfig,\r\n            duration: SWITCH_ANIMATION_DURATION,\r\n            complete: function() {\r\n                that._animating = false;\r\n                that.option(\"value\", endValue)\r\n            }\r\n        })\r\n    },\r\n    _swipeStartHandler: function(e) {\r\n        var state = this.option(\"value\"),\r\n            rtlEnabled = this.option(\"rtlEnabled\"),\r\n            maxOffOffset = rtlEnabled ? 0 : 1,\r\n            maxOnOffset = rtlEnabled ? 1 : 0;\r\n        e.event.maxLeftOffset = state ? maxOffOffset : maxOnOffset;\r\n        e.event.maxRightOffset = state ? maxOnOffset : maxOffOffset;\r\n        this._swiping = true;\r\n        this._feedbackDeferred = new Deferred;\r\n        feedbackEvents.lock(this._feedbackDeferred);\r\n        this._toggleActiveState(this.$element(), this.option(\"activeStateEnabled\"))\r\n    },\r\n    _swipeUpdateHandler: function(e) {\r\n        this._renderPosition(this.option(\"value\"), e.event.offset)\r\n    },\r\n    _swipeEndHandler: function(e) {\r\n        var that = this,\r\n            offsetDirection = this._offsetDirection(),\r\n            toInnerConfig = {},\r\n            toHandleConfig = {};\r\n        var innerOffset = this._getInnerOffset(that.option(\"value\"), e.event.targetOffset),\r\n            handleOffset = this._getHandleOffset(that.option(\"value\"), e.event.targetOffset);\r\n        toInnerConfig.transform = \" translateX(\" + innerOffset + \")\";\r\n        toHandleConfig.transform = \" translateX(\" + handleOffset + \")\";\r\n        fx.animate(this._$handle, {\r\n            to: toHandleConfig,\r\n            duration: SWITCH_ANIMATION_DURATION\r\n        });\r\n        fx.animate(this._$switchInner, {\r\n            to: toInnerConfig,\r\n            duration: SWITCH_ANIMATION_DURATION,\r\n            complete: function() {\r\n                that._swiping = false;\r\n                var pos = that.option(\"value\") + offsetDirection * e.event.targetOffset;\r\n                that.option(\"value\", Boolean(pos));\r\n                that._feedbackDeferred.resolve();\r\n                that._toggleActiveState(that.$element(), false)\r\n            }\r\n        })\r\n    },\r\n    _renderValue: function() {\r\n        this._validateValue();\r\n        var val = this.option(\"value\");\r\n        this._renderPosition(val, 0);\r\n        this.$element().toggleClass(SWITCH_ON_VALUE_CLASS, val);\r\n        this._$submitElement.val(val);\r\n        this.setAria({\r\n            pressed: val,\r\n            label: val ? this.option(\"switchedOnText\") : this.option(\"switchedOffText\")\r\n        })\r\n    },\r\n    _setLabelsText: function() {\r\n        this._$labelOn && this._$labelOn.text(this.option(\"switchedOnText\"));\r\n        this._$labelOff && this._$labelOff.text(this.option(\"switchedOffText\"))\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible) {\r\n            this.repaint()\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"useInkRipple\":\r\n                this._invalidate();\r\n                break;\r\n            case \"width\":\r\n                delete this._marginBound;\r\n                this._refresh();\r\n                break;\r\n            case \"switchedOnText\":\r\n            case \"switchedOffText\":\r\n                this._setLabelsText();\r\n                break;\r\n            case \"value\":\r\n                this._renderValue();\r\n                this.callBase(args);\r\n                break;\r\n            case \"_animateHandle\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _clean: function() {\r\n        delete this._inkRipple;\r\n        this.callBase()\r\n    }\r\n});\r\nregisterComponent(\"dxSwitch\", Switch);\r\nmodule.exports = Switch;\r\nmodule.exports.default = module.exports;\r\n"],"sourceRoot":""}