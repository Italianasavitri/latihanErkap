{"version":3,"sources":["webpack:///./node_modules/devextreme-angular/ui/nested/base/pivot-grid-data-source.js","webpack:///./node_modules/devextreme-angular/ui/nested/data-source.js","webpack:///./node_modules/devextreme-angular/ui/nested/field-chooser.js","webpack:///./node_modules/devextreme-angular/ui/nested/field-panel.js","webpack:///./node_modules/devextreme-angular/ui/nested/store.js","webpack:///./node_modules/devextreme-angular/ui/pivot-grid.js","webpack:///./node_modules/devextreme-angular/ui/text-box.js","webpack:///./node_modules/devextreme/ui/pivot_grid.js","webpack:///./node_modules/devextreme/ui/pivot_grid/data_source.js","webpack:///./node_modules/devextreme/ui/pivot_grid/local_store.js","webpack:///./node_modules/devextreme/ui/pivot_grid/remote_store.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.area_item.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.chart_integration.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.data_area.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.data_controller.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.export.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.field_chooser.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.field_chooser_base.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.fields_area.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.headers_area.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.summary_display_modes.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.utils.js","webpack:///./node_modules/devextreme/ui/pivot_grid/ui.sortable.js","webpack:///./node_modules/devextreme/ui/pivot_grid/xmla_store/xmla_store.js"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,sBAAsB,mBAAO,CAAC,4FAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,kD;;;;;;;;;;;;AC3Ha;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,sBAAsB,mBAAO,CAAC,yFAA0B;AACxD,+BAA+B,mBAAO,CAAC,iHAA+B;AACtE,kBAAkB,mBAAO,CAAC,6EAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,yDAAyD;AACzD,SAAS,uDAAuD,wBAAwB,GAAG,oBAAoB,IAAI;AACnH,SAAS,uDAAuD,oBAAoB,IAAI;AACxF,MAAM;AACN;AACA,4BAA4B,qEAAqE,sCAAsC,EAAE,KAAK;AAC9I;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,uC;;;;;;;;;;;;ACxGa;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,sBAAsB,mBAAO,CAAC,yFAA0B;AACxD,sBAAsB,mBAAO,CAAC,yFAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,2DAA2D;AAC3D,SAAS,uDAAuD,wBAAwB,GAAG,oBAAoB,IAAI;AACnH,SAAS,uDAAuD,oBAAoB,IAAI;AACxF,MAAM;AACN;AACA,yBAAyB,qBAAqB;AAC9C,8BAA8B,qBAAqB;AACnD,qBAAqB,qBAAqB;AAC1C,oBAAoB,qBAAqB;AACzC,oBAAoB,qBAAqB;AACzC,2BAA2B,qBAAqB;AAChD,mBAAmB,qBAAqB;AACxC,mBAAmB,qBAAqB;AACxC,mBAAmB,qBAAqB;AACxC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;;;;;;AC/Ka;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,sBAAsB,mBAAO,CAAC,yFAA0B;AACxD,sBAAsB,mBAAO,CAAC,yFAA0B;AACxiBAAiB,IAAI;AACrB;AACA;AACA,yDAAyD;AACzD,SAAS,uDAAuD,wBAAwB,GAAG,oBAAoB,IAAI;AACnH,SAAS,uDAAuD,oBAAoB,IAAI;AACxF,MAAM;AACN;AACA,gCAAgC,qBAAqB;AACrD,8BAA8B,qBAAqB;AACnD,4BAA4B,qBAAqB;AACjD,8BAA8B,qBAAqB;AACnD,2BAA2B,qBAAqB;AAChD,mBAAmB,qBAAqB;AACxC,qBAAqB,qBAAqB;AAC1C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,uC;;;;;;;;;;;;ACzJa;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,sBAAsB,mBAAO,CAAC,yFAA0B;AACxD,sBAAsB,mBAAO,CAAC,yFAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,oDAAoD;AACpD,SAAS,uDAAuD,wBAAwB,GAAG,oBAAoB,IAAI;AACnH,SAAS,uDAAuD,oBAAoB,IAAI;AACxF,MAAM;AACN;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,iC;;;;;;;;;;;;ACvFa;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,qGAA2B;AAC5D,yBAAyB,mBAAO,CAAC,qGAA2B;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,mBAAmB,mBAAO,CAAC,4EAA0B;AACrD,kBAAkB,mBAAO,CAAC,8EAAmB;AAC7C,sBAAsB,mBAAO,CAAC,sFAAuB;AACrD,oBAAoB,mBAAO,CAAC,kFAAqB;AACjD,iBAAiB,mBAAO,CAAC,4EAAkB;AAC3C,sBAAsB,mBAAO,CAAC,sFAAuB;AACrD,uBAAuB,mBAAO,CAAC,wFAAwB;AACvD,+BAA+B,mBAAO,CAAC,wGAAgC;AACvE,oBAAoB,mBAAO,CAAC,wFAAsB;AAClD,kBAAkB,mBAAO,CAAC,oFAAoB;AAC9C,eAAe,mBAAO,CAAC,8EAAiB;AACxC,sBAAsB,mBAAO,CAAC,4FAAwB;AACtD,cAAc,mBAAO,CAAC,4EAAgB;AACtC,eAAe,mBAAO,CAAC,8EAAiB;AACxC,sBAAsB,mBAAO,CAAC,4FAAwB;AACtD,cAAc,mBAAO,CAAC,4EAAgB;AACtC,oBAAoB,mBAAO,CAAC,wFAAsB;AAClD,mBAAmB,mBAAO,CAAC,sFAAqB;AAChD,kBAAkB,mBAAO,CAAC,oFAAoB;AAC9C,sBAAsB,mBAAO,CAAC,4FAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8CAA8C;AAC3D,aAAa,oDAAoD;AACjE,aAAa,oDAAoD;AACjE,aAAa,oEAAoE;AACjF,aAAa,8CAA8C;AAC3D,aAAa,4CAA4C;AACzD,aAAa,8CAA8C;AAC3D,aAAa,gDAAgD;AAC7D,aAAa,kDAAkD;AAC/D,aAAa,sDAAsD;AACnE,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C,aAAa,6BAA6B;AAC1C,aAAa,sCAAsC;AACnD,aAAa,8BAA8B;AAC3C,aAAa,2BAA2B;AACxC,aAAa,yBAAyB;AACtC,aAAa,4BAA4B;AACzC,aAAa,uBAAuB;AACpC,aAAa,6BAA6B;AAC1C,aAAa,2BAA2B;AACxC,aAAa,6BAA6B;AAC1C,aAAa,uBAAuB;AACpC,aAAa,sCAAsC;AACnD,aAAa,qBAAqB;AAClC,aAAa,0BAA0B;AACvC,aAAa,gCAAgC;AAC7C,aAAa,2BAA2B;AACxC,aAAa,0BAA0B;AACvC,aAAa,4BAA4B;AACzC,aAAa,sCAAsC;AACnD,aAAa,iCAAiC;AAC9C,aAAa,mCAAmC;AAChD,aAAa,8BAA8B;AAC3C,aAAa,gCAAgC;AAC7C,aAAa,6BAA6B;AAC1C,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,sBAAsB;AACnC,aAAa;AACbiBAAiB,IAAI;AACrB;AACA;AACA,uDAAuD;AACvD,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,wCAAwC;AACjD,SAAS,wCAAwC;AACjD,SAAS,uDAAuD;AAChE,SAAS,0CAA0C;AACnD,SAAS,0CAA0C;AACnD,SAAS,gCAAgC,mDAAmD,IAAI;AAChG,MAAM;AACN;AACA,4BAA4B,qBAAqB;AACjD,4BAA4B,qBAAqB;AACjD,0BAA0B,qBAAqB;AAC/C,mCAAmC,qBAAqB;AACxD,2BAA2B,qBAAqB;AAChD,wBAAwB,qBAAqB;AAC7C,sBAAsB,qBAAqB;AAC3C,yBAAyB,qBAAqB;AAC9C,oBAAoB,qBAAqB;AACzC,0BAA0B,qBAAqB;AAC/C,wBAAwB,qBAAqB;AAC7C,0BAA0B,qBAAqB;AAC/C,oBAAoB,qBAAqB;AACzC,mCAAmC,qBAAqB;AACxD,kBAAkB,qBAAqB;AACvC,uBAAuB,qBAAqB;AAC5C,6BAA6B,qBAAqB;AAClD,wBAAwB,qBAAqB;AAC7C,uBAAuB,qBAAqB;AAC5C,yBAAyB,qBAAqB;AAC9C,mCAAmC,qBAAqB;AACxD,8BAA8B,qBAAqB;AACnD,gCAAgC,qBAAqB;AACrD,2BAA2B,qBAAqB;AAChD,6BAA6B,qBAAqB;AAClD,0BAA0B,qBAAqB;AAC/C,sBAAsB,qBAAqB;AAC3C,mBAAmB,qBAAqB;AACxC,qBAAqB,qBAAqB;AAC1C,mBAAmB,qBAAqB;AACxC,6BAA6B,qBAAqB;AAClD,yBAAyB,sBAAsB;AAC/C,4BAA4B,sBAAsB;AAClD,4BAA4B,sBAAsB;AAClD,oCAAoC,sBAAsB;AAC1D,yBAAyB,sBAAsB;AAC/C,wBAAwB,sBAAsB;AAC9C,yBAAyB,sBAAsB;AAC/C,0BAA0B,sBAAsB;AAChD,2BAA2B,sBAAsB;AACjD,6BAA6B,sBAAsB;AACnD,kCAAkC,sBAAsB;AACxD,kCAAkC,sBAAsB;AACxD,gCAAgC,sBAAsB;AACtD,yCAAyC,sBAAsB;AAC/D,iCAAiC,sBAAsB;AACvD,8BAA8B,sBAAsB;AACpD,4BAA4B,sBAAsB;AAClD,+BAA+B,sBAAsB;AACrD,0BAA0B,sBAAsB;AAChD,gCAAgC,sBAAsB;AACtD,8BAA8B,sBAAsB;AACpD,gCAAgC,sBAAsB;AACtD,0BAA0B,sBAAsB;AAChD,yCAAyC,sBAAsB;AAC/D,wBAAwB,sBAAsB;AAC9C,6BAA6B,sBAAsB;AACnD,mCAAmC,sBAAsB;AACzD,8BAA8B,sBAAsB;AACpD,6BAA6B,sBAAsB;AACnD,+BAA+B,sBAAsB;AACrD,yCAAyC,sBAAsB;AAC/D,oCAAoC,sBAAsB;AAC1D,sCAAsC,sBAAsB;AAC5D,iCAAiC,sBAAsB;AACvD,mCAAmC,sBAAsB;AACzD,gCAAgC,sBAAsB;AACtD,4BAA4B,sBAAsB;AAClD,yBAAyB,sBAAsB;AAC/C,2BAA2B,sBAAsB;AACjD,yBAAyB,sBAAsB;AAC/C,mCAAmC,sBAAsB;AACzD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,sC;;;;;;;;;;;;ACxqBa;AACb;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,qGAA2B;AAC5D,yBAAyB,mBAAO,CAAC,qGAA2B;AAC5D,aAAa,mBAAO,CAAC,iEAAe;AACpC,iBAAiB,mBAAO,CAAC,wEAAwB;AACjD,kBAAkB,mBAAO,CAAC,sEAAa;AACvC,cAAc,mBAAO,CAAC,oEAAgB;AACtC,kBAAkB,mBAAO,CAAC,8EAAmB;AAC7C,sBAAsB,mBAAO,CAAC,sFAAuB;AACrD,oBAAoB,mBAAO,CAAC,kFAAqB;AACjD,iBAAiB,mBAAO,CAAC,4EAAkB;AAC3C,sBAAsB,mBAAO,CAAC,sFAAuB;AACrD,uBAAuB,mBAAO,CAAC,wFAAwB;AACvD;AACA;AACA,gDAAgD,2BAA2B,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,aAAa,wCAAwC;AACrD,aAAa,oDAAoD;AACjE,aAAa,oCAAoC;AACjD,aAAa,kCAAkC;AAC/C,aAAa,8CAA8C;AAC3D,aAAa,4CAA4C;AACzD,aAAa,0CAA0C;AACvD,aAAa,4CAA4C;AACzD,aAAa,kDAAkD;AAC/D,aAAa,sCAAsC;AACnD,aAAa,0CAA0C;AACvD,aAAa,4CAA4C;AACzD,aAAa,sCAAsC;AACnD,aAAa,sDAAsD;AACnE,aAAa,sCAAsC;AACnD,aAAa,oDAAoD;AACjE,aAAa,0BAA0B;AACvC,aAAa,mCAAmC;AAChD,aAAa,yBAAyB;AACtC,aAAa,4BAA4B;AACzC,aAAa,kCAAkC;AAC/C,aAAa,uBAAuB;AACpC,aAAa,qBAAqB;AAClC,aAAa,kCAAkC;AAC/C,aAAa,0BAA0B;AACvC,aAAa,wBAAwB;AACrC,aAAa,qBAAqB;AAClC,aAAa,yBAAyB;AACtC,aAAa,mCAAmC;AAChD,aAAa,0BAA0B;AACvC,aAAa,0BAA0B;AACvC,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa,4BAA4B;AACzC,aAAa,yBAAyB;AACtC,aAAa,2BAA2B;AACxC,aAAa,gCAAgC;AAC7C,aAAa,6BAA6B;AAC1C,aAAa,2BAA2B;AACxC,aAAa,4BAA4B;AACzC,aAAa,yBAAyB;AACtC,aAAa,qBAAqB;AAClC,aAAa,+BAA+B;AAC5C,aAAa,gCAAgC;AAC7C,aAAa,sCAAsC;AACnD,aAAa,sBAAsB;AACnC,aAAa,iCAAiC;AAC9C,aAAa,wBAAwB;AACrC,aAAa,sBAAsB;AACnC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,kBAAkB;AACrF,oEAAoE,mBAAmB;AACvF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qDAAqD;AACrD,SAAS,2BAA2B;AACpC,SAAS,uBAAuB;AAChC,SAAS,wCAAwC;AACjD,SAAS,wCAAwC;AACjD,SAAS,0CAA0C;AACnD,SAAS,0CAA0C;AACnD,SAAS,gCAAgC,mDAAmD,IAAI;AAChG,MAAM;AACN;AACA,uBAAuB,uEAAuE;AAC9F,uBAAuB,qBAAqB;AAC5C,gCAAgC,qBAAqB;AACrD,sBAAsB,qBAAqB;AAC3C,yBAAyB,qBAAqB;AAC9C,+BAA+B,qBAAqB;AACpD,oBAAoB,qBAAqB;AACzC,kBAAkB,qBAAqB;AACvC,+BAA+B,qBAAqB;AACpD,uBAAuB,qBAAqB;AAC5C,qBAAqB,qBAAqB;AAC1C,kBAAkB,qBAAqB;AACvC,sBAAsB,qBAAqB;AAC3C,gCAAgC,qBAAqB;AACrD,uBAAuB,qBAAqB;AAC5C,uBAAuB,qBAAqB;AAC5C,kBAAkB,qBAAqB;AACvC,kBAAkB,qBAAqB;AACvC,yBAAyB,qBAAqB;AAC9C,sBAAsB,qBAAqB;AAC3C,wBAAwB,qBAAqB;AAC7C,6BAA6B,qBAAqB;AAClD,0BAA0B,qBAAqB;AAC/C,wBAAwB,qBAAqB;AAC7C,yBAAyB,qBAAqB;AAC9C,sBAAsB,qBAAqB;AAC3C,kBAAkB,qBAAqB;AACvC,4BAA4B,qBAAqB;AACjD,6BAA6B,qBAAqB;AAClD,mCAAmC,qBAAqB;AACxD,mBAAmB,qBAAqB;AACxC,8BAA8B,qBAAqB;AACnD,qBAAqB,qBAAqB;AAC1C,mBAAmB,qBAAqB;AACxC,sBAAsB,sBAAsB;AAC5C,4BAA4B,sBAAsB;AAClD,oBAAoB,sBAAsB;AAC1C,mBAAmB,sBAAsB;AACzC,yBAAyB,sBAAsB;AAC/C,wBAAwB,sBAAsB;AAC9C,uBAAuB,sBAAsB;AAC7C,wBAAwB,sBAAsB;AAC9C,2BAA2B,sBAAsB;AACjD,qBAAqB,sBAAsB;AAC3C,uBAAuB,sBAAsB;AAC7C,wBAAwB,sBAAsB;AAC9C,qBAAqB,sBAAsB;AAC3C,6BAA6B,sBAAsB;AACnD,qBAAqB,sBAAsB;AAC3C,4BAA4B,sBAAsB;AAClD,6BAA6B,sBAAsB;AACnD,sCAAsC,sBAAsB;AAC5D,4BAA4B,sBAAsB;AAClD,+BAA+B,sBAAsB;AACrD,qCAAqC,sBAAsB;AAC3D,0BAA0B,sBAAsB;AAChD,wBAAwB,sBAAsB;AAC9C,qCAAqC,sBAAsB;AAC3D,6BAA6B,sBAAsB;AACnD,2BAA2B,sBAAsB;AACjD,wBAAwB,sBAAsB;AAC9C,4BAA4B,sBAAsB;AAClD,sCAAsC,sBAAsB;AAC5D,6BAA6B,sBAAsB;AACnD,6BAA6B,sBAAsB;AACnD,wBAAwB,sBAAsB;AAC9C,wBAAwB,sBAAsB;AAC9C,+BAA+B,sBAAsB;AACrD,4BAA4B,sBAAsB;AAClD,8BAA8B,sBAAsB;AACpD,mCAAmC,sBAAsB;AACzD,gCAAgC,sBAAsB;AACtD,8BAA8B,sBAAsB;AACpD,+BAA+B,sBAAsB;AACrD,4BAA4B,sBAAsB;AAClD,wBAAwB,sBAAsB;AAC9C,kCAAkC,sBAAsB;AACxD,mCAAmC,sBAAsB;AACzD,yCAAyC,sBAAsB;AAC/D,yBAAyB,sBAAsB;AAC/C,oCAAoC,sBAAsB;AAC1D,2BAA2B,sBAAsB;AACjD,yBAAyB,sBAAsB;AAC/C,oBAAoB,sBAAsB;AAC1C,oBAAoB,gEAAgE;AACpF,qBAAqB,2DAA2D;AAChF;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,oC;;;;;;;;;;;;AChsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,iBAAiB,mBAAO,CAAC,4FAA4B;AACrD;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,uBAAuB,mBAAO,CAAC,qGAAoC;AACnE,YAAY,mBAAO,CAAC,mFAA2B;AAC/C,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,cAAc,mBAAO,CAAC,6EAAwB;AAC9C,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA,YAAY,mBAAO,CAAC,iEAAkB;AACtC,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,gBAAgB,mBAAO,CAAC,qFAA4B;AACpD,uBAAuB,mBAAO,CAAC,6EAAwB;AACvD,iBAAiB,mBAAO,CAAC,6EAAe;AACxC,kBAAkB,mBAAO,CAAC,+EAAgB;AAC1C,gBAAgB,mBAAO,CAAC,iGAAyB;AACjD,0BAA0B,mBAAO,CAAC,6HAAuC;AACzE,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iCAAiC,0CAA0C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sCAAsC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC/6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA,gBAAgB,mBAAO,CAAC,iEAAkB;AAC1C,gBAAgB,mBAAO,CAAC,iEAAkB;AAC1C,wBAAwB,mBAAO,CAAC,uGAAqC;AACrE,uBAAuB,mBAAO,CAAC,qGAAoC;AACnE,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,oBAAoB,mBAAO,CAAC,2EAAuB;AACnD,YAAY,mBAAO,CAAC,iEAAkB;AACtC,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,WAAW,mBAAO,CAAC,mFAA2B;AAC9C,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD;AACA;AACA,iBAAiB,mBAAO,CAAC,6EAAwB;AACjD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,mCAAmC;AACxE;AACA;AACA;AACA;AACA,sCAAsC,wCAAwC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AChgBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,YAAY,mBAAO,CAAC,2EAAuB;AAC3C,aAAa,mBAAO,CAAC,iEAAkB;AACvC;AACA,cAAc,mBAAO,CAAC,+EAAyB;AAC/C,gBAAgB,mBAAO,CAAC,mFAA2B;AACnD,mBAAmB,mBAAO,CAAC,qGAAoC;AAC/D;AACA,gBAAgB,mBAAO,CAAC,mFAA2B;AACnD,oBAAoB,mBAAO,CAAC,6FAAuB;AACnD;AACA,0BAA0B,mBAAO,CAAC,uGAAqC;;AAEvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8CAA8C;AAC9C;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE;AACA;AACA,6CAA6C,6BAA6B;AAC1E,4DAA4D;AAC5D;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kCAAkC;AAClC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,CAAC;;;;;;;;;;;;;ACncD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,YAAY,mBAAO,CAAC,iEAAkB;AACtC,uBAAuB,mBAAO,CAAC,yEAAsB;AACrD,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gHAAgH;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD,0CAA0C,wBAAwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uBAAuB;AACrD;AACA;AACA,2BAA2B,sBAAsB;AACjD,yCAAyC,uCAAuC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AC5fD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,iBAAiB,mBAAO,CAAC,6FAAuB;AAChD,WAAW,mBAAO,CAAC,mFAA2B;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,iCAAiC;AACjC;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,eAAe,mBAAO,CAAC,qGAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;;;;;;;;;;;;AC5ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,gBAAgB,mBAAO,CAAC,qFAA4B;AACpD,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,cAAc,mBAAO,CAAC,6EAAwB;AAC9C,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD,YAAY,mBAAO,CAAC,iEAAkB;AACtC,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,uBAAuB,mBAAO,CAAC,uIAAkD;AACjF,yBAAyB,mBAAO,CAAC,mIAAgD;AACjF,mBAAmB,mBAAO,CAAC,+HAA8C;AACzE,0BAA0B,mBAAO,CAAC,6EAAe;AACjD,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB;AACA,mDAAmD;AACnD;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G;AAC3G;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,4CAA4C;AAC5C;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,wCAAwC;AACxC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sEAAsE;AACtE;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACl4BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,YAAY,mBAAO,CAAC,iEAAkB;AACtC,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,WAAW,mBAAO,CAAC,mFAA2B;AAC9C,mBAAmB,mBAAO,CAAC,uEAAqB;AAChD,yBAAyB,mBAAO,CAAC,mFAA2B;AAC5D,qBAAqB,mBAAO,CAAC,6DAAgB;AAC7C;AACA;AACA,kBAAkB,mBAAO,CAAC,mHAAwC;AAClE,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,iCAAiC;AAC3D,gEAAgE,gBAAgB;AAChF;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACvND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,gBAAgB,mBAAO,CAAC,+EAAyB;AACjD,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,cAAc,mBAAO,CAAC,6EAAwB;AAC9C,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD,0BAA0B,mBAAO,CAAC,qFAA4B;AAC9D,wBAAwB,mBAAO,CAAC,iGAAkC;AAClE,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD,eAAe,mBAAO,CAAC,+DAAc;AACrC,kBAAkB,mBAAO,CAAC,qEAAiB;AAC3C,uBAAuB,mBAAO,CAAC,uHAAoC;AACnE;AACA;AACA;AACA,mBAAO,CAAC,6EAAe;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;;;;;;ACjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,mBAAmB,mBAAO,CAAC,+FAAiC;AAC5D,iBAAiB,mBAAO,CAAC,6EAAwB;AACjD,iBAAiB,mBAAO,CAAC,qEAAoB;AAC7C,WAAW,mBAAO,CAAC,+EAAyB;AAC5C,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,cAAc,mBAAO,CAAC,6EAAwB;AAC9C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD,0BAA0B,mBAAO,CAAC,qFAA4B;AAC9D,wBAAwB,mBAAO,CAAC,iGAAkC;AAClE,aAAa,mBAAO,CAAC,6EAAqB;AAC1C,mBAAmB,mBAAO,CAAC,+HAA8C;AACzE,uBAAuB,mBAAO,CAAC,+HAA8C;AAC7E,mBAAmB,mBAAO,CAAC,qHAAyC;AACpE,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD,eAAe,mBAAO,CAAC,6EAAe;AACtC,eAAe,mBAAO,CAAC,mFAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;;;;;;AC7UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,WAAW,mBAAO,CAAC,+EAAyB;AAC5C,WAAW,mBAAO,CAAC,mFAA2B;AAC9C,eAAe,mBAAO,CAAC,qGAA2B;AAClD,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD,YAAY,mBAAO,CAAC,uDAAU;AAC9B,aAAa,mBAAO,CAAC,yDAAW;AAChC;AACA,mBAAO,CAAC,uHAAoC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;;;;;;;;;;;;AC5ID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,cAAc,mBAAO,CAAC,6EAAwB;AAC9C,WAAW,mBAAO,CAAC,mFAA2B;AAC9C,eAAe,mBAAO,CAAC,qGAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACrPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD;AACA,cAAc,mBAAO,CAAC,iFAA0B;AAChD,mBAAmB,mBAAO,CAAC,+FAAiC;AAC5D,wBAAwB,mBAAO,CAAC,iGAAkC;AAClE,uBAAuB,mBAAO,CAAC,yEAAsB;AACrD,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,kBAAkB,mBAAO,CAAC,+EAAyB;AACnD,WAAW,mBAAO,CAAC,mFAA2B;AAC9C,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,iBAAiB,mBAAO,CAAC,qEAAoB;AAC7C,0BAA0B,mBAAO,CAAC,qFAA4B;AAC9D,aAAa,mBAAO,CAAC,6EAAqB;AAC1C,iBAAiB,mBAAO,CAAC,qEAAoB;AAC7C,oBAAoB,mBAAO,CAAC,qGAAiC;AAC7D,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD,8BAA8B,mBAAO,CAAC,iHAAiC;AACvE,0BAA0B,mBAAO,CAAC,6EAAe;AACjD,wBAAwB,mBAAO,CAAC,qGAA2B;AAC3D,kBAAkB,mBAAO,CAAC,2GAA8B;AACxD,iBAAiB,mBAAO,CAAC,yGAA6B;AACtD,4BAA4B,mBAAO,CAAC,6GAA+B;AACnE,gCAAgC,mBAAO,CAAC,uHAAoC;AAC5E,kBAAkB,mBAAO,CAAC,+FAAwB;AAClD,4BAA4B,mBAAO,CAAC,qHAAmC;AACvE,YAAY,mBAAO,CAAC,uDAAU;AAC9B,kBAAkB,mBAAO,CAAC,qEAAiB;AAC3C,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;;;;;;ACzmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,cAAc,mBAAO,CAAC,6EAAwB;AAC9C;AACA,qBAAqB,mBAAO,CAAC,6FAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,WAAW,mBAAO,CAAC,2EAAuB;AAC1C,oBAAoB,mBAAO,CAAC,2EAAuB;AACnD,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,uBAAuB,mBAAO,CAAC,+EAAyB;AACxD,mBAAmB,mBAAO,CAAC,uEAAqB;AAChD,uBAAuB,mBAAO,CAAC,qGAAoC;AACnE,iBAAiB,mBAAO,CAAC,6EAAwB;AACjD,oBAAoB,mBAAO,CAAC,mFAA2B;AACvD;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,mBAAmB,mBAAO,CAAC,+FAAiC;AAC5D,gBAAgB,mBAAO,CAAC,2EAAuB;AAC/C,aAAa,mBAAO,CAAC,+EAAyB;AAC9C,WAAW,mBAAO,CAAC,mFAA2B;AAC9C,iBAAiB,mBAAO,CAAC,qEAAoB;AAC7C;AACA,wBAAwB,mBAAO,CAAC,iGAAkC;AAClE,mBAAmB,mBAAO,CAAC,iFAA0B;AACrD,iBAAiB,mBAAO,CAAC,mEAAmB;AAC5C,yBAAyB,mBAAO,CAAC,2FAA4B;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;;;;;;ACxaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AACb,QAAQ,mBAAO,CAAC,0EAAwB;AACxC,aAAa,mBAAO,CAAC,kFAA4B;AACjD,YAAY,mBAAO,CAAC,oEAAqB;AACzC,mBAAmB,mBAAO,CAAC,kFAA4B;AACvD,aAAa,mBAAO,CAAC,sEAAsB;AAC3C,WAAW,mBAAO,CAAC,kFAA4B;AAC/C,gBAAgB,mBAAO,CAAC,8EAA0B;AAClD,oBAAoB,mBAAO,CAAC,sFAA8B;AAC1D,cAAc,mBAAO,CAAC,gFAA2B;AACjD,qBAAqB,mBAAO,CAAC,8FAAwB;AACrD,oBAAoB,mBAAO,CAAC,sFAA8B;AAC1D;AACA;AACA,oBAAoB,mBAAO,CAAC,sGAAsC;AAClE;AACA,6JAA6J,EAAE,4DAA4D,EAAE,2BAA2B,EAAE,iFAAiF,EAAE,WAAW,EAAE;AAC1V,kKAAkK,EAAE,0DAA0D,EAAE,sJAAsJ,EAAE;AACxX,uBAAuB,EAAE,OAAO,EAAE,EAAE,EAAE;AACtC,oCAAoC,EAAE,OAAO,EAAE;AAC/C,oBAAoB,EAAE,EAAE,EAAE,KAAK,EAAE;AACjC,4BAA4B,EAAE;AAC9B,iCAAiC,EAAE,GAAG,EAAE;AACxC,oBAAoB,EAAE,iFAAiF,EAAE;AACzG,mCAAmC,EAAE;AACrC,oBAAoB,GAAG;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,oDAAoD,EAAE;AACtD;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,yBAAyB;AACtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8HAA8H;AAC9H;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC","file":"default~views-administration-administration-module-ngfactory~views-asset-asset-module-ngfactory~view~c8a531bf.js","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar nested_option_1 = require(\"../../../core/nested-option\");\r\nvar DxoPivotGridDataSource = (function (_super) {\r\n    __extends(DxoPivotGridDataSource, _super);\r\n    function DxoPivotGridDataSource() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"fields\", {\r\n        get: function () {\r\n            return this._getOption('fields');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('fields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"filter\", {\r\n        get: function () {\r\n            return this._getOption('filter');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filter', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"onChanged\", {\r\n        get: function () {\r\n            return this._getOption('onChanged');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('onChanged', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"onFieldsPrepared\", {\r\n        get: function () {\r\n            return this._getOption('onFieldsPrepared');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('onFieldsPrepared', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"onLoadError\", {\r\n        get: function () {\r\n            return this._getOption('onLoadError');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('onLoadError', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"onLoadingChanged\", {\r\n        get: function () {\r\n            return this._getOption('onLoadingChanged');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('onLoadingChanged', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"remoteOperations\", {\r\n        get: function () {\r\n            return this._getOption('remoteOperations');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('remoteOperations', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"retrieveFields\", {\r\n        get: function () {\r\n            return this._getOption('retrieveFields');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('retrieveFields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoPivotGridDataSource.prototype, \"store\", {\r\n        get: function () {\r\n            return this._getOption('store');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('store', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DxoPivotGridDataSource;\r\n}(nested_option_1.NestedOption));\r\nexports.DxoPivotGridDataSource = DxoPivotGridDataSource;\r\n//# sourceMappingURL=pivot-grid-data-source.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar nested_option_1 = require(\"../../core/nested-option\");\r\nvar pivot_grid_data_source_1 = require(\"./base/pivot-grid-data-source\");\r\nvar field_dxi_1 = require(\"./field-dxi\");\r\nvar DxoDataSourceComponent = (function (_super) {\r\n    __extends(DxoDataSourceComponent, _super);\r\n    function DxoDataSourceComponent(parentOptionHost, optionHost) {\r\n        var _this = _super.call(this) || this;\r\n        parentOptionHost.setNestedOption(_this);\r\n        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));\r\n        if ((console) && (console.warn)) {\r\n            console.warn('The nested \\'dxo-data-source\\' component is deprecated in 17.2. ' +\r\n                'Use the \\'dataSource\\' option instead. ' +\r\n                'See:\\nhttps://github.com/DevExpress/devextreme-angular/blob/master/CHANGELOG.md#17.2.3');\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxoDataSourceComponent.prototype, \"_optionPath\", {\r\n        get: function () {\r\n            return 'dataSource';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoDataSourceComponent.prototype, \"fieldsChildren\", {\r\n        get: function () {\r\n            return this._getOption('fields');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('fields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxoDataSourceComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dxo-data-source',\r\n                    template: '',\r\n                    styles: [''],\r\n                    providers: [nested_option_1.NestedOptionHost],\r\n                    inputs: [\r\n                        'fields',\r\n                        'filter',\r\n                        'onChanged',\r\n                        'onFieldsPrepared',\r\n                        'onLoadError',\r\n                        'onLoadingChanged',\r\n                        'remoteOperations',\r\n                        'retrieveFields',\r\n                        'store'\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxoDataSourceComponent.ctorParameters = function () { return [\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.SkipSelf }, { type: core_1.Host },] },\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.Host },] },\r\n    ]; };\r\n    DxoDataSourceComponent.propDecorators = {\r\n        \"fieldsChildren\": [{ type: core_1.ContentChildren, args: [core_1.forwardRef(function () { return field_dxi_1.DxiFieldComponent; }),] },],\r\n    };\r\n    return DxoDataSourceComponent;\r\n}(pivot_grid_data_source_1.DxoPivotGridDataSource));\r\nexports.DxoDataSourceComponent = DxoDataSourceComponent;\r\nvar DxoDataSourceModule = (function () {\r\n    function DxoDataSourceModule() {\r\n    }\r\n    DxoDataSourceModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    declarations: [\r\n                        DxoDataSourceComponent\r\n                    ],\r\n                    exports: [\r\n                        DxoDataSourceComponent\r\n                    ],\r\n                },] },\r\n    ];\r\n    return DxoDataSourceModule;\r\n}());\r\nexports.DxoDataSourceModule = DxoDataSourceModule;\r\n//# sourceMappingURL=data-source.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar nested_option_1 = require(\"../../core/nested-option\");\r\nvar nested_option_2 = require(\"../../core/nested-option\");\r\nvar DxoFieldChooserComponent = (function (_super) {\r\n    __extends(DxoFieldChooserComponent, _super);\r\n    function DxoFieldChooserComponent(parentOptionHost, optionHost) {\r\n        var _this = _super.call(this) || this;\r\n        parentOptionHost.setNestedOption(_this);\r\n        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"allowSearch\", {\r\n        get: function () {\r\n            return this._getOption('allowSearch');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowSearch', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"applyChangesMode\", {\r\n        get: function () {\r\n            return this._getOption('applyChangesMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('applyChangesMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"enabled\", {\r\n        get: function () {\r\n            return this._getOption('enabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('enabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"height\", {\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"layout\", {\r\n        get: function () {\r\n            return this._getOption('layout');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('layout', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"searchTimeout\", {\r\n        get: function () {\r\n            return this._getOption('searchTimeout');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchTimeout', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"texts\", {\r\n        get: function () {\r\n            return this._getOption('texts');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('texts', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"title\", {\r\n        get: function () {\r\n            return this._getOption('title');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('title', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"width\", {\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldChooserComponent.prototype, \"_optionPath\", {\r\n        get: function () {\r\n            return 'fieldChooser';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxoFieldChooserComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dxo-field-chooser',\r\n                    template: '',\r\n                    styles: [''],\r\n                    providers: [nested_option_1.NestedOptionHost]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxoFieldChooserComponent.ctorParameters = function () { return [\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.SkipSelf }, { type: core_1.Host },] },\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.Host },] },\r\n    ]; };\r\n    DxoFieldChooserComponent.propDecorators = {\r\n        \"allowSearch\": [{ type: core_1.Input },],\r\n        \"applyChangesMode\": [{ type: core_1.Input },],\r\n        \"enabled\": [{ type: core_1.Input },],\r\n        \"height\": [{ type: core_1.Input },],\r\n        \"layout\": [{ type: core_1.Input },],\r\n        \"searchTimeout\": [{ type: core_1.Input },],\r\n        \"texts\": [{ type: core_1.Input },],\r\n        \"title\": [{ type: core_1.Input },],\r\n        \"width\": [{ type: core_1.Input },],\r\n    };\r\n    return DxoFieldChooserComponent;\r\n}(nested_option_2.NestedOption));\r\nexports.DxoFieldChooserComponent = DxoFieldChooserComponent;\r\nvar DxoFieldChooserModule = (function () {\r\n    function DxoFieldChooserModule() {\r\n    }\r\n    DxoFieldChooserModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    declarations: [\r\n                        DxoFieldChooserComponent\r\n                    ],\r\n                    exports: [\r\n                        DxoFieldChooserComponent\r\n                    ],\r\n                },] },\r\n    ];\r\n    return DxoFieldChooserModule;\r\n}());\r\nexports.DxoFieldChooserModule = DxoFieldChooserModule;\r\n//# sourceMappingURL=field-chooser.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar nested_option_1 = require(\"../../core/nested-option\");\r\nvar nested_option_2 = require(\"../../core/nested-option\");\r\nvar DxoFieldPanelComponent = (function (_super) {\r\n    __extends(DxoFieldPanelComponent, _super);\r\n    function DxoFieldPanelComponent(parentOptionHost, optionHost) {\r\n        var _this = _super.call(this) || this;\r\n        parentOptionHost.setNestedOption(_this);\r\n        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"allowFieldDragging\", {\r\n        get: function () {\r\n            return this._getOption('allowFieldDragging');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowFieldDragging', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"showColumnFields\", {\r\n        get: function () {\r\n            return this._getOption('showColumnFields');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showColumnFields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"showDataFields\", {\r\n        get: function () {\r\n            return this._getOption('showDataFields');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showDataFields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"showFilterFields\", {\r\n        get: function () {\r\n            return this._getOption('showFilterFields');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showFilterFields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"showRowFields\", {\r\n        get: function () {\r\n            return this._getOption('showRowFields');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showRowFields', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"texts\", {\r\n        get: function () {\r\n            return this._getOption('texts');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('texts', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"visible\", {\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoFieldPanelComponent.prototype, \"_optionPath\", {\r\n        get: function () {\r\n            return 'fieldPanel';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxoFieldPanelComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dxo-field-panel',\r\n                    template: '',\r\n                    styles: [''],\r\n                    providers: [nested_option_1.NestedOptionHost]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxoFieldPanelComponent.ctorParameters = function () { return [\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.SkipSelf }, { type: core_1.Host },] },\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.Host },] },\r\n    ]; };\r\n    DxoFieldPanelComponent.propDecorators = {\r\n        \"allowFieldDragging\": [{ type: core_1.Input },],\r\n        \"showColumnFields\": [{ type: core_1.Input },],\r\n        \"showDataFields\": [{ type: core_1.Input },],\r\n        \"showFilterFields\": [{ type: core_1.Input },],\r\n        \"showRowFields\": [{ type: core_1.Input },],\r\n        \"texts\": [{ type: core_1.Input },],\r\n        \"visible\": [{ type: core_1.Input },],\r\n    };\r\n    return DxoFieldPanelComponent;\r\n}(nested_option_2.NestedOption));\r\nexports.DxoFieldPanelComponent = DxoFieldPanelComponent;\r\nvar DxoFieldPanelModule = (function () {\r\n    function DxoFieldPanelModule() {\r\n    }\r\n    DxoFieldPanelModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    declarations: [\r\n                        DxoFieldPanelComponent\r\n                    ],\r\n                    exports: [\r\n                        DxoFieldPanelComponent\r\n                    ],\r\n                },] },\r\n    ];\r\n    return DxoFieldPanelModule;\r\n}());\r\nexports.DxoFieldPanelModule = DxoFieldPanelModule;\r\n//# sourceMappingURL=field-panel.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar nested_option_1 = require(\"../../core/nested-option\");\r\nvar nested_option_2 = require(\"../../core/nested-option\");\r\nvar DxoStoreComponent = (function (_super) {\r\n    __extends(DxoStoreComponent, _super);\r\n    function DxoStoreComponent(parentOptionHost, optionHost) {\r\n        var _this = _super.call(this) || this;\r\n        parentOptionHost.setNestedOption(_this);\r\n        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxoStoreComponent.prototype, \"type\", {\r\n        get: function () {\r\n            return this._getOption('type');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('type', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxoStoreComponent.prototype, \"_optionPath\", {\r\n        get: function () {\r\n            return 'store';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxoStoreComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dxo-store',\r\n                    template: '',\r\n                    styles: [''],\r\n                    providers: [nested_option_1.NestedOptionHost]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxoStoreComponent.ctorParameters = function () { return [\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.SkipSelf }, { type: core_1.Host },] },\r\n        { type: nested_option_1.NestedOptionHost, decorators: [{ type: core_1.Host },] },\r\n    ]; };\r\n    DxoStoreComponent.propDecorators = {\r\n        \"type\": [{ type: core_1.Input },],\r\n    };\r\n    return DxoStoreComponent;\r\n}(nested_option_2.NestedOption));\r\nexports.DxoStoreComponent = DxoStoreComponent;\r\nvar DxoStoreModule = (function () {\r\n    function DxoStoreModule() {\r\n    }\r\n    DxoStoreModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    declarations: [\r\n                        DxoStoreComponent\r\n                    ],\r\n                    exports: [\r\n                        DxoStoreComponent\r\n                    ],\r\n                },] },\r\n    ];\r\n    return DxoStoreModule;\r\n}());\r\nexports.DxoStoreModule = DxoStoreModule;\r\n//# sourceMappingURL=store.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar platform_browser_1 = require(\"@angular/platform-browser\");\r\nvar platform_browser_2 = require(\"@angular/platform-browser\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar pivot_grid_1 = require(\"devextreme/ui/pivot_grid\");\r\nvar component_1 = require(\"../core/component\");\r\nvar template_host_1 = require(\"../core/template-host\");\r\nvar integration_1 = require(\"../core/integration\");\r\nvar template_1 = require(\"../core/template\");\r\nvar nested_option_1 = require(\"../core/nested-option\");\r\nvar watcher_helper_1 = require(\"../core/watcher-helper\");\r\nvar iterable_differ_helper_1 = require(\"../core/iterable-differ-helper\");\r\nvar data_source_1 = require(\"./nested/data-source\");\r\nvar field_dxi_1 = require(\"./nested/field-dxi\");\r\nvar format_1 = require(\"./nested/format\");\r\nvar header_filter_1 = require(\"./nested/header-filter\");\r\nvar store_1 = require(\"./nested/store\");\r\nvar export_1 = require(\"./nested/export\");\r\nvar field_chooser_1 = require(\"./nested/field-chooser\");\r\nvar texts_1 = require(\"./nested/texts\");\r\nvar field_panel_1 = require(\"./nested/field-panel\");\r\nvar load_panel_1 = require(\"./nested/load-panel\");\r\nvar scrolling_1 = require(\"./nested/scrolling\");\r\nvar state_storing_1 = require(\"./nested/state-storing\");\r\n/**\r\n * The PivotGrid is a widget that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.\r\n */\r\nvar DxPivotGridComponent = (function (_super) {\r\n    __extends(DxPivotGridComponent, _super);\r\n    function DxPivotGridComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'cellClick', emit: 'onCellClick' },\r\n            { subscribe: 'cellPrepared', emit: 'onCellPrepared' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'allowExpandAllChange' },\r\n            { emit: 'allowFilteringChange' },\r\n            { emit: 'allowSortingChange' },\r\n            { emit: 'allowSortingBySummaryChange' },\r\n            { emit: 'dataFieldAreaChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'fieldChooserChange' },\r\n            { emit: 'fieldPanelChange' },\r\n            { emit: 'headerFilterChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hideEmptySummaryCellsChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'loadPanelChange' },\r\n            { emit: 'rowHeaderLayoutChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollingChange' },\r\n            { emit: 'showBordersChange' },\r\n            { emit: 'showColumnGrandTotalsChange' },\r\n            { emit: 'showColumnTotalsChange' },\r\n            { emit: 'showRowGrandTotalsChange' },\r\n            { emit: 'showRowTotalsChange' },\r\n            { emit: 'showTotalsPriorChange' },\r\n            { emit: 'stateStoringChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'textsChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'wordWrapEnabledChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"allowExpandAll\", {\r\n        get: /**\r\n             * Allows an end-user to expand/collapse all header items within a header level.\r\n             */\r\n        function () {\r\n            return this._getOption('allowExpandAll');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowExpandAll', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"allowFiltering\", {\r\n        get: /**\r\n             * Allows a user to filter fields by selecting or deselecting values in the popup menu.\r\n             */\r\n        function () {\r\n            return this._getOption('allowFiltering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowFiltering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"allowSorting\", {\r\n        get: /**\r\n             * Allows an end-user to change sorting options.\r\n             */\r\n        function () {\r\n            return this._getOption('allowSorting');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowSorting', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"allowSortingBySummary\", {\r\n        get: /**\r\n             * Allows an end-user to sort columns by summary values.\r\n             */\r\n        function () {\r\n            return this._getOption('allowSortingBySummary');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowSortingBySummary', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"dataFieldArea\", {\r\n        get: /**\r\n             * Specifies the area to which data field headers must belong.\r\n             */\r\n        function () {\r\n            return this._getOption('dataFieldArea');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataFieldArea', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"dataSource\", {\r\n        get: /**\r\n             * Specifies a data source for the pivot grid.\r\n             */\r\n        function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"disabled\", {\r\n        get: /**\r\n             * Specifies whether the widget responds to user interaction.\r\n             */\r\n        function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"elementAttr\", {\r\n        get: /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n        function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"export\", {\r\n        get: /**\r\n             * Configures client-side exporting.\r\n             */\r\n        function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"fieldChooser\", {\r\n        get: /**\r\n             * The Field Chooser configuration options.\r\n             */\r\n        function () {\r\n            return this._getOption('fieldChooser');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('fieldChooser', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"fieldPanel\", {\r\n        get: /**\r\n             * Configures the field panel.\r\n             */\r\n        function () {\r\n            return this._getOption('fieldPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('fieldPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"headerFilter\", {\r\n        get: /**\r\n             * Configures the header filter feature.\r\n             */\r\n        function () {\r\n            return this._getOption('headerFilter');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('headerFilter', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"height\", {\r\n        get: /**\r\n             * Specifies the widget's height.\r\n             */\r\n        function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"hideEmptySummaryCells\", {\r\n        get: /**\r\n             * Specifies whether or not to hide rows and columns with no data.\r\n             */\r\n        function () {\r\n            return this._getOption('hideEmptySummaryCells');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hideEmptySummaryCells', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"hint\", {\r\n        get: /**\r\n             * Specifies text for a hint that appears when a user pauses on the widget.\r\n             */\r\n        function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"loadPanel\", {\r\n        get: /**\r\n             * Specifies options configuring the load panel.\r\n             */\r\n        function () {\r\n            return this._getOption('loadPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"rowHeaderLayout\", {\r\n        get: /**\r\n             * Specifies the layout of items in the row header.\r\n             */\r\n        function () {\r\n            return this._getOption('rowHeaderLayout');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rowHeaderLayout', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"rtlEnabled\", {\r\n        get: /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n        function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"scrolling\", {\r\n        get: /**\r\n             * A configuration object specifying scrolling options.\r\n             */\r\n        function () {\r\n            return this._getOption('scrolling');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrolling', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"showBorders\", {\r\n        get: /**\r\n             * Specifies whether the outer borders of the grid are visible or not.\r\n             */\r\n        function () {\r\n            return this._getOption('showBorders');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showBorders', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"showColumnGrandTotals\", {\r\n        get: /**\r\n             * Specifies whether to display the Grand Total column.\r\n             */\r\n        function () {\r\n            return this._getOption('showColumnGrandTotals');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showColumnGrandTotals', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"showColumnTotals\", {\r\n        get: /**\r\n             * Specifies whether to display the Total columns.\r\n             */\r\n        function () {\r\n            return this._getOption('showColumnTotals');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showColumnTotals', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"showRowGrandTotals\", {\r\n        get: /**\r\n             * Specifies whether to display the Grand Total row.\r\n             */\r\n        function () {\r\n            return this._getOption('showRowGrandTotals');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showRowGrandTotals', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"showRowTotals\", {\r\n        get: /**\r\n             * Specifies whether to display the Total rows. Applies only if rowHeaderLayout is \"standard\".\r\n             */\r\n        function () {\r\n            return this._getOption('showRowTotals');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showRowTotals', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"showTotalsPrior\", {\r\n        get: /**\r\n             * Specifies where to show the total rows or columns. Applies only if rowHeaderLayout is \"standard\".\r\n             */\r\n        function () {\r\n            return this._getOption('showTotalsPrior');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showTotalsPrior', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"stateStoring\", {\r\n        get: /**\r\n             * A configuration object specifying options related to state storing.\r\n             */\r\n        function () {\r\n            return this._getOption('stateStoring');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('stateStoring', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"tabIndex\", {\r\n        get: /**\r\n             * Specifies the number of the element when the Tab key is used for navigating.\r\n             */\r\n        function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"texts\", {\r\n        get: /**\r\n             * Strings that can be changed or localized in the PivotGrid widget.\r\n             */\r\n        function () {\r\n            return this._getOption('texts');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('texts', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"visible\", {\r\n        get: /**\r\n             * Specifies whether the widget is visible.\r\n             */\r\n        function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"width\", {\r\n        get: /**\r\n             * Specifies the widget's width.\r\n             */\r\n        function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxPivotGridComponent.prototype, \"wordWrapEnabled\", {\r\n        get: /**\r\n             * Specifies whether long text in header items should be wrapped.\r\n             */\r\n        function () {\r\n            return this._getOption('wordWrapEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('wordWrapEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxPivotGridComponent.prototype._createInstance = function (element, options) {\r\n        return new pivot_grid_1.default(element, options);\r\n    };\r\n    DxPivotGridComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxPivotGridComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('dataSource', changes);\r\n    };\r\n    DxPivotGridComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxPivotGridComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('dataSource');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxPivotGridComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxPivotGridComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dx-pivot-grid',\r\n                    template: '',\r\n                    providers: [\r\n                        template_host_1.DxTemplateHost,\r\n                        watcher_helper_1.WatcherHelper,\r\n                        nested_option_1.NestedOptionHost,\r\n                        iterable_differ_helper_1.IterableDifferHelper\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxPivotGridComponent.ctorParameters = function () { return [\r\n        { type: core_1.ElementRef, },\r\n        { type: core_1.NgZone, },\r\n        { type: template_host_1.DxTemplateHost, },\r\n        { type: watcher_helper_1.WatcherHelper, },\r\n        { type: iterable_differ_helper_1.IterableDifferHelper, },\r\n        { type: nested_option_1.NestedOptionHost, },\r\n        { type: platform_browser_2.TransferState, },\r\n        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PLATFORM_ID,] },] },\r\n    ]; };\r\n    DxPivotGridComponent.propDecorators = {\r\n        \"allowExpandAll\": [{ type: core_1.Input },],\r\n        \"allowFiltering\": [{ type: core_1.Input },],\r\n        \"allowSorting\": [{ type: core_1.Input },],\r\n        \"allowSortingBySummary\": [{ type: core_1.Input },],\r\n        \"dataFieldArea\": [{ type: core_1.Input },],\r\n        \"dataSource\": [{ type: core_1.Input },],\r\n        \"disabled\": [{ type: core_1.Input },],\r\n        \"elementAttr\": [{ type: core_1.Input },],\r\n        \"export\": [{ type: core_1.Input },],\r\n        \"fieldChooser\": [{ type: core_1.Input },],\r\n        \"fieldPanel\": [{ type: core_1.Input },],\r\n        \"headerFilter\": [{ type: core_1.Input },],\r\n        \"height\": [{ type: core_1.Input },],\r\n        \"hideEmptySummaryCells\": [{ type: core_1.Input },],\r\n        \"hint\": [{ type: core_1.Input },],\r\n        \"loadPanel\": [{ type: core_1.Input },],\r\n        \"rowHeaderLayout\": [{ type: core_1.Input },],\r\n        \"rtlEnabled\": [{ type: core_1.Input },],\r\n        \"scrolling\": [{ type: core_1.Input },],\r\n        \"showBorders\": [{ type: core_1.Input },],\r\n        \"showColumnGrandTotals\": [{ type: core_1.Input },],\r\n        \"showColumnTotals\": [{ type: core_1.Input },],\r\n        \"showRowGrandTotals\": [{ type: core_1.Input },],\r\n        \"showRowTotals\": [{ type: core_1.Input },],\r\n        \"showTotalsPrior\": [{ type: core_1.Input },],\r\n        \"stateStoring\": [{ type: core_1.Input },],\r\n        \"tabIndex\": [{ type: core_1.Input },],\r\n        \"texts\": [{ type: core_1.Input },],\r\n        \"visible\": [{ type: core_1.Input },],\r\n        \"width\": [{ type: core_1.Input },],\r\n        \"wordWrapEnabled\": [{ type: core_1.Input },],\r\n        \"onCellClick\": [{ type: core_1.Output },],\r\n        \"onCellPrepared\": [{ type: core_1.Output },],\r\n        \"onContentReady\": [{ type: core_1.Output },],\r\n        \"onContextMenuPreparing\": [{ type: core_1.Output },],\r\n        \"onDisposing\": [{ type: core_1.Output },],\r\n        \"onExported\": [{ type: core_1.Output },],\r\n        \"onExporting\": [{ type: core_1.Output },],\r\n        \"onFileSaving\": [{ type: core_1.Output },],\r\n        \"onInitialized\": [{ type: core_1.Output },],\r\n        \"onOptionChanged\": [{ type: core_1.Output },],\r\n        \"allowExpandAllChange\": [{ type: core_1.Output },],\r\n        \"allowFilteringChange\": [{ type: core_1.Output },],\r\n        \"allowSortingChange\": [{ type: core_1.Output },],\r\n        \"allowSortingBySummaryChange\": [{ type: core_1.Output },],\r\n        \"dataFieldAreaChange\": [{ type: core_1.Output },],\r\n        \"dataSourceChange\": [{ type: core_1.Output },],\r\n        \"disabledChange\": [{ type: core_1.Output },],\r\n        \"elementAttrChange\": [{ type: core_1.Output },],\r\n        \"exportChange\": [{ type: core_1.Output },],\r\n        \"fieldChooserChange\": [{ type: core_1.Output },],\r\n        \"fieldPanelChange\": [{ type: core_1.Output },],\r\n        \"headerFilterChange\": [{ type: core_1.Output },],\r\n        \"heightChange\": [{ type: core_1.Output },],\r\n        \"hideEmptySummaryCellsChange\": [{ type: core_1.Output },],\r\n        \"hintChange\": [{ type: core_1.Output },],\r\n        \"loadPanelChange\": [{ type: core_1.Output },],\r\n        \"rowHeaderLayoutChange\": [{ type: core_1.Output },],\r\n        \"rtlEnabledChange\": [{ type: core_1.Output },],\r\n        \"scrollingChange\": [{ type: core_1.Output },],\r\n        \"showBordersChange\": [{ type: core_1.Output },],\r\n        \"showColumnGrandTotalsChange\": [{ type: core_1.Output },],\r\n        \"showColumnTotalsChange\": [{ type: core_1.Output },],\r\n        \"showRowGrandTotalsChange\": [{ type: core_1.Output },],\r\n        \"showRowTotalsChange\": [{ type: core_1.Output },],\r\n        \"showTotalsPriorChange\": [{ type: core_1.Output },],\r\n        \"stateStoringChange\": [{ type: core_1.Output },],\r\n        \"tabIndexChange\": [{ type: core_1.Output },],\r\n        \"textsChange\": [{ type: core_1.Output },],\r\n        \"visibleChange\": [{ type: core_1.Output },],\r\n        \"widthChange\": [{ type: core_1.Output },],\r\n        \"wordWrapEnabledChange\": [{ type: core_1.Output },],\r\n    };\r\n    return DxPivotGridComponent;\r\n}(component_1.DxComponent));\r\nexports.DxPivotGridComponent = DxPivotGridComponent;\r\nvar DxPivotGridModule = (function () {\r\n    function DxPivotGridModule() {\r\n    }\r\n    DxPivotGridModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    imports: [\r\n                        data_source_1.DxoDataSourceModule,\r\n                        field_dxi_1.DxiFieldModule,\r\n                        format_1.DxoFormatModule,\r\n                        header_filter_1.DxoHeaderFilterModule,\r\n                        store_1.DxoStoreModule,\r\n                        export_1.DxoExportModule,\r\n                        field_chooser_1.DxoFieldChooserModule,\r\n                        texts_1.DxoTextsModule,\r\n                        field_panel_1.DxoFieldPanelModule,\r\n                        load_panel_1.DxoLoadPanelModule,\r\n                        scrolling_1.DxoScrollingModule,\r\n                        state_storing_1.DxoStateStoringModule,\r\n                        integration_1.DxIntegrationModule,\r\n                        template_1.DxTemplateModule,\r\n                        platform_browser_1.BrowserTransferStateModule\r\n                    ],\r\n                    declarations: [\r\n                        DxPivotGridComponent\r\n                    ],\r\n                    exports: [\r\n                        DxPivotGridComponent,\r\n                        data_source_1.DxoDataSourceModule,\r\n                        field_dxi_1.DxiFieldModule,\r\n                        format_1.DxoFormatModule,\r\n                        header_filter_1.DxoHeaderFilterModule,\r\n                        store_1.DxoStoreModule,\r\n                        export_1.DxoExportModule,\r\n                        field_chooser_1.DxoFieldChooserModule,\r\n                        texts_1.DxoTextsModule,\r\n                        field_panel_1.DxoFieldPanelModule,\r\n                        load_panel_1.DxoLoadPanelModule,\r\n                        scrolling_1.DxoScrollingModule,\r\n                        state_storing_1.DxoStateStoringModule,\r\n                        template_1.DxTemplateModule\r\n                    ]\r\n                },] },\r\n    ];\r\n    return DxPivotGridModule;\r\n}());\r\nexports.DxPivotGridModule = DxPivotGridModule;\r\n//# sourceMappingURL=pivot-grid.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*!\r\n * devextreme-angular\r\n * Version: 18.2.3\r\n * Build date: Thu Nov 08 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar platform_browser_1 = require(\"@angular/platform-browser\");\r\nvar platform_browser_2 = require(\"@angular/platform-browser\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar text_box_1 = require(\"devextreme/ui/text_box\");\r\nvar validator_1 = require(\"./validator\");\r\nvar forms_1 = require(\"@angular/forms\");\r\nvar component_1 = require(\"../core/component\");\r\nvar template_host_1 = require(\"../core/template-host\");\r\nvar integration_1 = require(\"../core/integration\");\r\nvar template_1 = require(\"../core/template\");\r\nvar nested_option_1 = require(\"../core/nested-option\");\r\nvar watcher_helper_1 = require(\"../core/watcher-helper\");\r\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n    provide: forms_1.NG_VALUE_ACCESSOR,\r\n    useExisting: core_1.forwardRef(function () { return DxTextBoxComponent; }),\r\n    multi: true\r\n};\r\n/**\r\n * The TextBox is a widget that enables a user to enter and edit a single line of text.\r\n */\r\nvar DxTextBoxComponent = (function (_super) {\r\n    __extends(DxTextBoxComponent, _super);\r\n    function DxTextBoxComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this.touched = function (_) { };\r\n        _this._createEventEmitters([\r\n            { subscribe: 'change', emit: 'onChange' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'copy', emit: 'onCopy' },\r\n            { subscribe: 'cut', emit: 'onCut' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'enterKey', emit: 'onEnterKey' },\r\n            { subscribe: 'focusIn', emit: 'onFocusIn' },\r\n            { subscribe: 'focusOut', emit: 'onFocusOut' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'input', emit: 'onInput' },\r\n            { subscribe: 'keyDown', emit: 'onKeyDown' },\r\n            { subscribe: 'keyPress', emit: 'onKeyPress' },\r\n            { subscribe: 'keyUp', emit: 'onKeyUp' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'paste', emit: 'onPaste' },\r\n            { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'inputAttrChange' },\r\n            { emit: 'isValidChange' },\r\n            { emit: 'maskChange' },\r\n            { emit: 'maskCharChange' },\r\n            { emit: 'maskInvalidMessageChange' },\r\n            { emit: 'maskRulesChange' },\r\n            { emit: 'maxLengthChange' },\r\n            { emit: 'modeChange' },\r\n            { emit: 'nameChange' },\r\n            { emit: 'placeholderChange' },\r\n            { emit: 'readOnlyChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'showClearButtonChange' },\r\n            { emit: 'showMaskModeChange' },\r\n            { emit: 'spellcheckChange' },\r\n            { emit: 'stylingModeChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'textChange' },\r\n            { emit: 'useMaskedValueChange' },\r\n            { emit: 'validationErrorChange' },\r\n            { emit: 'validationMessageModeChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'valueChangeEventChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'onBlur' }\r\n        ]);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"accessKey\", {\r\n        get: /**\r\n             * Specifies the shortcut key that sets focus on the widget.\r\n             */\r\n        function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"activeStateEnabled\", {\r\n        get: /**\r\n             * Specifies whether or not the widget changes its state when interacting with a user.\r\n             */\r\n        function () {\r\n            return this._getOption('activeStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('activeStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"disabled\", {\r\n        get: /**\r\n             * Specifies whether the widget responds to user interaction.\r\n             */\r\n        function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"elementAttr\", {\r\n        get: /**\r\n             * Specifies the attributes to be attached to the widget's root element.\r\n             */\r\n        function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"focusStateEnabled\", {\r\n        get: /**\r\n             * Specifies whether the widget can be focused using keyboard navigation.\r\n             */\r\n        function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"height\", {\r\n        get: /**\r\n             * Specifies the widget's height.\r\n             */\r\n        function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"hint\", {\r\n        get: /**\r\n             * Specifies text for a hint that appears when a user pauses on the widget.\r\n             */\r\n        function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"hoverStateEnabled\", {\r\n        get: /**\r\n             * Specifies whether the widget changes its state when a user pauses on it.\r\n             */\r\n        function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"inputAttr\", {\r\n        get: /**\r\n             * Specifies the attributes to be passed on to the underlying HTML element.\r\n             */\r\n        function () {\r\n            return this._getOption('inputAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('inputAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"isValid\", {\r\n        get: /**\r\n             * Specifies whether the editor's value is valid.\r\n             */\r\n        function () {\r\n            return this._getOption('isValid');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('isValid', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"mask\", {\r\n        get: /**\r\n             * The editor mask that specifies the format of the entered string.\r\n             */\r\n        function () {\r\n            return this._getOption('mask');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('mask', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"maskChar\", {\r\n        get: /**\r\n             * Specifies a mask placeholder character.\r\n             */\r\n        function () {\r\n            return this._getOption('maskChar');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maskChar', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"maskInvalidMessage\", {\r\n        get: /**\r\n             * A message displayed when the entered text does not match the specified pattern.\r\n             */\r\n        function () {\r\n            return this._getOption('maskInvalidMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maskInvalidMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"maskRules\", {\r\n        get: /**\r\n             * Specifies custom mask rules.\r\n             */\r\n        function () {\r\n            return this._getOption('maskRules');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maskRules', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"maxLength\", {\r\n        get: /**\r\n             * Specifies the maximum number of characters you can enter into the textbox.\r\n             */\r\n        function () {\r\n            return this._getOption('maxLength');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxLength', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"mode\", {\r\n        get: /**\r\n             * The \"mode\" attribute value of the actual HTML input element representing the text box.\r\n             */\r\n        function () {\r\n            return this._getOption('mode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('mode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"name\", {\r\n        get: /**\r\n             * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n             */\r\n        function () {\r\n            return this._getOption('name');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('name', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"placeholder\", {\r\n        get: /**\r\n             * The text displayed by the widget when the widget value is empty.\r\n             */\r\n        function () {\r\n            return this._getOption('placeholder');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('placeholder', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"readOnly\", {\r\n        get: /**\r\n             * A Boolean value specifying whether or not the widget is read-only.\r\n             */\r\n        function () {\r\n            return this._getOption('readOnly');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('readOnly', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"rtlEnabled\", {\r\n        get: /**\r\n             * Switches the widget to a right-to-left representation.\r\n             */\r\n        function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"showClearButton\", {\r\n        get: /**\r\n             * Specifies whether to display the Clear button in the widget.\r\n             */\r\n        function () {\r\n            return this._getOption('showClearButton');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showClearButton', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"showMaskMode\", {\r\n        get: /**\r\n             * Specifies when the widget shows the mask. Applies only if useMaskedValue is true.\r\n             */\r\n        function () {\r\n            return this._getOption('showMaskMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showMaskMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"spellcheck\", {\r\n        get: /**\r\n             * Specifies whether or not the widget checks the inner text for spelling mistakes.\r\n             */\r\n        function () {\r\n            return this._getOption('spellcheck');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('spellcheck', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"stylingMode\", {\r\n        get: /**\r\n             * Specifies how the widget's text field is styled.\r\n             */\r\n        function () {\r\n            return this._getOption('stylingMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('stylingMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"tabIndex\", {\r\n        get: /**\r\n             * Specifies the number of the element when the Tab key is used for navigating.\r\n             */\r\n        function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"text\", {\r\n        get: /**\r\n             * The read-only option that holds the text displayed by the widget input element.\r\n             */\r\n        function () {\r\n            return this._getOption('text');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('text', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"useMaskedValue\", {\r\n        get: /**\r\n             * Specifies whether the value should contain mask characters or not.\r\n             */\r\n        function () {\r\n            return this._getOption('useMaskedValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('useMaskedValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"validationError\", {\r\n        get: /**\r\n             * Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option.\r\n             */\r\n        function () {\r\n            return this._getOption('validationError');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationError', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"validationMessageMode\", {\r\n        get: /**\r\n             * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.\r\n             */\r\n        function () {\r\n            return this._getOption('validationMessageMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationMessageMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"value\", {\r\n        get: /**\r\n             * Specifies a value the widget displays.\r\n             */\r\n        function () {\r\n            return this._getOption('value');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('value', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"valueChangeEvent\", {\r\n        get: /**\r\n             * Specifies the DOM events after which the widget's value should be updated.\r\n             */\r\n        function () {\r\n            return this._getOption('valueChangeEvent');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('valueChangeEvent', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"visible\", {\r\n        get: /**\r\n             * Specifies whether the widget is visible.\r\n             */\r\n        function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTextBoxComponent.prototype, \"width\", {\r\n        get: /**\r\n             * Specifies the widget's width.\r\n             */\r\n        function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxTextBoxComponent.prototype.change = function (_) { };\r\n    DxTextBoxComponent.prototype._createInstance = function (element, options) {\r\n        return new text_box_1.default(element, options);\r\n    };\r\n    DxTextBoxComponent.prototype.writeValue = function (value) {\r\n        this.eventHelper.lockedValueChangeEvent = true;\r\n        this.value = value;\r\n        this.eventHelper.lockedValueChangeEvent = false;\r\n    };\r\n    DxTextBoxComponent.prototype.setDisabledState = function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n    };\r\n    DxTextBoxComponent.prototype.registerOnChange = function (fn) { this.change = fn; };\r\n    DxTextBoxComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };\r\n    DxTextBoxComponent.prototype._createWidget = function (element) {\r\n        var _this = this;\r\n        _super.prototype._createWidget.call(this, element);\r\n        this.instance.on('focusOut', function (e) {\r\n            _this.eventHelper.fireNgEvent('onBlur', [e]);\r\n        });\r\n    };\r\n    DxTextBoxComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxTextBoxComponent.prototype.ngOnInit = function () {\r\n        _super.prototype.ngOnInit.call(this);\r\n        if (this.validator) {\r\n            this.validator.createInstanceOnInit = false;\r\n        }\r\n    };\r\n    DxTextBoxComponent.prototype.ngAfterViewInit = function () {\r\n        _super.prototype.ngAfterViewInit.call(this);\r\n        if (this.validator) {\r\n            this.validator.createInstance(this.element.nativeElement);\r\n        }\r\n    };\r\n    DxTextBoxComponent.decorators = [\r\n        { type: core_1.Component, args: [{\r\n                    selector: 'dx-text-box',\r\n                    template: '',\r\n                    providers: [\r\n                        template_host_1.DxTemplateHost,\r\n                        watcher_helper_1.WatcherHelper,\r\n                        CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n                        nested_option_1.NestedOptionHost\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DxTextBoxComponent.ctorParameters = function () { return [\r\n        { type: core_1.ElementRef, },\r\n        { type: core_1.NgZone, },\r\n        { type: template_host_1.DxTemplateHost, },\r\n        { type: watcher_helper_1.WatcherHelper, },\r\n        { type: nested_option_1.NestedOptionHost, },\r\n        { type: platform_browser_2.TransferState, },\r\n        { type: undefined, decorators: [{ type: core_1.Inject, args: [core_1.PLATFORM_ID,] },] },\r\n    ]; };\r\n    DxTextBoxComponent.propDecorators = {\r\n        \"validator\": [{ type: core_1.ContentChild, args: [validator_1.DxValidatorComponent,] },],\r\n        \"accessKey\": [{ type: core_1.Input },],\r\n        \"activeStateEnabled\": [{ type: core_1.Input },],\r\n        \"disabled\": [{ type: core_1.Input },],\r\n        \"elementAttr\": [{ type: core_1.Input },],\r\n        \"focusStateEnabled\": [{ type: core_1.Input },],\r\n        \"height\": [{ type: core_1.Input },],\r\n        \"hint\": [{ type: core_1.Input },],\r\n        \"hoverStateEnabled\": [{ type: core_1.Input },],\r\n        \"inputAttr\": [{ type: core_1.Input },],\r\n        \"isValid\": [{ type: core_1.Input },],\r\n        \"mask\": [{ type: core_1.Input },],\r\n        \"maskChar\": [{ type: core_1.Input },],\r\n        \"maskInvalidMessage\": [{ type: core_1.Input },],\r\n        \"maskRules\": [{ type: core_1.Input },],\r\n        \"maxLength\": [{ type: core_1.Input },],\r\n        \"mode\": [{ type: core_1.Input },],\r\n        \"name\": [{ type: core_1.Input },],\r\n        \"placeholder\": [{ type: core_1.Input },],\r\n        \"readOnly\": [{ type: core_1.Input },],\r\n        \"rtlEnabled\": [{ type: core_1.Input },],\r\n        \"showClearButton\": [{ type: core_1.Input },],\r\n        \"showMaskMode\": [{ type: core_1.Input },],\r\n        \"spellcheck\": [{ type: core_1.Input },],\r\n        \"stylingMode\": [{ type: core_1.Input },],\r\n        \"tabIndex\": [{ type: core_1.Input },],\r\n        \"text\": [{ type: core_1.Input },],\r\n        \"useMaskedValue\": [{ type: core_1.Input },],\r\n        \"validationError\": [{ type: core_1.Input },],\r\n        \"validationMessageMode\": [{ type: core_1.Input },],\r\n        \"value\": [{ type: core_1.Input },],\r\n        \"valueChangeEvent\": [{ type: core_1.Input },],\r\n        \"visible\": [{ type: core_1.Input },],\r\n        \"width\": [{ type: core_1.Input },],\r\n        \"onChange\": [{ type: core_1.Output },],\r\n        \"onContentReady\": [{ type: core_1.Output },],\r\n        \"onCopy\": [{ type: core_1.Output },],\r\n        \"onCut\": [{ type: core_1.Output },],\r\n        \"onDisposing\": [{ type: core_1.Output },],\r\n        \"onEnterKey\": [{ type: core_1.Output },],\r\n        \"onFocusIn\": [{ type: core_1.Output },],\r\n        \"onFocusOut\": [{ type: core_1.Output },],\r\n        \"onInitialized\": [{ type: core_1.Output },],\r\n        \"onInput\": [{ type: core_1.Output },],\r\n        \"onKeyDown\": [{ type: core_1.Output },],\r\n        \"onKeyPress\": [{ type: core_1.Output },],\r\n        \"onKeyUp\": [{ type: core_1.Output },],\r\n        \"onOptionChanged\": [{ type: core_1.Output },],\r\n        \"onPaste\": [{ type: core_1.Output },],\r\n        \"onValueChanged\": [{ type: core_1.Output },],\r\n        \"accessKeyChange\": [{ type: core_1.Output },],\r\n        \"activeStateEnabledChange\": [{ type: core_1.Output },],\r\n        \"disabledChange\": [{ type: core_1.Output },],\r\n        \"elementAttrChange\": [{ type: core_1.Output },],\r\n        \"focusStateEnabledChange\": [{ type: core_1.Output },],\r\n        \"heightChange\": [{ type: core_1.Output },],\r\n        \"hintChange\": [{ type: core_1.Output },],\r\n        \"hoverStateEnabledChange\": [{ type: core_1.Output },],\r\n        \"inputAttrChange\": [{ type: core_1.Output },],\r\n        \"isValidChange\": [{ type: core_1.Output },],\r\n        \"maskChange\": [{ type: core_1.Output },],\r\n        \"maskCharChange\": [{ type: core_1.Output },],\r\n        \"maskInvalidMessageChange\": [{ type: core_1.Output },],\r\n        \"maskRulesChange\": [{ type: core_1.Output },],\r\n        \"maxLengthChange\": [{ type: core_1.Output },],\r\n        \"modeChange\": [{ type: core_1.Output },],\r\n        \"nameChange\": [{ type: core_1.Output },],\r\n        \"placeholderChange\": [{ type: core_1.Output },],\r\n        \"readOnlyChange\": [{ type: core_1.Output },],\r\n        \"rtlEnabledChange\": [{ type: core_1.Output },],\r\n        \"showClearButtonChange\": [{ type: core_1.Output },],\r\n        \"showMaskModeChange\": [{ type: core_1.Output },],\r\n        \"spellcheckChange\": [{ type: core_1.Output },],\r\n        \"stylingModeChange\": [{ type: core_1.Output },],\r\n        \"tabIndexChange\": [{ type: core_1.Output },],\r\n        \"textChange\": [{ type: core_1.Output },],\r\n        \"useMaskedValueChange\": [{ type: core_1.Output },],\r\n        \"validationErrorChange\": [{ type: core_1.Output },],\r\n        \"validationMessageModeChange\": [{ type: core_1.Output },],\r\n        \"valueChange\": [{ type: core_1.Output },],\r\n        \"valueChangeEventChange\": [{ type: core_1.Output },],\r\n        \"visibleChange\": [{ type: core_1.Output },],\r\n        \"widthChange\": [{ type: core_1.Output },],\r\n        \"onBlur\": [{ type: core_1.Output },],\r\n        \"change\": [{ type: core_1.HostListener, args: ['valueChange', ['$event'],] },],\r\n        \"touched\": [{ type: core_1.HostListener, args: ['onBlur', ['$event'],] },],\r\n    };\r\n    return DxTextBoxComponent;\r\n}(component_1.DxComponent));\r\nexports.DxTextBoxComponent = DxTextBoxComponent;\r\nvar DxTextBoxModule = (function () {\r\n    function DxTextBoxModule() {\r\n    }\r\n    DxTextBoxModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    imports: [\r\n                        integration_1.DxIntegrationModule,\r\n                        template_1.DxTemplateModule,\r\n                        platform_browser_1.BrowserTransferStateModule\r\n                    ],\r\n                    declarations: [\r\n                        DxTextBoxComponent\r\n                    ],\r\n                    exports: [\r\n                        DxTextBoxComponent,\r\n                        template_1.DxTemplateModule\r\n                    ]\r\n                },] },\r\n    ];\r\n    return DxTextBoxModule;\r\n}());\r\nexports.DxTextBoxModule = DxTextBoxModule;\r\n//# sourceMappingURL=text-box.js.map","/**\r\n * DevExtreme (ui/pivot_grid.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nmodule.exports = require(\"./pivot_grid/ui.pivot_grid\");\r\nmodule.exports.default = module.exports;\r\n","/**\r\n * DevExtreme (ui/pivot_grid/data_source.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar DataSourceModule = require(\"../../data/data_source/data_source\"),\r\n    Store = require(\"../../data/abstract_store\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    typeUtils = require(\"../../core/utils/type\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    iteratorUtils = require(\"../../core/utils/iterator\"),\r\n    isDefined = typeUtils.isDefined,\r\n    each = iteratorUtils.each,\r\n    deferredUtils = require(\"../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred,\r\n    Class = require(\"../../core/class\"),\r\n    EventsMixin = require(\"../../core/events_mixin\"),\r\n    inflector = require(\"../../core/utils/inflector\"),\r\n    normalizeIndexes = require(\"../../core/utils/array\").normalizeIndexes,\r\n    localStore = require(\"./local_store\"),\r\n    RemoteStore = require(\"./remote_store\"),\r\n    xmlaStore = require(\"./xmla_store/xmla_store\"),\r\n    summaryDisplayModes = require(\"./ui.pivot_grid.summary_display_modes\"),\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    foreachTree = pivotGridUtils.foreachTree,\r\n    foreachTreeAsync = pivotGridUtils.foreachTreeAsync,\r\n    findField = pivotGridUtils.findField,\r\n    formatValue = pivotGridUtils.formatValue,\r\n    getCompareFunction = pivotGridUtils.getCompareFunction,\r\n    createPath = pivotGridUtils.createPath,\r\n    foreachDataLevel = pivotGridUtils.foreachDataLevel,\r\n    setFieldProperty = pivotGridUtils.setFieldProperty,\r\n    DESCRIPTION_NAME_BY_AREA = {\r\n        row: \"rows\",\r\n        column: \"columns\",\r\n        data: \"values\",\r\n        filter: \"filters\"\r\n    },\r\n    STATE_PROPERTIES = [\"area\", \"areaIndex\", \"sortOrder\", \"filterType\", \"filterValues\", \"sortBy\", \"sortBySummaryField\", \"sortBySummaryPath\", \"expanded\", \"summaryType\", \"summaryDisplayMode\"],\r\n    CALCULATED_PROPERTIES = [\"format\", \"selector\", \"customizeText\", \"caption\"],\r\n    ALL_CALCULATED_PROPERTIES = CALCULATED_PROPERTIES.concat([\"allowSorting\", \"allowSortingBySummary\", \"allowFiltering\", \"allowExpandAll\"]);\r\n\r\nfunction createCaption(field) {\r\n    var caption = field.dataField || field.groupName || \"\",\r\n        summaryType = (field.summaryType || \"\").toLowerCase();\r\n    if (typeUtils.isString(field.groupInterval)) {\r\n        caption += \"_\" + field.groupInterval\r\n    }\r\n    if (summaryType && \"custom\" !== summaryType) {\r\n        summaryType = summaryType.replace(/^./, summaryType[0].toUpperCase());\r\n        if (caption.length) {\r\n            summaryType = \" (\" + summaryType + \")\"\r\n        }\r\n    } else {\r\n        summaryType = \"\"\r\n    }\r\n    return inflector.titleize(caption) + summaryType\r\n}\r\n\r\nfunction resetFieldState(field, properties) {\r\n    var initialProperties = field._initProperties || {};\r\n    iteratorUtils.each(properties, function(_, prop) {\r\n        if (initialProperties.hasOwnProperty(prop)) {\r\n            field[prop] = initialProperties[prop]\r\n        }\r\n    })\r\n}\r\n\r\nfunction updateCalculatedFieldProperties(field, calculatedProperties) {\r\n    resetFieldState(field, calculatedProperties);\r\n    if (!isDefined(field.caption)) {\r\n        setFieldProperty(field, \"caption\", createCaption(field))\r\n    }\r\n}\r\n\r\nfunction areExpressionsUsed(dataFields) {\r\n    return dataFields.some(function(field) {\r\n        return field.summaryDisplayMode || field.calculateSummaryValue\r\n    })\r\n}\r\n\r\nfunction isRunningTotalUsed(dataFields) {\r\n    return dataFields.some(function(field) {\r\n        return !!field.runningTotal\r\n    })\r\n}\r\nmodule.exports = Class.inherit(function() {\r\n    var findHeaderItem = function(headerItems, path) {\r\n        if (headerItems._cacheByPath) {\r\n            return headerItems._cacheByPath[path.join(\".\")] || null\r\n        }\r\n    };\r\n    var getHeaderItemsLastIndex = function getHeaderItemsLastIndex(headerItems, grandTotalIndex) {\r\n        var i, headerItem, lastIndex = -1;\r\n        if (headerItems) {\r\n            for (i = 0; i < headerItems.length; i++) {\r\n                headerItem = headerItems[i];\r\n                lastIndex = Math.max(lastIndex, headerItem.index);\r\n                if (headerItem.children) {\r\n                    lastIndex = Math.max(lastIndex, getHeaderItemsLastIndex(headerItem.children))\r\n                } else {\r\n                    if (headerItem.collapsedChildren) {\r\n                        lastIndex = Math.max(lastIndex, getHeaderItemsLastIndex(headerItem.collapsedChildren))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isDefined(grandTotalIndex)) {\r\n            lastIndex = Math.max(lastIndex, grandTotalIndex)\r\n        }\r\n        return lastIndex\r\n    };\r\n    var updateHeaderItemChildren = function(headerItems, headerItem, children, grandTotalIndex) {\r\n        var index, applyingHeaderItemsCount = getHeaderItemsLastIndex(children) + 1,\r\n            emptyIndex = getHeaderItemsLastIndex(headerItems, grandTotalIndex) + 1,\r\n            applyingItemIndexesToCurrent = [],\r\n            d = new Deferred;\r\n        for (index = 0; index < applyingHeaderItemsCount; index++) {\r\n            applyingItemIndexesToCurrent[index] = emptyIndex++\r\n        }\r\n        headerItem.children = children;\r\n        when(foreachTreeAsync(headerItem.children, function(items) {\r\n            items[0].index = applyingItemIndexesToCurrent[items[0].index]\r\n        })).done(function() {\r\n            d.resolve(applyingItemIndexesToCurrent)\r\n        });\r\n        return d\r\n    };\r\n    var updateHeaderItems = function(headerItems, newHeaderItems) {\r\n        var d = new Deferred;\r\n        var applyingItemIndexesToCurrent = [];\r\n        when(foreachTreeAsync(headerItems, function(items) {\r\n            delete items[0].collapsedChildren\r\n        })).done(function() {\r\n            when(foreachTreeAsync(newHeaderItems, function(items) {\r\n                var headerItem = findHeaderItem(headerItems, createPath(items));\r\n                if (headerItem) {\r\n                    applyingItemIndexesToCurrent[items[0].index] = headerItem.index\r\n                }\r\n            })).done(function() {\r\n                d.resolve(applyingItemIndexesToCurrent)\r\n            })\r\n        });\r\n        return d\r\n    };\r\n    var updateDataSourceCells = function(dataSource, newDataSourceCells, newRowItemIndexesToCurrent, newColumnItemIndexesToCurrent) {\r\n        var newRowIndex, newColumnIndex, newRowCells, newCell, rowIndex, columnIndex, dataSourceCells = dataSource.values;\r\n        if (newDataSourceCells) {\r\n            for (newRowIndex = 0; newRowIndex <= newDataSourceCells.length; newRowIndex++) {\r\n                newRowCells = newDataSourceCells[newRowIndex];\r\n                rowIndex = newRowItemIndexesToCurrent[newRowIndex];\r\n                if (!isDefined(rowIndex)) {\r\n                    rowIndex = dataSource.grandTotalRowIndex\r\n                }\r\n                if (newRowCells && isDefined(rowIndex)) {\r\n                    if (!dataSourceCells[rowIndex]) {\r\n                        dataSourceCells[rowIndex] = []\r\n                    }\r\n                    for (newColumnIndex = 0; newColumnIndex <= newRowCells.length; newColumnIndex++) {\r\n                        newCell = newRowCells[newColumnIndex];\r\n                        columnIndex = newColumnItemIndexesToCurrent[newColumnIndex];\r\n                        if (!isDefined(columnIndex)) {\r\n                            columnIndex = dataSource.grandTotalColumnIndex\r\n                        }\r\n                        if (isDefined(newCell) && isDefined(columnIndex)) {\r\n                            dataSourceCells[rowIndex][columnIndex] = newCell\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    function createLocalOrRemoteStore(dataSourceOptions, notifyProgress) {\r\n        var StoreConstructor = dataSourceOptions.remoteOperations ? RemoteStore : localStore.LocalStore;\r\n        return new StoreConstructor(extend(DataSourceModule.normalizeDataSourceOptions(dataSourceOptions), {\r\n            onChanged: null,\r\n            onLoadingChanged: null,\r\n            onProgressChanged: notifyProgress\r\n        }))\r\n    }\r\n\r\n    function createStore(dataSourceOptions, notifyProgress) {\r\n        var store, storeOptions;\r\n        if (typeUtils.isPlainObject(dataSourceOptions) && dataSourceOptions.load) {\r\n            store = createLocalOrRemoteStore(dataSourceOptions, notifyProgress)\r\n        } else {\r\n            if (dataSourceOptions && !dataSourceOptions.store) {\r\n                dataSourceOptions = {\r\n                    store: dataSourceOptions\r\n                }\r\n            }\r\n            storeOptions = dataSourceOptions.store;\r\n            if (\"xmla\" === storeOptions.type) {\r\n                store = new xmlaStore.XmlaStore(storeOptions)\r\n            } else {\r\n                if (typeUtils.isPlainObject(storeOptions) && storeOptions.type || storeOptions instanceof Store || Array.isArray(storeOptions)) {\r\n                    store = createLocalOrRemoteStore(dataSourceOptions, notifyProgress)\r\n                } else {\r\n                    if (storeOptions instanceof Class) {\r\n                        store = storeOptions\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return store\r\n    }\r\n\r\n    function equalFields(fields, prevFields, count) {\r\n        for (var i = 0; i < count; i++) {\r\n            if (!fields[i] || !prevFields[i] || fields[i].index !== prevFields[i].index) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    function getExpandedPaths(dataSource, loadOptions, dimensionName, prevLoadOptions) {\r\n        var result = [],\r\n            fields = loadOptions && loadOptions[dimensionName] || [],\r\n            prevFields = prevLoadOptions && prevLoadOptions[dimensionName] || [];\r\n        foreachTree(dataSource[dimensionName], function(items) {\r\n            var item = items[0],\r\n                path = createPath(items);\r\n            if (item.children && fields[path.length - 1] && !fields[path.length - 1].expanded) {\r\n                if (path.length < fields.length && (!prevLoadOptions || equalFields(fields, prevFields, path.length))) {\r\n                    result.push(path.slice())\r\n                }\r\n            }\r\n        }, true);\r\n        return result\r\n    }\r\n\r\n    function setFieldProperties(field, srcField, skipInitPropertySave, properties) {\r\n        if (srcField) {\r\n            each(properties, function(_, name) {\r\n                if (skipInitPropertySave) {\r\n                    field[name] = srcField[name]\r\n                } else {\r\n                    if ((\"summaryType\" === name || \"summaryDisplayMode\" === name) && void 0 === srcField[name]) {\r\n                        return\r\n                    }\r\n                    setFieldProperty(field, name, srcField[name])\r\n                }\r\n            })\r\n        } else {\r\n            resetFieldState(field, properties)\r\n        }\r\n        return field\r\n    }\r\n\r\n    function getFieldsState(fields, properties) {\r\n        var result = [];\r\n        each(fields, function(_, field) {\r\n            result.push(setFieldProperties({\r\n                dataField: field.dataField,\r\n                name: field.name\r\n            }, field, true, properties))\r\n        });\r\n        return result\r\n    }\r\n\r\n    function getFieldStateId(field) {\r\n        if (field.name) {\r\n            return field.name\r\n        }\r\n        return field.dataField + \"\"\r\n    }\r\n\r\n    function getFieldsById(fields, id) {\r\n        var result = [];\r\n        each(fields || [], function(_, field) {\r\n            if (getFieldStateId(field) === id) {\r\n                result.push(field)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n\r\n    function setFieldsStateCore(stateFields, fields) {\r\n        stateFields = stateFields || [];\r\n        each(fields, function(index, field) {\r\n            setFieldProperties(field, stateFields[index], false, STATE_PROPERTIES);\r\n            updateCalculatedFieldProperties(field, CALCULATED_PROPERTIES)\r\n        });\r\n        return fields\r\n    }\r\n\r\n    function setFieldsState(stateFields, fields) {\r\n        stateFields = stateFields || [];\r\n        var id, fieldsById = {};\r\n        each(fields, function(_, field) {\r\n            id = getFieldStateId(field);\r\n            if (!fieldsById[id]) {\r\n                fieldsById[id] = getFieldsById(fields, getFieldStateId(field))\r\n            }\r\n        });\r\n        each(fieldsById, function(id, fields) {\r\n            setFieldsStateCore(getFieldsById(stateFields, id), fields)\r\n        });\r\n        return fields\r\n    }\r\n\r\n    function getFieldsByGroup(fields, groupingField) {\r\n        return fields.filter(function(field) {\r\n            return field.groupName === groupingField.groupName && typeUtils.isNumeric(field.groupIndex) && false !== field.visible\r\n        }).map(function(field) {\r\n            return extend(field, {\r\n                areaIndex: groupingField.areaIndex,\r\n                area: groupingField.area,\r\n                expanded: isDefined(field.expanded) ? field.expanded : groupingField.expanded,\r\n                dataField: field.dataField || groupingField.dataField,\r\n                dataType: field.dataType || groupingField.dataType,\r\n                sortBy: field.sortBy || groupingField.sortBy,\r\n                sortOrder: field.sortOrder || groupingField.sortOrder,\r\n                sortBySummaryField: field.sortBySummaryField || groupingField.sortBySummaryField,\r\n                sortBySummaryPath: field.sortBySummaryPath || groupingField.sortBySummaryPath,\r\n                visible: field.visible || groupingField.visible,\r\n                showTotals: isDefined(field.showTotals) ? field.showTotals : groupingField.showTotals,\r\n                showGrandTotals: isDefined(field.showGrandTotals) ? field.showGrandTotals : groupingField.showGrandTotals\r\n            })\r\n        }).sort(function(a, b) {\r\n            return a.groupIndex - b.groupIndex\r\n        })\r\n    }\r\n\r\n    function sortFieldsByAreaIndex(fields) {\r\n        fields.sort(function(field1, field2) {\r\n            return field1.areaIndex - field2.areaIndex || field1.groupIndex - field2.groupIndex\r\n        })\r\n    }\r\n\r\n    function isAreaField(field, area) {\r\n        var canAddFieldInArea = \"data\" === area || false !== field.visible;\r\n        return field.area === area && !isDefined(field.groupIndex) && canAddFieldInArea\r\n    }\r\n\r\n    function getFieldId(field, retrieveFieldsOptionValue) {\r\n        var groupName = field.groupName || \"\";\r\n        return (field.dataField || groupName) + (field.groupInterval ? groupName + field.groupInterval : \"NOGROUP\") + (retrieveFieldsOptionValue ? \"\" : groupName)\r\n    }\r\n\r\n    function mergeFields(fields, storeFields, retrieveFieldsOptionValue) {\r\n        var result = [],\r\n            fieldsDictionary = {},\r\n            removedFields = {},\r\n            mergedGroups = [],\r\n            dataTypes = pivotGridUtils.getFieldsDataType(fields);\r\n        if (storeFields) {\r\n            each(storeFields, function(_, field) {\r\n                fieldsDictionary[getFieldId(field, retrieveFieldsOptionValue)] = field\r\n            });\r\n            each(fields, function(_, field) {\r\n                var mergedField, fieldKey = getFieldId(field, retrieveFieldsOptionValue),\r\n                    storeField = fieldsDictionary[fieldKey] || removedFields[fieldKey];\r\n                if (storeField) {\r\n                    if (storeField._initProperties) {\r\n                        resetFieldState(storeField, ALL_CALCULATED_PROPERTIES)\r\n                    }\r\n                    mergedField = extend({}, storeField, field, {\r\n                        _initProperties: null\r\n                    })\r\n                } else {\r\n                    fieldsDictionary[fieldKey] = mergedField = field\r\n                }\r\n                extend(mergedField, {\r\n                    dataType: dataTypes[field.dataField]\r\n                });\r\n                delete fieldsDictionary[fieldKey];\r\n                removedFields[fieldKey] = storeField;\r\n                result.push(mergedField)\r\n            });\r\n            if (retrieveFieldsOptionValue) {\r\n                each(fieldsDictionary, function(_, field) {\r\n                    result.push(field)\r\n                })\r\n            }\r\n        } else {\r\n            result = fields\r\n        }\r\n        result.push.apply(result, mergedGroups);\r\n        return result\r\n    }\r\n\r\n    function getFields(that) {\r\n        var mergedFields, result = new Deferred,\r\n            store = that._store,\r\n            storeFields = store && store.getFields(that._fields);\r\n        when(storeFields).done(function(storeFields) {\r\n            that._storeFields = storeFields;\r\n            mergedFields = mergeFields(that._fields, storeFields, that._retrieveFields);\r\n            result.resolve(mergedFields)\r\n        }).fail(result.reject);\r\n        return result\r\n    }\r\n\r\n    function getSliceIndex(items, path) {\r\n        var index = null,\r\n            pathValue = (path || []).join(\".\");\r\n        if (pathValue.length) {\r\n            foreachTree(items, function(items) {\r\n                var item = items[0],\r\n                    itemPath = createPath(items).join(\".\"),\r\n                    textPath = iteratorUtils.map(items, function(item) {\r\n                        return item.text\r\n                    }).reverse().join(\".\");\r\n                if (pathValue === itemPath || item.key && textPath === pathValue) {\r\n                    index = items[0].index;\r\n                    return false\r\n                }\r\n            })\r\n        }\r\n        return index\r\n    }\r\n\r\n    function getFieldSummaryValueSelector(field, dataSource, loadOptions, dimensionName) {\r\n        var values = dataSource.values,\r\n            sortBySummaryFieldIndex = findField(loadOptions.values, field.sortBySummaryField),\r\n            areRows = \"rows\" === dimensionName,\r\n            sortByDimension = areRows ? dataSource.columns : dataSource.rows,\r\n            grandTotalIndex = areRows ? dataSource.grandTotalRowIndex : dataSource.grandTotalColumnIndex,\r\n            sortBySummaryPath = field.sortBySummaryPath || [],\r\n            sliceIndex = sortBySummaryPath.length ? getSliceIndex(sortByDimension, sortBySummaryPath) : grandTotalIndex;\r\n        if (values && values.length && sortBySummaryFieldIndex >= 0 && isDefined(sliceIndex)) {\r\n            return function(field) {\r\n                var rowIndex = areRows ? field.index : sliceIndex,\r\n                    columnIndex = areRows ? sliceIndex : field.index,\r\n                    value = ((values[rowIndex] || [\r\n                        []\r\n                    ])[columnIndex] || [])[sortBySummaryFieldIndex];\r\n                return isDefined(value) ? value : null\r\n            }\r\n        }\r\n    }\r\n\r\n    function getMemberForSortBy(sortBy, getAscOrder) {\r\n        var member = \"text\";\r\n        if (\"none\" === sortBy) {\r\n            member = \"index\"\r\n        } else {\r\n            if (getAscOrder || \"displayText\" !== sortBy) {\r\n                member = \"value\"\r\n            }\r\n        }\r\n        return member\r\n    }\r\n\r\n    function getSortingMethod(field, dataSource, loadOptions, dimensionName, getAscOrder) {\r\n        var sortOrder = getAscOrder ? \"asc\" : field.sortOrder,\r\n            sortBy = getMemberForSortBy(field.sortBy, getAscOrder),\r\n            defaultCompare = field.sortingMethod ? function(a, b) {\r\n                return field.sortingMethod(a, b)\r\n            } : getCompareFunction(function(item) {\r\n                return item[sortBy]\r\n            }),\r\n            summaryValueSelector = !getAscOrder && getFieldSummaryValueSelector(field, dataSource, loadOptions, dimensionName),\r\n            summaryCompare = summaryValueSelector && getCompareFunction(summaryValueSelector),\r\n            sortingMethod = function(a, b) {\r\n                var result = summaryCompare && summaryCompare(a, b) || defaultCompare(a, b);\r\n                return \"desc\" === sortOrder ? -result : result\r\n            };\r\n        return sortingMethod\r\n    }\r\n\r\n    function sortDimension(dataSource, loadOptions, dimensionName, getAscOrder) {\r\n        var fields = loadOptions[dimensionName] || [],\r\n            baseIndex = loadOptions.headerName === dimensionName ? loadOptions.path.length : 0,\r\n            sortingMethodByLevel = [];\r\n        foreachDataLevel(dataSource[dimensionName], function(item, index) {\r\n            var field = fields[index] || {},\r\n                sortingMethod = sortingMethodByLevel[index] = sortingMethodByLevel[index] || getSortingMethod(field, dataSource, loadOptions, dimensionName, getAscOrder);\r\n            item.sort(sortingMethod)\r\n        }, baseIndex)\r\n    }\r\n\r\n    function sort(loadOptions, dataSource, getAscOrder) {\r\n        sortDimension(dataSource, loadOptions, \"rows\", getAscOrder);\r\n        sortDimension(dataSource, loadOptions, \"columns\", getAscOrder)\r\n    }\r\n\r\n    function formatHeaderItems(data, loadOptions, headerName) {\r\n        return foreachTreeAsync(data[headerName], function(items) {\r\n            var item = items[0];\r\n            item.text = item.text || formatValue(item.value, loadOptions[headerName][createPath(items).length - 1])\r\n        })\r\n    }\r\n\r\n    function formatHeaders(loadOptions, data) {\r\n        return when(formatHeaderItems(data, loadOptions, \"columns\"), formatHeaderItems(data, loadOptions, \"rows\"))\r\n    }\r\n\r\n    function updateCache(headerItems) {\r\n        var d = new Deferred;\r\n        var cacheByPath = {};\r\n        when(foreachTreeAsync(headerItems, function(items) {\r\n            var path = createPath(items).join(\".\");\r\n            cacheByPath[path] = items[0]\r\n        })).done(d.resolve);\r\n        headerItems._cacheByPath = cacheByPath;\r\n        return d\r\n    }\r\n\r\n    function _getAreaFields(fields, area) {\r\n        var areaFields = [];\r\n        each(fields, function() {\r\n            if (isAreaField(this, area)) {\r\n                areaFields.push(this)\r\n            }\r\n        });\r\n        return areaFields\r\n    }\r\n    return {\r\n        ctor: function(options) {\r\n            options = options || {};\r\n            var that = this,\r\n                store = createStore(options, function(progress) {\r\n                    that.fireEvent(\"progressChanged\", [progress])\r\n                });\r\n            that._store = store;\r\n            that._data = {\r\n                rows: [],\r\n                columns: [],\r\n                values: []\r\n            };\r\n            that._loadingCount = 0;\r\n            each([\"changed\", \"loadError\", \"loadingChanged\", \"progressChanged\", \"fieldsPrepared\", \"expandValueChanging\"], function(_, eventName) {\r\n                var optionName = \"on\" + eventName[0].toUpperCase() + eventName.slice(1);\r\n                if (options.hasOwnProperty(optionName)) {\r\n                    this.on(eventName, options[optionName])\r\n                }\r\n            }.bind(this));\r\n            that._retrieveFields = isDefined(options.retrieveFields) ? options.retrieveFields : true;\r\n            that._fields = options.fields || [];\r\n            that._descriptions = options.descriptions ? extend(that._createDescriptions(), options.descriptions) : void 0;\r\n            if (!store) {\r\n                extend(true, that._data, options.store || options)\r\n            }\r\n        },\r\n        getData: function() {\r\n            return this._data\r\n        },\r\n        getAreaFields: function(area, collectGroups) {\r\n            var descriptions, areaFields = [];\r\n            if (collectGroups || \"data\" === area) {\r\n                areaFields = _getAreaFields(this._fields, area);\r\n                sortFieldsByAreaIndex(areaFields)\r\n            } else {\r\n                descriptions = this._descriptions || {};\r\n                areaFields = descriptions[DESCRIPTION_NAME_BY_AREA[area]] || []\r\n            }\r\n            return areaFields\r\n        },\r\n        fields: function(_fields) {\r\n            var that = this;\r\n            if (_fields) {\r\n                that._fields = mergeFields(_fields, that._storeFields, that._retrieveFields);\r\n                that._fieldsPrepared(that._fields)\r\n            }\r\n            return that._fields\r\n        },\r\n        field: function field(id, options) {\r\n            var levels, that = this,\r\n                fields = that._fields,\r\n                field = fields && fields[typeUtils.isNumeric(id) ? id : findField(fields, id)];\r\n            if (field && options) {\r\n                each(options, function(optionName, optionValue) {\r\n                    var isInitialization = inArray(optionName, STATE_PROPERTIES) < 0;\r\n                    setFieldProperty(field, optionName, optionValue, isInitialization);\r\n                    if (\"sortOrder\" === optionName) {\r\n                        levels = field.levels || [];\r\n                        for (var i = 0; i < levels.length; i++) {\r\n                            levels[i][optionName] = optionValue\r\n                        }\r\n                    }\r\n                });\r\n                updateCalculatedFieldProperties(field, CALCULATED_PROPERTIES);\r\n                that._descriptions = that._createDescriptions(field)\r\n            }\r\n            return field\r\n        },\r\n        getFieldValues: function(index) {\r\n            var that = this,\r\n                field = this._fields && this._fields[index],\r\n                store = this.store(),\r\n                loadFields = [],\r\n                loadOptions = {\r\n                    columns: loadFields,\r\n                    rows: [],\r\n                    values: this.getAreaFields(\"data\"),\r\n                    filters: [],\r\n                    skipValues: true\r\n                },\r\n                d = new Deferred;\r\n            if (field && store) {\r\n                each(field.levels || [field], function() {\r\n                    loadFields.push(extend({}, this, {\r\n                        expanded: true,\r\n                        filterValues: null,\r\n                        sortOrder: \"asc\",\r\n                        sortBySummaryField: null\r\n                    }))\r\n                });\r\n                store.load(loadOptions).done(function(data) {\r\n                    formatHeaders(loadOptions, data);\r\n                    that._sort(loadOptions, data);\r\n                    d.resolve(data.columns)\r\n                }).fail(d)\r\n            } else {\r\n                d.reject()\r\n            }\r\n            return d\r\n        },\r\n        reload: function() {\r\n            return this.load({\r\n                reload: true\r\n            })\r\n        },\r\n        filter: function() {\r\n            var store = this._store;\r\n            return store.filter.apply(store, arguments)\r\n        },\r\n        load: function(options) {\r\n            var that = this,\r\n                d = new Deferred;\r\n            options = options || {};\r\n            that.beginLoading();\r\n            d.fail(function(e) {\r\n                that.fireEvent(\"loadError\", [e])\r\n            }).always(function() {\r\n                that.endLoading()\r\n            });\r\n\r\n            function loadTask() {\r\n                that._delayedLoadTask = void 0;\r\n                if (!that._descriptions) {\r\n                    when(getFields(that)).done(function(fields) {\r\n                        that._fieldsPrepared(fields);\r\n                        that._loadCore(options, d)\r\n                    }).fail(d.reject).fail(that._loadErrorHandler)\r\n                } else {\r\n                    that._loadCore(options, d)\r\n                }\r\n            }\r\n            if (that.store()) {\r\n                that._delayedLoadTask = commonUtils.executeAsync(loadTask)\r\n            } else {\r\n                loadTask()\r\n            }\r\n            return d\r\n        },\r\n        createDrillDownDataSource: function(params) {\r\n            return this._store.createDrillDownDataSource(this._descriptions, params)\r\n        },\r\n        _createDescriptions: function(currentField) {\r\n            var that = this,\r\n                fields = that.fields(),\r\n                descriptions = {\r\n                    rows: [],\r\n                    columns: [],\r\n                    values: [],\r\n                    filters: []\r\n                };\r\n            each([\"row\", \"column\", \"data\", \"filter\"], function(_, areaName) {\r\n                normalizeIndexes(_getAreaFields(fields, areaName), \"areaIndex\", currentField)\r\n            });\r\n            each(fields || [], function(_, field) {\r\n                var descriptionName = DESCRIPTION_NAME_BY_AREA[field.area],\r\n                    dimension = descriptions[descriptionName],\r\n                    groupName = field.groupName;\r\n                if (groupName && !typeUtils.isNumeric(field.groupIndex)) {\r\n                    field.levels = getFieldsByGroup(fields, field)\r\n                }\r\n                if (!dimension || groupName && typeUtils.isNumeric(field.groupIndex) || false === field.visible && \"data\" !== field.area && \"filter\" !== field.area) {\r\n                    return\r\n                }\r\n                if (field.levels && dimension !== descriptions.filters && dimension !== descriptions.values) {\r\n                    dimension.push.apply(dimension, field.levels);\r\n                    if (field.filterValues && field.filterValues.length) {\r\n                        descriptions.filters.push(field)\r\n                    }\r\n                } else {\r\n                    dimension.push(field)\r\n                }\r\n            });\r\n            each(descriptions, function(_, fields) {\r\n                sortFieldsByAreaIndex(fields)\r\n            });\r\n            var indices = {};\r\n            each(descriptions.values, function(_, field) {\r\n                var expression = field.calculateSummaryValue;\r\n                if (typeUtils.isFunction(expression)) {\r\n                    var summaryCell = summaryDisplayModes.createMockSummaryCell(descriptions, fields, indices);\r\n                    expression(summaryCell)\r\n                }\r\n            });\r\n            return descriptions\r\n        },\r\n        _fieldsPrepared: function(fields) {\r\n            var that = this;\r\n            that._fields = fields;\r\n            each(fields, function(index, field) {\r\n                field.index = index;\r\n                updateCalculatedFieldProperties(field, ALL_CALCULATED_PROPERTIES)\r\n            });\r\n            var currentFieldState = getFieldsState(fields, [\"caption\"]);\r\n            that.fireEvent(\"fieldsPrepared\", [fields]);\r\n            for (var i = 0; i < fields.length; i++) {\r\n                if (fields[i].caption !== currentFieldState[i].caption) {\r\n                    setFieldProperty(fields[i], \"caption\", fields[i].caption, true)\r\n                }\r\n            }\r\n            that._descriptions = that._createDescriptions()\r\n        },\r\n        isLoading: function() {\r\n            return this._loadingCount > 0\r\n        },\r\n        state: function(_state, skipLoading) {\r\n            var that = this;\r\n            if (arguments.length) {\r\n                _state = extend({\r\n                    rowExpandedPaths: [],\r\n                    columnExpandedPaths: []\r\n                }, _state);\r\n                if (!that._descriptions) {\r\n                    that.beginLoading();\r\n                    when(getFields(that)).done(function(fields) {\r\n                        that._fields = setFieldsState(_state.fields, fields);\r\n                        that._fieldsPrepared(fields);\r\n                        !skipLoading && that.load(_state)\r\n                    }).always(function() {\r\n                        that.endLoading()\r\n                    })\r\n                } else {\r\n                    that._fields = setFieldsState(_state.fields, that._fields);\r\n                    that._descriptions = that._createDescriptions();\r\n                    !skipLoading && that.load(_state)\r\n                }\r\n            } else {\r\n                return {\r\n                    fields: getFieldsState(that._fields, STATE_PROPERTIES),\r\n                    columnExpandedPaths: getExpandedPaths(that._data, that._descriptions, \"columns\"),\r\n                    rowExpandedPaths: getExpandedPaths(that._data, that._descriptions, \"rows\")\r\n                }\r\n            }\r\n        },\r\n        beginLoading: function() {\r\n            this._changeLoadingCount(1)\r\n        },\r\n        endLoading: function() {\r\n            this._changeLoadingCount(-1)\r\n        },\r\n        _changeLoadingCount: function(increment) {\r\n            var newLoading, oldLoading = this.isLoading();\r\n            this._loadingCount += increment;\r\n            newLoading = this.isLoading();\r\n            if (oldLoading ^ newLoading) {\r\n                this.fireEvent(\"loadingChanged\", [newLoading])\r\n            }\r\n        },\r\n        _loadCore: function(options, deferred) {\r\n            var that = this,\r\n                store = this._store,\r\n                descriptions = this._descriptions,\r\n                headerName = DESCRIPTION_NAME_BY_AREA[options.area];\r\n            options = options || {};\r\n            if (store) {\r\n                extend(options, descriptions);\r\n                options.columnExpandedPaths = options.columnExpandedPaths || getExpandedPaths(this._data, options, \"columns\", that._lastLoadOptions);\r\n                options.rowExpandedPaths = options.rowExpandedPaths || getExpandedPaths(this._data, options, \"rows\", that._lastLoadOptions);\r\n                if (headerName) {\r\n                    options.headerName = headerName\r\n                }\r\n                that.beginLoading();\r\n                deferred.always(function() {\r\n                    that.endLoading()\r\n                });\r\n                when(store.load(options)).done(function(data) {\r\n                    if (options.path) {\r\n                        that.applyPartialDataSource(options.area, options.path, data, deferred)\r\n                    } else {\r\n                        extend(that._data, data);\r\n                        that._lastLoadOptions = options;\r\n                        that._update(deferred)\r\n                    }\r\n                }).fail(deferred.reject)\r\n            } else {\r\n                that._update(deferred)\r\n            }\r\n        },\r\n        _sort: function(descriptions, data, getAscOrder) {\r\n            var store = this._store;\r\n            if (store) {\r\n                sort(descriptions, data, getAscOrder)\r\n            }\r\n        },\r\n        isEmpty: function() {\r\n            var dataFields = this.getAreaFields(\"data\"),\r\n                data = this.getData();\r\n            return !dataFields.length || !data.values.length\r\n        },\r\n        _update: function(deferred) {\r\n            var that = this,\r\n                descriptions = that._descriptions,\r\n                loadedData = that._data,\r\n                dataFields = descriptions.values,\r\n                expressionsUsed = areExpressionsUsed(dataFields);\r\n            when(formatHeaders(descriptions, loadedData), updateCache(loadedData.rows), updateCache(loadedData.columns)).done(function() {\r\n                if (expressionsUsed) {\r\n                    that._sort(descriptions, loadedData, expressionsUsed);\r\n                    !that.isEmpty() && summaryDisplayModes.applyDisplaySummaryMode(descriptions, loadedData)\r\n                }\r\n                that._sort(descriptions, loadedData);\r\n                !that.isEmpty() && isRunningTotalUsed(dataFields) && summaryDisplayModes.applyRunningTotal(descriptions, loadedData);\r\n                that._data = loadedData;\r\n                when(deferred).done(function() {\r\n                    that.fireEvent(\"changed\");\r\n                    if (isDefined(that._data.grandTotalRowIndex)) {\r\n                        loadedData.grandTotalRowIndex = that._data.grandTotalRowIndex\r\n                    }\r\n                    if (isDefined(that._data.grandTotalColumnIndex)) {\r\n                        loadedData.grandTotalColumnIndex = that._data.grandTotalColumnIndex\r\n                    }\r\n                });\r\n                deferred && deferred.resolve(that._data)\r\n            });\r\n            return deferred\r\n        },\r\n        store: function() {\r\n            return this._store\r\n        },\r\n        collapseHeaderItem: function(area, path) {\r\n            var that = this,\r\n                headerItems = \"column\" === area ? that._data.columns : that._data.rows,\r\n                headerItem = findHeaderItem(headerItems, path),\r\n                field = that.getAreaFields(area)[path.length - 1];\r\n            if (headerItem && headerItem.children) {\r\n                that.fireEvent(\"expandValueChanging\", [{\r\n                    area: area,\r\n                    path: path,\r\n                    expanded: false\r\n                }]);\r\n                if (field) {\r\n                    field.expanded = false\r\n                }\r\n                headerItem.collapsedChildren = headerItem.children;\r\n                delete headerItem.children;\r\n                that._update();\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        collapseAll: function(id) {\r\n            var dataChanged = false,\r\n                field = this.field(id) || {},\r\n                areaOffset = inArray(field, this.getAreaFields(field.area));\r\n            field.expanded = false;\r\n            foreachTree(this._data[field.area + \"s\"], function(items) {\r\n                var item = items[0],\r\n                    path = createPath(items);\r\n                if (item && item.children && areaOffset === path.length - 1) {\r\n                    item.collapsedChildren = item.children;\r\n                    delete item.children;\r\n                    dataChanged = true\r\n                }\r\n            }, true);\r\n            dataChanged && this._update()\r\n        },\r\n        expandAll: function(id) {\r\n            var field = this.field(id);\r\n            if (field && field.area) {\r\n                field.expanded = true;\r\n                this.load()\r\n            }\r\n        },\r\n        expandHeaderItem: function(area, path) {\r\n            var hasCache, options, that = this,\r\n                headerItems = \"column\" === area ? that._data.columns : that._data.rows,\r\n                headerItem = findHeaderItem(headerItems, path);\r\n            if (headerItem && !headerItem.children) {\r\n                hasCache = !!headerItem.collapsedChildren;\r\n                options = {\r\n                    area: area,\r\n                    path: path,\r\n                    expanded: true,\r\n                    needExpandData: !hasCache\r\n                };\r\n                that.fireEvent(\"expandValueChanging\", [options]);\r\n                if (hasCache) {\r\n                    headerItem.children = headerItem.collapsedChildren;\r\n                    delete headerItem.collapsedChildren;\r\n                    that._update()\r\n                } else {\r\n                    that.load(options)\r\n                }\r\n                return hasCache\r\n            }\r\n            return false\r\n        },\r\n        applyPartialDataSource: function(area, path, dataSource, deferred) {\r\n            var headerItem, newRowItemIndexesToCurrent, newColumnItemIndexesToCurrent, that = this,\r\n                loadedData = that._data,\r\n                headerItems = \"column\" === area ? loadedData.columns : loadedData.rows;\r\n            if (dataSource && dataSource.values) {\r\n                dataSource.rows = dataSource.rows || [];\r\n                dataSource.columns = dataSource.columns || [];\r\n                headerItem = findHeaderItem(headerItems, path);\r\n                if (headerItem) {\r\n                    if (\"column\" === area) {\r\n                        newColumnItemIndexesToCurrent = updateHeaderItemChildren(headerItems, headerItem, dataSource.columns, loadedData.grandTotalColumnIndex);\r\n                        newRowItemIndexesToCurrent = updateHeaderItems(loadedData.rows, dataSource.rows)\r\n                    } else {\r\n                        newRowItemIndexesToCurrent = updateHeaderItemChildren(headerItems, headerItem, dataSource.rows, loadedData.grandTotalRowIndex);\r\n                        newColumnItemIndexesToCurrent = updateHeaderItems(loadedData.columns, dataSource.columns)\r\n                    }\r\n                    when(newRowItemIndexesToCurrent, newColumnItemIndexesToCurrent).done(function(newRowItemIndexesToCurrent, newColumnItemIndexesToCurrent) {\r\n                        if (\"row\" === area && newRowItemIndexesToCurrent.length || \"column\" === area && newColumnItemIndexesToCurrent.length) {\r\n                            updateDataSourceCells(loadedData, dataSource.values, newRowItemIndexesToCurrent, newColumnItemIndexesToCurrent)\r\n                        }\r\n                        that._update(deferred)\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        dispose: function() {\r\n            var that = this,\r\n                delayedLoadTask = that._delayedLoadTask;\r\n            this._disposeEvents();\r\n            if (delayedLoadTask) {\r\n                delayedLoadTask.abort()\r\n            }\r\n            this._isDisposed = true\r\n        },\r\n        isDisposed: function() {\r\n            return !!this._isDisposed\r\n        }\r\n    }\r\n}()).include(EventsMixin);\r\nmodule.exports.default = module.exports;\r\n","/**\r\n * DevExtreme (ui/pivot_grid/local_store.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar deferredUtils = require(\"../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred,\r\n    dataUtils = require(\"../../data/utils\"),\r\n    dataQuery = require(\"../../data/query\"),\r\n    dateSerialization = require(\"../../core/utils/date_serialization\"),\r\n    DataSourceModule = require(\"../../data/data_source/data_source\"),\r\n    CustomStore = require(\"../../data/custom_store\"),\r\n    dataCoreUtils = require(\"../../core/utils/data\"),\r\n    Class = require(\"../../core/class\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    typeUtils = require(\"../../core/utils/type\"),\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    getFiltersByPath = pivotGridUtils.getFiltersByPath,\r\n    setFieldProperty = pivotGridUtils.setFieldProperty,\r\n    ArrayStore = require(\"../../data/array_store\");\r\nexports.LocalStore = Class.inherit(function() {\r\n    var DATE_INTERVAL_SELECTORS = {\r\n        year: function(date) {\r\n            return date && date.getFullYear()\r\n        },\r\n        quarter: function(date) {\r\n            return date && Math.floor(date.getMonth() / 3) + 1\r\n        },\r\n        month: function(date) {\r\n            return date && date.getMonth() + 1\r\n        },\r\n        day: function(date) {\r\n            return date && date.getDate()\r\n        },\r\n        dayOfWeek: function(date) {\r\n            return date && date.getDay()\r\n        }\r\n    };\r\n\r\n    function getDataSelector(dataField) {\r\n        return dataField.indexOf(\".\") !== -1 ? dataCoreUtils.compileGetter(dataField) : function(data) {\r\n            return data[dataField]\r\n        }\r\n    }\r\n\r\n    function getDateValue(dataSelector) {\r\n        return function(data) {\r\n            var value = dataSelector(data);\r\n            if (value && !(value instanceof Date)) {\r\n                value = dateSerialization.deserializeDate(value)\r\n            }\r\n            return value\r\n        }\r\n    }\r\n\r\n    function prepareFields(fields) {\r\n        each(fields || [], function(_, field) {\r\n            var fieldSelector, intervalSelector, groupInterval, dataSelector, dataField = field.dataField,\r\n                levels = field.levels;\r\n            if (!field.selector) {\r\n                if (!dataField) {\r\n                    dataSelector = function(data) {\r\n                        return data\r\n                    }\r\n                } else {\r\n                    dataSelector = getDataSelector(dataField)\r\n                }\r\n                if (levels) {\r\n                    prepareFields(levels)\r\n                }\r\n                if (\"date\" === field.dataType) {\r\n                    intervalSelector = DATE_INTERVAL_SELECTORS[field.groupInterval];\r\n                    var valueSelector = getDateValue(dataSelector);\r\n                    fieldSelector = function(data) {\r\n                        var value = valueSelector(data);\r\n                        return intervalSelector ? intervalSelector(value) : value\r\n                    }\r\n                } else {\r\n                    if (\"number\" === field.dataType) {\r\n                        groupInterval = typeUtils.isNumeric(field.groupInterval) && field.groupInterval > 0 && field.groupInterval;\r\n                        fieldSelector = function(data) {\r\n                            var value = dataSelector(data);\r\n                            if (typeUtils.isString(value)) {\r\n                                value = Number(value)\r\n                            }\r\n                            return groupInterval ? Math.floor(value / groupInterval) * groupInterval : value\r\n                        }\r\n                    } else {\r\n                        fieldSelector = dataSelector\r\n                    }\r\n                }\r\n                pivotGridUtils.setDefaultFieldValueFormatting(field);\r\n                setFieldProperty(field, \"selector\", fieldSelector)\r\n            }\r\n        })\r\n    }\r\n    var addHierarchyItem = function(value, hierarchyItems, pathHash, childrenHash) {\r\n        var hierarchyItem = childrenHash[pathHash];\r\n        if (!hierarchyItem) {\r\n            hierarchyItem = {\r\n                value: value,\r\n                index: childrenHash.length++\r\n            };\r\n            childrenHash[pathHash] = hierarchyItem;\r\n            hierarchyItems.push(hierarchyItem)\r\n        }\r\n        return hierarchyItem\r\n    };\r\n\r\n    function fillHierarchyItemIndexesCore(indexes, options, children, expandIndex, pathHash) {\r\n        var dimensionValue, hierarchyItem, dimension = options.dimensions[expandIndex],\r\n            expandedPathsHash = options.expandedPathsHash;\r\n        if (dimension) {\r\n            dimensionValue = dimension.selector(options.data);\r\n            pathHash = void 0 !== pathHash ? pathHash + \".\" + dimensionValue : dimensionValue + \"\";\r\n            hierarchyItem = addHierarchyItem(dimensionValue, children, pathHash, options.childrenHash);\r\n            indexes.push(hierarchyItem.index);\r\n            if (expandedPathsHash && expandedPathsHash[pathHash] || dimension.expanded) {\r\n                if (!hierarchyItem.children) {\r\n                    hierarchyItem.children = []\r\n                }\r\n                fillHierarchyItemIndexesCore(indexes, options, hierarchyItem.children, expandIndex + 1, pathHash)\r\n            }\r\n        }\r\n    }\r\n\r\n    function generateHierarchyItems(data, loadOptions, headers, headerName) {\r\n        var result = [0],\r\n            expandIndex = loadOptions.headerName === headerName ? loadOptions.path.length : 0,\r\n            expandedPaths = \"rows\" === headerName ? loadOptions.rowExpandedPaths : loadOptions.columnExpandedPaths,\r\n            options = {\r\n                data: data,\r\n                childrenHash: headers[headerName + \"Hash\"],\r\n                dimensions: loadOptions[headerName],\r\n                expandedPathsHash: loadOptions.headerName !== headerName && expandedPaths && expandedPaths.hash\r\n            };\r\n        fillHierarchyItemIndexesCore(result, options, headers[headerName], expandIndex);\r\n        return result\r\n    }\r\n\r\n    function generateAggregationCells(data, cells, headers, options) {\r\n        var x, y, rowIndex, columnIndex, cellSet = [];\r\n        var rowIndexes = generateHierarchyItems(data, options, headers, \"rows\");\r\n        var columnIndexes = generateHierarchyItems(data, options, headers, \"columns\");\r\n        for (y = 0; y < rowIndexes.length; y++) {\r\n            rowIndex = rowIndexes[y];\r\n            cells[rowIndex] = cells[rowIndex] || [];\r\n            for (x = 0; x < columnIndexes.length; x++) {\r\n                columnIndex = columnIndexes[x];\r\n                cellSet.push(cells[rowIndex][columnIndex] = cells[rowIndex][columnIndex] || [])\r\n            }\r\n        }\r\n        return cellSet\r\n    }\r\n\r\n    function fillHashExpandedPath(expandedPaths) {\r\n        if (expandedPaths) {\r\n            var hash = expandedPaths.hash = {};\r\n            expandedPaths.forEach(function(path) {\r\n                var pathValue = path.map(function(value) {\r\n                    return value + \"\"\r\n                }).join(\".\");\r\n                hash[pathValue] = true\r\n            })\r\n        }\r\n    }\r\n\r\n    function prepareLoadOption(options) {\r\n        options.rows = options.rows || [];\r\n        options.columns = options.columns || [];\r\n        options.filters = options.filters || [];\r\n        fillHashExpandedPath(options.columnExpandedPaths);\r\n        fillHashExpandedPath(options.rowExpandedPaths);\r\n        prepareFields(options.columns);\r\n        prepareFields(options.rows);\r\n        prepareFields(options.values);\r\n        prepareFields(options.filters)\r\n    }\r\n\r\n    function getAggregator(field) {\r\n        if (\"custom\" === field.summaryType) {\r\n            field.calculateCustomSummary = field.calculateCustomSummary || commonUtils.noop;\r\n            return {\r\n                seed: function() {\r\n                    var options = {\r\n                        summaryProcess: \"start\",\r\n                        totalValue: void 0\r\n                    };\r\n                    field.calculateCustomSummary(options);\r\n                    return options\r\n                },\r\n                step: function(options, value) {\r\n                    options.summaryProcess = \"calculate\";\r\n                    options.value = value;\r\n                    field.calculateCustomSummary(options);\r\n                    return options\r\n                },\r\n                finalize: function(options) {\r\n                    options.summaryProcess = \"finalize\";\r\n                    delete options.value;\r\n                    field.calculateCustomSummary(options);\r\n                    return options.totalValue\r\n                }\r\n            }\r\n        }\r\n        return dataUtils.aggregators[field.summaryType] || dataUtils.aggregators.count\r\n    }\r\n\r\n    function aggregationStep(measures, aggregationCells, data) {\r\n        for (var aggregatorIndex = 0; aggregatorIndex < measures.length; aggregatorIndex++) {\r\n            var cellField = measures[aggregatorIndex];\r\n            var cellValue = cellField.selector(data);\r\n            var aggregator = getAggregator(cellField),\r\n                isAggregatorSeedFunction = \"function\" === typeof aggregator.seed;\r\n            for (var cellSetIndex = 0; cellSetIndex < aggregationCells.length; cellSetIndex++) {\r\n                var cell = aggregationCells[cellSetIndex];\r\n                if (cell.length <= aggregatorIndex) {\r\n                    cell[aggregatorIndex] = isAggregatorSeedFunction ? aggregator.seed() : aggregator.seed\r\n                }\r\n                if (void 0 === cell[aggregatorIndex]) {\r\n                    cell[aggregatorIndex] = cellValue\r\n                } else {\r\n                    if (typeUtils.isDefined(cellValue)) {\r\n                        cell[aggregatorIndex] = aggregator.step(cell[aggregatorIndex], cellValue)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function aggregationFinalize(measures, cells) {\r\n        each(measures, function(aggregatorIndex, cellField) {\r\n            var aggregator = getAggregator(cellField);\r\n            if (aggregator.finalize) {\r\n                each(cells, function(_, row) {\r\n                    each(row, function(_, cell) {\r\n                        if (cell && void 0 !== cell[aggregatorIndex]) {\r\n                            cell[aggregatorIndex] = aggregator.finalize(cell[aggregatorIndex])\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    function areValuesEqual(filterValue, fieldValue) {\r\n        var valueOfFilter = filterValue && filterValue.valueOf(),\r\n            valueOfField = fieldValue && fieldValue.valueOf();\r\n        if (Array.isArray(filterValue)) {\r\n            fieldValue = fieldValue || [];\r\n            for (var i = 0; i < filterValue.length; i++) {\r\n                valueOfFilter = filterValue[i] && filterValue[i].valueOf();\r\n                valueOfField = fieldValue[i] && fieldValue[i].valueOf();\r\n                if (valueOfFilter !== valueOfField) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        } else {\r\n            return valueOfFilter === valueOfField\r\n        }\r\n    }\r\n\r\n    function getGroupValue(levels, data) {\r\n        var value = [];\r\n        each(levels, function(_, field) {\r\n            value.push(field.selector(data))\r\n        });\r\n        return value\r\n    }\r\n\r\n    function createDimensionFilters(dimension) {\r\n        var filters = [];\r\n        each(dimension, function(_, field) {\r\n            var filter, filterValues = field.filterValues || [],\r\n                groupName = field.groupName;\r\n            if (groupName && typeUtils.isNumeric(field.groupIndex)) {\r\n                return\r\n            }\r\n            filter = function(dataItem) {\r\n                var value = field.levels ? getGroupValue(field.levels, dataItem) : field.selector(dataItem),\r\n                    result = false;\r\n                for (var i = 0; i < filterValues.length; i++) {\r\n                    if (areValuesEqual(filterValues[i], value)) {\r\n                        result = true;\r\n                        break\r\n                    }\r\n                }\r\n                return \"exclude\" === field.filterType ? !result : result\r\n            };\r\n            filterValues.length && filters.push(filter)\r\n        });\r\n        return filters\r\n    }\r\n\r\n    function createFilter(options) {\r\n        var filters = createDimensionFilters(options.rows).concat(createDimensionFilters(options.columns)).concat(createDimensionFilters(options.filters)),\r\n            expandedDimensions = options[options.headerName],\r\n            path = options.path;\r\n        if (expandedDimensions) {\r\n            filters.push(function(dataItem) {\r\n                var expandValue;\r\n                for (var i = 0; i < path.length; i++) {\r\n                    expandValue = expandedDimensions[i].selector(dataItem);\r\n                    if (dataCoreUtils.toComparable(expandValue, true) !== dataCoreUtils.toComparable(path[i], true)) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            })\r\n        }\r\n        return function(dataItem) {\r\n            for (var i = 0; i < filters.length; i++) {\r\n                if (!filters[i](dataItem)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n    }\r\n\r\n    function loadCore(items, options, notifyProgress) {\r\n        var aggregationCells, filter, data, headers = {\r\n                columns: [],\r\n                rows: [],\r\n                columnsHash: {\r\n                    length: 1\r\n                },\r\n                rowsHash: {\r\n                    length: 1\r\n                }\r\n            },\r\n            values = [],\r\n            d = new Deferred,\r\n            i = 0;\r\n        filter = createFilter(options);\r\n\r\n        function processData() {\r\n            var t = new Date,\r\n                startIndex = i;\r\n            for (; i < items.length; i++) {\r\n                if (i > startIndex && i % 1e4 === 0) {\r\n                    if (new Date - t >= 300) {\r\n                        notifyProgress(i / items.length);\r\n                        setTimeout(processData, 0);\r\n                        return\r\n                    }\r\n                }\r\n                data = items[i];\r\n                if (filter(data)) {\r\n                    aggregationCells = generateAggregationCells(data, values, headers, options);\r\n                    aggregationStep(options.values, aggregationCells, data)\r\n                }\r\n            }\r\n            aggregationFinalize(options.values, values);\r\n            notifyProgress(1);\r\n            d.resolve({\r\n                rows: headers.rows,\r\n                columns: headers.columns,\r\n                values: values,\r\n                grandTotalRowIndex: 0,\r\n                grandTotalColumnIndex: 0\r\n            })\r\n        }\r\n        processData();\r\n        return d\r\n    }\r\n\r\n    function filterDataSource(dataSource, fieldSelectors) {\r\n        var filter = dataSource.filter();\r\n        if (dataSource.store() instanceof CustomStore && filter) {\r\n            filter = processFilter(filter, fieldSelectors);\r\n            return dataQuery(dataSource.items()).filter(filter).toArray()\r\n        }\r\n        return dataSource.items()\r\n    }\r\n\r\n    function loadDataSource(dataSource, fieldSelectors, reload) {\r\n        var d = new Deferred;\r\n        var customizeStoreLoadOptionsHandler = function(options) {\r\n            if (dataSource.store() instanceof ArrayStore) {\r\n                options.storeLoadOptions.filter = processFilter(options.storeLoadOptions.filter, fieldSelectors)\r\n            }\r\n        };\r\n        dataSource.on(\"customizeStoreLoadOptions\", customizeStoreLoadOptionsHandler);\r\n        if (!dataSource.isLoaded() || reload) {\r\n            var loadDeferred = reload ? dataSource.load() : dataSource.reload();\r\n            when(loadDeferred).done(function() {\r\n                loadDataSource(dataSource, fieldSelectors).done(function() {\r\n                    d.resolve(filterDataSource(dataSource, fieldSelectors))\r\n                }).fail(d.reject)\r\n            }).fail(d.reject)\r\n        } else {\r\n            d.resolve(filterDataSource(dataSource, fieldSelectors))\r\n        }\r\n        return d.always(function() {\r\n            dataSource.off(\"customizeStoreLoadOptions\", customizeStoreLoadOptionsHandler)\r\n        })\r\n    }\r\n\r\n    function fillSelectorsByFields(selectors, fields) {\r\n        fields.forEach(function(field) {\r\n            if (field.dataField && \"date\" === field.dataType) {\r\n                var valueSelector = getDateValue(getDataSelector(field.dataField));\r\n                selectors[field.dataField] = function(data) {\r\n                    return valueSelector(data)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    function getFieldSelectors(options) {\r\n        var selectors = {};\r\n        if (Array.isArray(options)) {\r\n            fillSelectorsByFields(selectors, options)\r\n        } else {\r\n            if (options) {\r\n                [\"rows\", \"columns\", \"filters\"].forEach(function(area) {\r\n                    options[area] && fillSelectorsByFields(selectors, options[area])\r\n                })\r\n            }\r\n        }\r\n        return selectors\r\n    }\r\n\r\n    function processFilter(filter, fieldSelectors) {\r\n        if (!Array.isArray(filter)) {\r\n            return filter\r\n        }\r\n        filter = filter.slice(0);\r\n        if (typeUtils.isString(filter[0]) && (filter[1] instanceof Date || filter[2] instanceof Date)) {\r\n            filter[0] = fieldSelectors[filter[0]]\r\n        }\r\n        for (var i = 0; i < filter.length; i++) {\r\n            filter[i] = processFilter(filter[i], fieldSelectors)\r\n        }\r\n        return filter\r\n    }\r\n    return {\r\n        ctor: function(options) {\r\n            this._progressChanged = options.onProgressChanged || commonUtils.noop;\r\n            this._dataSource = new DataSourceModule.DataSource(options);\r\n            this._dataSource.paginate(false)\r\n        },\r\n        getFields: function(fields) {\r\n            var that = this,\r\n                dataSource = that._dataSource,\r\n                d = new Deferred;\r\n            loadDataSource(dataSource, getFieldSelectors(fields)).done(function(data) {\r\n                d.resolve(pivotGridUtils.discoverObjectFields(data, fields))\r\n            }).fail(d.reject);\r\n            return d\r\n        },\r\n        key: function() {\r\n            return this._dataSource.key()\r\n        },\r\n        load: function(options) {\r\n            var that = this,\r\n                dataSource = that._dataSource,\r\n                d = new Deferred;\r\n            prepareLoadOption(options);\r\n            loadDataSource(dataSource, getFieldSelectors(options), options.reload).done(function(data) {\r\n                when(loadCore(data, options, that._progressChanged)).done(d.resolve)\r\n            }).fail(d.reject);\r\n            return d\r\n        },\r\n        filter: function() {\r\n            var dataSource = this._dataSource;\r\n            return dataSource.filter.apply(dataSource, arguments)\r\n        },\r\n        supportSorting: function() {\r\n            return false\r\n        },\r\n        getDrillDownItems: function(loadOptions, params) {\r\n            loadOptions = loadOptions || {};\r\n            params = params || {};\r\n            prepareLoadOption(loadOptions);\r\n            var item, drillDownItems = [],\r\n                items = this._dataSource.items(),\r\n                maxRowCount = params.maxRowCount,\r\n                customColumns = params.customColumns,\r\n                filter = createFilter(loadOptions),\r\n                pathFilter = createFilter({\r\n                    rows: getFiltersByPath(loadOptions.rows, params.rowPath),\r\n                    columns: getFiltersByPath(loadOptions.columns, params.columnPath),\r\n                    filters: []\r\n                });\r\n            for (var i = 0; i < items.length; i++) {\r\n                if (pathFilter(items[i]) && filter(items[i])) {\r\n                    if (customColumns) {\r\n                        item = {};\r\n                        for (var j = 0; j < customColumns.length; j++) {\r\n                            item[customColumns[j]] = items[i][customColumns[j]]\r\n                        }\r\n                    } else {\r\n                        item = items[i]\r\n                    }\r\n                    drillDownItems.push(item)\r\n                }\r\n                if (maxRowCount > 0 && drillDownItems.length === maxRowCount) {\r\n                    break\r\n                }\r\n            }\r\n            return drillDownItems\r\n        }\r\n    }\r\n}()).include(pivotGridUtils.storeDrillDownMixin);\r\n","/**\r\n * DevExtreme (ui/pivot_grid/remote_store.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _class = require(\"../../core/class\");\r\nvar _class2 = _interopRequireDefault(_class);\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _data_source = require(\"../../data/data_source/data_source\");\r\nvar _data_source2 = _interopRequireDefault(_data_source);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _uiPivot_grid = require(\"./ui.pivot_grid.utils\");\r\nvar _uiPivot_grid2 = _interopRequireDefault(_uiPivot_grid);\r\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction createGroupingOptions(dimensionOptions) {\r\n    var groupingOptions = [];\r\n    (0, _iterator.each)(dimensionOptions, function(index, dimensionOption) {\r\n        groupingOptions.push({\r\n            selector: dimensionOption.dataField,\r\n            groupInterval: dimensionOption.groupInterval,\r\n            isExpanded: index < dimensionOptions.length - 1\r\n        })\r\n    });\r\n    return groupingOptions\r\n}\r\n\r\nfunction getFieldFilterSelector(field) {\r\n    var selector = field.dataField,\r\n        groupInterval = field.groupInterval;\r\n    if (\"date\" === field.dataType && \"string\" === typeof groupInterval) {\r\n        if (\"quarter\" === groupInterval.toLowerCase()) {\r\n            groupInterval = \"Month\"\r\n        }\r\n        selector = selector + \".\" + _uiPivot_grid2.default.capitalizeFirstLetter(groupInterval)\r\n    }\r\n    return selector\r\n}\r\n\r\nfunction getIntervalFilterExpression(selector, numericInterval, numericValue, isExcludedFilterType) {\r\n    var startFilterValue = [selector, isExcludedFilterType ? \"<\" : \">=\", numericValue],\r\n        endFilterValue = [selector, isExcludedFilterType ? \">=\" : \"<\", numericValue + numericInterval];\r\n    return [startFilterValue, isExcludedFilterType ? \"or\" : \"and\", endFilterValue]\r\n}\r\n\r\nfunction getFilterExpressionForFilterValue(field, filterValue) {\r\n    var selector = getFieldFilterSelector(field),\r\n        isExcludedFilterType = \"exclude\" === field.filterType,\r\n        expression = [selector, isExcludedFilterType ? \"<>\" : \"=\", filterValue];\r\n    if ((0, _type.isDefined)(field.groupInterval)) {\r\n        if (\"string\" === typeof field.groupInterval && \"quarter\" === field.groupInterval.toLowerCase()) {\r\n            expression = getIntervalFilterExpression(selector, 3, 3 * (filterValue - 1) + 1, isExcludedFilterType)\r\n        } else {\r\n            if (\"number\" === typeof field.groupInterval && \"date\" !== field.dataType) {\r\n                expression = getIntervalFilterExpression(selector, field.groupInterval, filterValue, isExcludedFilterType)\r\n            }\r\n        }\r\n    }\r\n    return expression\r\n}\r\n\r\nfunction createFieldFilterExpressions(field, operation) {\r\n    var fieldFilterExpressions = [];\r\n    if (\"exclude\" === field.filterType) {\r\n        operation = operation || \"and\"\r\n    } else {\r\n        operation = operation || \"or\"\r\n    }(0, _iterator.each)(field.filterValues, function(index, filterValue) {\r\n        var currentExpression = [],\r\n            currentField = field.levels ? field.levels[index] : field;\r\n        if (Array.isArray(filterValue)) {\r\n            var parseLevelsRecursive = field.levels && field.levels.length;\r\n            if (parseLevelsRecursive) {\r\n                currentExpression = createFieldFilterExpressions({\r\n                    filterValues: filterValue,\r\n                    filterType: currentField.filterType,\r\n                    levels: field.levels\r\n                }, \"and\")\r\n            }\r\n        } else {\r\n            currentExpression = getFilterExpressionForFilterValue(currentField, filterValue)\r\n        }\r\n        if (!currentExpression.length) {\r\n            return\r\n        }\r\n        if (fieldFilterExpressions.length) {\r\n            fieldFilterExpressions.push(operation)\r\n        }\r\n        fieldFilterExpressions.push(currentExpression)\r\n    });\r\n    return fieldFilterExpressions\r\n}\r\n\r\nfunction createFilterExpressions(fields) {\r\n    var filterExpressions = [];\r\n    (0, _iterator.each)(fields, function(_, field) {\r\n        var fieldExpressions = createFieldFilterExpressions(field);\r\n        if (!fieldExpressions.length) {\r\n            return []\r\n        }\r\n        if (filterExpressions.length) {\r\n            filterExpressions.push(\"and\")\r\n        }\r\n        filterExpressions.push(fieldExpressions)\r\n    });\r\n    if (1 === filterExpressions.length) {\r\n        filterExpressions = filterExpressions[0]\r\n    }\r\n    return filterExpressions\r\n}\r\n\r\nfunction mergeFilters(filter1, filter2) {\r\n    var mergedFilter, notEmpty = function(filter) {\r\n        return filter && filter.length\r\n    };\r\n    if (notEmpty(filter1) && notEmpty(filter2)) {\r\n        mergedFilter = [filter1, \"and\", filter2]\r\n    } else {\r\n        mergedFilter = notEmpty(filter1) ? filter1 : filter2\r\n    }\r\n    return mergedFilter\r\n}\r\n\r\nfunction createLoadOptions(options, externalFilterExpr) {\r\n    var filterExpressions = createFilterExpressions(options.filters),\r\n        groupingOptions = createGroupingOptions(options.rows).concat(createGroupingOptions(options.columns)),\r\n        loadOptions = {\r\n            groupSummary: [],\r\n            totalSummary: [],\r\n            group: groupingOptions.length ? groupingOptions : void 0,\r\n            take: groupingOptions.length ? void 0 : 1\r\n        };\r\n    if (externalFilterExpr) {\r\n        filterExpressions = mergeFilters(filterExpressions, externalFilterExpr)\r\n    }\r\n    if (filterExpressions.length) {\r\n        loadOptions.filter = filterExpressions\r\n    }(0, _iterator.each)(options.values, function(_, value) {\r\n        var summaryOption = {\r\n            selector: value.dataField,\r\n            summaryType: value.summaryType || \"count\"\r\n        };\r\n        loadOptions.groupSummary.push(summaryOption);\r\n        options.includeTotalSummary && loadOptions.totalSummary.push(summaryOption)\r\n    });\r\n    return loadOptions\r\n}\r\n\r\nfunction forEachGroup(data, callback, level) {\r\n    data = data || [];\r\n    level = level || 0;\r\n    (0, _iterator.each)(data, function(_, group) {\r\n        callback(group, level);\r\n        if (group.items && group.items.length) {\r\n            forEachGroup(group.items, callback, level + 1)\r\n        }\r\n    })\r\n}\r\n\r\nfunction setValue(valuesArray, value, rowIndex, columnIndex, dataIndex) {\r\n    valuesArray[rowIndex] = valuesArray[rowIndex] || [];\r\n    valuesArray[rowIndex][columnIndex] = valuesArray[rowIndex][columnIndex] || [];\r\n    if (!(0, _type.isDefined)(valuesArray[rowIndex][columnIndex][dataIndex])) {\r\n        valuesArray[rowIndex][columnIndex][dataIndex] = value\r\n    }\r\n}\r\n\r\nfunction parseValue(value, field) {\r\n    if (field && \"number\" === field.dataType && (0, _type.isString)(value)) {\r\n        return Number(value)\r\n    }\r\n    if (field && \"date\" === field.dataType && !field.groupInterval && !(value instanceof Date)) {\r\n        return (0, _date_serialization.deserializeDate)(value)\r\n    }\r\n    return value\r\n}\r\n\r\nfunction parseResult(data, total, descriptions, result) {\r\n    var rowPath = [],\r\n        columnPath = [],\r\n        rowHash = result.rowHash,\r\n        columnHash = result.columnHash;\r\n    if (total && total.summary) {\r\n        (0, _iterator.each)(total.summary, function(index, summary) {\r\n            setValue(result.values, summary, result.grandTotalRowIndex, result.grandTotalColumnIndex, index)\r\n        })\r\n    }\r\n\r\n    function getItem(dataItem, dimensionName, path, level, field) {\r\n        var parentItem, parentItemChildren, item, parentPathValue, dimensionHash = result[dimensionName + \"Hash\"],\r\n            pathValue = path.slice(0, level + 1).join(\"/\");\r\n        if (void 0 !== dimensionHash[pathValue]) {\r\n            item = dimensionHash[pathValue]\r\n        } else {\r\n            item = {\r\n                value: parseValue(dataItem.key, field),\r\n                index: result[dimensionName + \"Index\"]++\r\n            };\r\n            parentPathValue = path.slice(0, level).join(\"/\");\r\n            if (level > 0 && void 0 !== dimensionHash[parentPathValue]) {\r\n                parentItem = dimensionHash[parentPathValue];\r\n                parentItemChildren = parentItem.children = parentItem.children || []\r\n            } else {\r\n                parentItemChildren = result[dimensionName + \"s\"]\r\n            }\r\n            parentItemChildren.push(item);\r\n            dimensionHash[pathValue] = item\r\n        }\r\n        return item\r\n    }\r\n    forEachGroup(data, function(item, level) {\r\n        var columnItem, rowItem, rowLevel = level >= descriptions.rows.length ? descriptions.rows.length : level,\r\n            columnLevel = level >= descriptions.rows.length ? level - descriptions.rows.length : 0;\r\n        if (level >= descriptions.rows.length && columnLevel >= descriptions.columns.length) {\r\n            return\r\n        }\r\n        if (level < descriptions.rows.length) {\r\n            columnPath = []\r\n        }\r\n        if (level >= descriptions.rows.length) {\r\n            columnPath[columnLevel] = item.key + \"\";\r\n            columnItem = getItem(item, \"column\", columnPath, columnLevel, descriptions.columns[columnPath.length - 1]);\r\n            rowItem = rowHash[rowPath.slice(0, rowLevel + 1).join(\"/\")]\r\n        } else {\r\n            rowPath[rowLevel] = item.key + \"\";\r\n            rowItem = getItem(item, \"row\", rowPath, rowLevel);\r\n            columnItem = columnHash[columnPath.slice(0, columnLevel + 1).join(\"/\")]\r\n        }\r\n        var currentRowIndex = rowItem && rowItem.index || result.grandTotalRowIndex,\r\n            currentColumnIndex = columnItem && columnItem.index || result.grandTotalColumnIndex;\r\n        (0, _iterator.each)(item.summary || [], function(i, summary) {\r\n            setValue(result.values, summary, currentRowIndex, currentColumnIndex, i)\r\n        })\r\n    });\r\n    return result\r\n}\r\n\r\nfunction getFiltersForDimension(fields) {\r\n    return (fields || []).filter(function(f) {\r\n        return f.filterValues && f.filterValues.length\r\n    })\r\n}\r\n\r\nfunction getExpandedIndex(options, axis) {\r\n    if (axis === options.headerName) {\r\n        return options.path.length\r\n    }\r\n    return 0\r\n}\r\n\r\nfunction getFiltersForExpandedDimension(options) {\r\n    return (0, _uiPivot_grid.getFiltersByPath)(options[options.headerName], options.path)\r\n}\r\n\r\nfunction getExpandedPathSliceFilter(options, dimensionName, level, firstCollapsedFieldIndex) {\r\n    var result = [],\r\n        startSliceIndex = level > firstCollapsedFieldIndex ? 0 : firstCollapsedFieldIndex,\r\n        fields = options.headerName !== dimensionName ? options[dimensionName].slice(startSliceIndex, level) : [],\r\n        paths = \"rows\" === dimensionName ? options.rowExpandedPaths : options.columnExpandedPaths;\r\n    (0, _iterator.each)(fields, function(index, field) {\r\n        var filterValues = [];\r\n        (0, _iterator.each)(paths, function(_, path) {\r\n            path = path.slice(startSliceIndex, level);\r\n            if (index < path.length) {\r\n                filterValues.push(path[index])\r\n            }\r\n        });\r\n        if (filterValues.length) {\r\n            result.push((0, _extend.extend)({}, field, {\r\n                filterType: \"include\",\r\n                filterValues: filterValues\r\n            }))\r\n        }\r\n    });\r\n    return result\r\n}\r\n\r\nfunction getGrandTotalRequest(options, dimensionName, expandedIndex, expandedLevel, commonFilters, firstCollapsedFieldIndex) {\r\n    var newOptions, expandedPaths = (\"columns\" === dimensionName ? options.columnExpandedPaths : options.rowExpandedPaths) || [],\r\n        oppositeDimensionName = \"columns\" === dimensionName ? \"rows\" : \"columns\",\r\n        fields = options[dimensionName],\r\n        result = [];\r\n    if (expandedPaths.length) {\r\n        for (var i = expandedIndex; i < expandedLevel + 1; i++) {\r\n            newOptions = {\r\n                filters: commonFilters.concat(getExpandedPathSliceFilter(options, dimensionName, i, firstCollapsedFieldIndex))\r\n            };\r\n            newOptions[dimensionName] = fields.slice(expandedIndex, i + 1);\r\n            newOptions[oppositeDimensionName] = [];\r\n            if (i === expandedLevel) {\r\n                newOptions.includeTotalSummary = true\r\n            }\r\n            result.push((0, _extend.extend)({}, options, newOptions))\r\n        }\r\n    } else {\r\n        newOptions = {\r\n            filters: commonFilters,\r\n            includeTotalSummary: true\r\n        };\r\n        newOptions[dimensionName] = fields.slice(expandedIndex, expandedLevel + 1);\r\n        newOptions[oppositeDimensionName] = [];\r\n        result.push((0, _extend.extend)({}, options, newOptions))\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getFirstCollapsedIndex(fields) {\r\n    var firstCollapsedIndex = 0;\r\n    (0, _iterator.each)(fields, function(index, field) {\r\n        if (!field.expanded) {\r\n            firstCollapsedIndex = index;\r\n            return false\r\n        }\r\n    });\r\n    return firstCollapsedIndex\r\n}\r\n\r\nfunction getRequestsData(options) {\r\n    var columnTotalsOptions, rowExpandedLevel = _uiPivot_grid2.default.getExpandedLevel(options, \"rows\"),\r\n        columnExpandedLevel = _uiPivot_grid2.default.getExpandedLevel(options, \"columns\"),\r\n        filters = options.filters || [],\r\n        columnExpandedIndex = getExpandedIndex(options, \"columns\"),\r\n        firstCollapsedColumnIndex = getFirstCollapsedIndex(options.columns),\r\n        firstCollapsedRowIndex = getFirstCollapsedIndex(options.rows),\r\n        rowExpandedIndex = getExpandedIndex(options, \"rows\"),\r\n        data = [];\r\n    filters = filters.concat(getFiltersForDimension(options.rows)).concat(getFiltersForDimension(options.columns)).concat(getFiltersForExpandedDimension(options));\r\n    columnTotalsOptions = getGrandTotalRequest(options, \"columns\", columnExpandedIndex, columnExpandedLevel, filters, firstCollapsedColumnIndex);\r\n    if (options.rows.length && options.columns.length) {\r\n        data = data.concat(columnTotalsOptions);\r\n        for (var i = rowExpandedIndex; i < rowExpandedLevel + 1; i++) {\r\n            var rows = options.rows.slice(rowExpandedIndex, i + 1),\r\n                rowFilterByExpandedPaths = getExpandedPathSliceFilter(options, \"rows\", i, firstCollapsedRowIndex);\r\n            for (var j = columnExpandedIndex; j < columnExpandedLevel + 1; j++) {\r\n                var preparedOptions = (0, _extend.extend)({}, options, {\r\n                    columns: options.columns.slice(columnExpandedIndex, j + 1),\r\n                    rows: rows,\r\n                    filters: filters.concat(getExpandedPathSliceFilter(options, \"columns\", j, firstCollapsedColumnIndex)).concat(rowFilterByExpandedPaths)\r\n                });\r\n                data.push(preparedOptions)\r\n            }\r\n        }\r\n    } else {\r\n        data = options.columns.length ? columnTotalsOptions : getGrandTotalRequest(options, \"rows\", rowExpandedIndex, rowExpandedLevel, filters, firstCollapsedRowIndex)\r\n    }\r\n    return data\r\n}\r\n\r\nfunction prepareFields(fields) {\r\n    (0, _iterator.each)(fields || [], function(_, field) {\r\n        var levels = field.levels;\r\n        if (levels) {\r\n            prepareFields(levels)\r\n        }\r\n        _uiPivot_grid2.default.setDefaultFieldValueFormatting(field)\r\n    })\r\n}\r\nmodule.exports = _class2.default.inherit(function() {\r\n    return {\r\n        ctor: function(options) {\r\n            this._dataSource = new _data_source2.default.DataSource(options);\r\n            this._store = this._dataSource.store()\r\n        },\r\n        getFields: function(fields) {\r\n            var d = new _deferred.Deferred;\r\n            this._store.load({\r\n                skip: 0,\r\n                take: 20\r\n            }).done(function(data) {\r\n                d.resolve(_uiPivot_grid2.default.discoverObjectFields(data, fields))\r\n            }).fail(d.reject);\r\n            return d\r\n        },\r\n        key: function() {\r\n            return this._store.key()\r\n        },\r\n        load: function(options) {\r\n            var that = this,\r\n                d = new _deferred.Deferred,\r\n                result = {\r\n                    rows: [],\r\n                    columns: [],\r\n                    values: [\r\n                        [\r\n                            []\r\n                        ]\r\n                    ],\r\n                    grandTotalRowIndex: 0,\r\n                    grandTotalColumnIndex: 0,\r\n                    rowHash: {},\r\n                    columnHash: {},\r\n                    rowIndex: 1,\r\n                    columnIndex: 1\r\n                },\r\n                requestsData = getRequestsData(options),\r\n                deferreds = [];\r\n            prepareFields(options.rows);\r\n            prepareFields(options.columns);\r\n            prepareFields(options.filters);\r\n            (0, _iterator.each)(requestsData, function(_, dataItem) {\r\n                deferreds.push(that._store.load(createLoadOptions(dataItem, that.filter())))\r\n            });\r\n            _deferred.when.apply(null, deferreds).done(function() {\r\n                var args = deferreds.length > 1 ? arguments : [arguments];\r\n                (0, _iterator.each)(args, function(index, argument) {\r\n                    parseResult(argument[0], argument[1], requestsData[index], result)\r\n                });\r\n                d.resolve({\r\n                    rows: result.rows,\r\n                    columns: result.columns,\r\n                    values: result.values,\r\n                    grandTotalRowIndex: result.grandTotalRowIndex,\r\n                    grandTotalColumnIndex: result.grandTotalColumnIndex\r\n                })\r\n            }).fail(d.reject);\r\n            return d\r\n        },\r\n        filter: function() {\r\n            return this._dataSource.filter.apply(this._dataSource, arguments)\r\n        },\r\n        supportSorting: function() {\r\n            return false\r\n        },\r\n        createDrillDownDataSource: function(loadOptions, params) {\r\n            loadOptions = loadOptions || {};\r\n            params = params || {};\r\n            var store = this._store,\r\n                filters = (0, _uiPivot_grid.getFiltersByPath)(loadOptions.rows, params.rowPath).concat((0, _uiPivot_grid.getFiltersByPath)(loadOptions.columns, params.columnPath)).concat(getFiltersForDimension(loadOptions.rows)).concat(loadOptions.filters || []).concat(getFiltersForDimension(loadOptions.columns)),\r\n                filterExp = createFilterExpressions(filters);\r\n            return new _data_source2.default.DataSource({\r\n                load: function(loadOptions) {\r\n                    return store.load((0, _extend.extend)({}, loadOptions, {\r\n                        filter: mergeFilters(filterExp, loadOptions.filter),\r\n                        select: params.customColumns\r\n                    }))\r\n                }\r\n            })\r\n        }\r\n    }\r\n}());\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.area_item.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    Class = require(\"../../core/class\"),\r\n    getPublicElement = require(\"../../core/utils/dom\").getPublicElement,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    isDefined = require(\"../../core/utils/type\").isDefined;\r\nvar PIVOTGRID_EXPAND_CLASS = \"dx-expand\";\r\nvar getRealElementWidth = function(element) {\r\n    var clientRect, width = 0;\r\n    if (element.getBoundingClientRect) {\r\n        clientRect = element.getBoundingClientRect();\r\n        width = clientRect.width;\r\n        if (!width) {\r\n            width = clientRect.right - clientRect.left\r\n        }\r\n    }\r\n    if (width > 0) {\r\n        return width\r\n    } else {\r\n        return element.offsetWidth\r\n    }\r\n};\r\n\r\nfunction getFakeTableOffset(scrollPos, elementOffset, tableSize, viewPortSize) {\r\n    var offset = 0,\r\n        halfTableCount = 0,\r\n        halfTableSize = tableSize / 2;\r\n    if (scrollPos + viewPortSize - (elementOffset + tableSize) > 1) {\r\n        if (scrollPos >= elementOffset + tableSize + halfTableSize) {\r\n            halfTableCount = parseInt((scrollPos - (elementOffset + tableSize)) / halfTableSize, 10)\r\n        }\r\n        offset = elementOffset + tableSize + halfTableSize * halfTableCount\r\n    } else {\r\n        if (scrollPos < elementOffset) {\r\n            if (scrollPos <= elementOffset - halfTableSize) {\r\n                halfTableCount = parseInt((scrollPos - (elementOffset - halfTableSize)) / halfTableSize, 10)\r\n            }\r\n            offset = elementOffset - (tableSize - halfTableSize * halfTableCount)\r\n        } else {\r\n            offset = elementOffset\r\n        }\r\n    }\r\n    return offset\r\n}\r\nexports.AreaItem = Class.inherit({\r\n    _getRowElement: function(index) {\r\n        var that = this;\r\n        if (that._tableElement && that._tableElement.length > 0) {\r\n            return that._tableElement[0].rows[index]\r\n        }\r\n        return null\r\n    },\r\n    _createGroupElement: function() {\r\n        return $(\"<div>\")\r\n    },\r\n    _createTableElement: function() {\r\n        return $(\"<table>\")\r\n    },\r\n    _getCellText: function(cell, encodeHtml) {\r\n        var cellText = cell.isWhiteSpace ? \"&nbsp\" : cell.text || \"&nbsp\";\r\n        if (encodeHtml && (cellText.indexOf(\"<\") !== -1 || cellText.indexOf(\">\") !== -1)) {\r\n            cellText = $(\"<div>\").text(cellText).html()\r\n        }\r\n        return cellText\r\n    },\r\n    _getRowClassNames: function() {},\r\n    _applyCustomStyles: function(options) {\r\n        if (options.cell.width) {\r\n            options.cssArray.push(\"min-width:\" + options.cell.width + \"px\")\r\n        }\r\n        if (options.cell.sorted) {\r\n            options.classArray.push(\"dx-pivotgrid-sorted\")\r\n        }\r\n    },\r\n    _getMainElementMarkup: function() {\r\n        return \"<tbody>\"\r\n    },\r\n    _getCloseMainElementMarkup: function() {\r\n        return \"</tbody>\"\r\n    },\r\n    _renderTableContent: function(tableElement, data) {\r\n        var row, cell, i, j, rowElement, cellElement, cellText, rowClassNames, that = this,\r\n            rowsCount = data.length,\r\n            rtlEnabled = that.option(\"rtlEnabled\"),\r\n            markupArray = [],\r\n            encodeHtml = that.option(\"encodeHtml\"),\r\n            colspan = \"colspan='\",\r\n            rowspan = \"rowspan='\";\r\n        tableElement.data(\"area\", that._getAreaName());\r\n        tableElement.data(\"data\", data);\r\n        tableElement.css(\"width\", \"\");\r\n        markupArray.push(that._getMainElementMarkup());\r\n        for (i = 0; i < rowsCount; i++) {\r\n            row = data[i];\r\n            var columnMarkupArray = [];\r\n            rowClassNames = [];\r\n            markupArray.push(\"<tr \");\r\n            for (j = 0; j < row.length; j++) {\r\n                cell = row[j];\r\n                this._getRowClassNames(i, cell, rowClassNames);\r\n                columnMarkupArray.push(\"<td \");\r\n                if (cell) {\r\n                    cell.rowspan && columnMarkupArray.push(rowspan + (cell.rowspan || 1) + \"'\");\r\n                    cell.colspan && columnMarkupArray.push(colspan + (cell.colspan || 1) + \"'\");\r\n                    var styleOptions = {\r\n                        cellElement: cellElement,\r\n                        cell: cell,\r\n                        cellsCount: row.length,\r\n                        cellIndex: j,\r\n                        rowElement: rowElement,\r\n                        rowIndex: i,\r\n                        rowsCount: rowsCount,\r\n                        rtlEnabled: rtlEnabled,\r\n                        classArray: [],\r\n                        cssArray: []\r\n                    };\r\n                    that._applyCustomStyles(styleOptions);\r\n                    if (styleOptions.cssArray.length) {\r\n                        columnMarkupArray.push(\"style='\");\r\n                        columnMarkupArray.push(styleOptions.cssArray.join(\";\"));\r\n                        columnMarkupArray.push(\"'\")\r\n                    }\r\n                    if (styleOptions.classArray.length) {\r\n                        columnMarkupArray.push(\"class='\");\r\n                        columnMarkupArray.push(styleOptions.classArray.join(\" \"));\r\n                        columnMarkupArray.push(\"'\")\r\n                    }\r\n                    columnMarkupArray.push(\">\");\r\n                    if (isDefined(cell.expanded)) {\r\n                        columnMarkupArray.push(\"<div class='dx-expand-icon-container'><span class='\" + PIVOTGRID_EXPAND_CLASS + \"'></span></div>\")\r\n                    }\r\n                    cellText = this._getCellText(cell, encodeHtml)\r\n                } else {\r\n                    cellText = \"\"\r\n                }\r\n                columnMarkupArray.push(\"<span \");\r\n                if (isDefined(cell.wordWrapEnabled)) {\r\n                    columnMarkupArray.push(\"style='white-space:\", cell.wordWrapEnabled ? \"normal\" : \"nowrap\", \";'\")\r\n                }\r\n                columnMarkupArray.push(\">\" + cellText + \"</span>\");\r\n                if (cell.sorted) {\r\n                    columnMarkupArray.push(\"<span class='dx-icon-sorted'></span>\")\r\n                }\r\n                columnMarkupArray.push(\"</td>\")\r\n            }\r\n            if (rowClassNames.length) {\r\n                markupArray.push(\"class='\");\r\n                markupArray.push(rowClassNames.join(\" \"));\r\n                markupArray.push(\"'\")\r\n            }\r\n            markupArray.push(\">\");\r\n            markupArray.push(columnMarkupArray.join(\"\"));\r\n            markupArray.push(\"</tr>\")\r\n        }\r\n        markupArray.push(this._getCloseMainElementMarkup());\r\n        tableElement.append(markupArray.join(\"\"));\r\n        this._triggerOnCellPrepared(tableElement, data)\r\n    },\r\n    _triggerOnCellPrepared: function(tableElement, data) {\r\n        var rowElement, $cellElement, onCellPreparedArgs, row, cell, rowIndex, columnIndex, that = this,\r\n            rowElements = tableElement.find(\"tr\"),\r\n            areaName = that._getAreaName(),\r\n            onCellPrepared = that.option(\"onCellPrepared\"),\r\n            hasEvent = that.component.hasEvent(\"cellPrepared\"),\r\n            defaultActionArgs = this.component._defaultActionArgs();\r\n        if (onCellPrepared || hasEvent) {\r\n            for (rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n                row = data[rowIndex];\r\n                rowElement = rowElements.eq(rowIndex);\r\n                for (columnIndex = 0; columnIndex < row.length; columnIndex++) {\r\n                    cell = row[columnIndex];\r\n                    $cellElement = rowElement.children().eq(columnIndex);\r\n                    onCellPreparedArgs = {\r\n                        area: areaName,\r\n                        rowIndex: rowIndex,\r\n                        columnIndex: columnIndex,\r\n                        cellElement: getPublicElement($cellElement),\r\n                        cell: cell\r\n                    };\r\n                    if (hasEvent) {\r\n                        that.component._trigger(\"onCellPrepared\", onCellPreparedArgs)\r\n                    } else {\r\n                        onCellPrepared(extend(onCellPreparedArgs, defaultActionArgs))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getRowHeight: function(index) {\r\n        var clientRect, row = this._getRowElement(index),\r\n            height = 0;\r\n        if (row && row.lastChild) {\r\n            if (row.getBoundingClientRect) {\r\n                clientRect = row.getBoundingClientRect();\r\n                height = clientRect.height\r\n            }\r\n            if (height > 0) {\r\n                return height\r\n            } else {\r\n                return row.offsetHeight\r\n            }\r\n        }\r\n        return 0\r\n    },\r\n    _setRowHeight: function(index, value) {\r\n        var row = this._getRowElement(index);\r\n        if (row) {\r\n            row.style.height = value + \"px\"\r\n        }\r\n    },\r\n    ctor: function(component) {\r\n        this.component = component\r\n    },\r\n    option: function() {\r\n        return this.component.option.apply(this.component, arguments)\r\n    },\r\n    getRowsLength: function() {\r\n        var that = this;\r\n        if (that._tableElement && that._tableElement.length > 0) {\r\n            return that._tableElement[0].rows.length\r\n        }\r\n        return 0\r\n    },\r\n    getRowsHeight: function() {\r\n        var i, that = this,\r\n            result = [],\r\n            rowsLength = that.getRowsLength();\r\n        for (i = 0; i < rowsLength; i++) {\r\n            result.push(that._getRowHeight(i))\r\n        }\r\n        return result\r\n    },\r\n    setRowsHeight: function(values) {\r\n        var i, that = this,\r\n            totalHeight = 0,\r\n            valuesLength = values.length;\r\n        for (i = 0; i < valuesLength; i++) {\r\n            totalHeight += values[i];\r\n            that._setRowHeight(i, values[i])\r\n        }\r\n        this._tableHeight = totalHeight;\r\n        this._tableElement[0].style.height = totalHeight + \"px\"\r\n    },\r\n    getColumnsWidth: function() {\r\n        var rowIndex, row, i, columnIndex, rowsLength = this.getRowsLength(),\r\n            processedCells = [],\r\n            result = [],\r\n            fillCells = function(cells, rowIndex, columnIndex, rowSpan, colSpan) {\r\n                var rowOffset, columnOffset;\r\n                for (rowOffset = 0; rowOffset < rowSpan; rowOffset++) {\r\n                    for (columnOffset = 0; columnOffset < colSpan; columnOffset++) {\r\n                        cells[rowIndex + rowOffset] = cells[rowIndex + rowOffset] || [];\r\n                        cells[rowIndex + rowOffset][columnIndex + columnOffset] = true\r\n                    }\r\n                }\r\n            };\r\n        if (rowsLength) {\r\n            for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n                processedCells[rowIndex] = processedCells[rowIndex] || [];\r\n                row = this._getRowElement(rowIndex);\r\n                for (i = 0; i < row.cells.length; i++) {\r\n                    for (columnIndex = 0; processedCells[rowIndex][columnIndex]; columnIndex++) {}\r\n                    fillCells(processedCells, rowIndex, columnIndex, row.cells[i].rowSpan, row.cells[i].colSpan);\r\n                    if (1 === row.cells[i].colSpan) {\r\n                        result[columnIndex] = result[columnIndex] || getRealElementWidth(row.cells[i])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    setColumnsWidth: function(values) {\r\n        var i, totalWidth = 0,\r\n            tableElement = this._tableElement[0],\r\n            colgroupElementHTML = \"\",\r\n            columnsCount = this.getColumnsCount(),\r\n            columnWidth = [];\r\n        for (i = 0; i < columnsCount; i++) {\r\n            columnWidth.push(values[i] || 0)\r\n        }\r\n        for (i = columnsCount; i < values.length && values; i++) {\r\n            columnWidth[columnsCount - 1] += values[i]\r\n        }\r\n        for (i = 0; i < columnsCount; i++) {\r\n            totalWidth += columnWidth[i];\r\n            colgroupElementHTML += '<col style=\"width: ' + columnWidth[i] + 'px\">'\r\n        }\r\n        this._colgroupElement.html(colgroupElementHTML);\r\n        this._tableWidth = totalWidth;\r\n        tableElement.style.width = totalWidth + \"px\";\r\n        tableElement.style.tableLayout = \"fixed\"\r\n    },\r\n    resetColumnsWidth: function() {\r\n        this._colgroupElement.find(\"col\").width(\"auto\");\r\n        this._tableElement.css({\r\n            width: \"\",\r\n            tableLayout: \"\"\r\n        })\r\n    },\r\n    groupWidth: function(value) {\r\n        if (void 0 === value) {\r\n            return this._groupElement.width()\r\n        } else {\r\n            if (value >= 0) {\r\n                this._groupWidth = value;\r\n                return this._groupElement[0].style.width = value + \"px\"\r\n            } else {\r\n                return this._groupElement[0].style.width = value\r\n            }\r\n        }\r\n    },\r\n    groupHeight: function(value) {\r\n        if (void 0 === value) {\r\n            return this._groupElement.height()\r\n        }\r\n        this._groupHeight = null;\r\n        if (value >= 0) {\r\n            this._groupHeight = value;\r\n            this._groupElement[0].style.height = value + \"px\"\r\n        } else {\r\n            this._groupElement[0].style.height = value\r\n        }\r\n    },\r\n    groupElement: function() {\r\n        return this._groupElement\r\n    },\r\n    tableElement: function() {\r\n        return this._tableElement\r\n    },\r\n    element: function() {\r\n        return this._rootElement\r\n    },\r\n    headElement: function() {\r\n        return this._tableElement.find(\"thead\")\r\n    },\r\n    _setTableCss: function(styles) {\r\n        if (this.option(\"rtlEnabled\")) {\r\n            styles.right = styles.left;\r\n            delete styles.left\r\n        }\r\n        this.tableElement().css(styles)\r\n    },\r\n    setVirtualContentParams: function(params) {\r\n        this._virtualContent.css({\r\n            width: params.width,\r\n            height: params.height\r\n        });\r\n        this.groupElement().addClass(\"dx-virtual-mode\")\r\n    },\r\n    disableVirtualMode: function() {\r\n        this.groupElement().removeClass(\"dx-virtual-mode\")\r\n    },\r\n    _renderVirtualContent: function() {\r\n        var that = this;\r\n        if (!that._virtualContent && \"virtual\" === that.option(\"scrolling.mode\")) {\r\n            that._virtualContent = $(\"<div>\").addClass(\"dx-virtual-content\").insertBefore(that._tableElement)\r\n        }\r\n    },\r\n    reset: function() {\r\n        var that = this,\r\n            tableElement = that._tableElement[0];\r\n        that._fakeTable && that._fakeTable.detach();\r\n        that._fakeTable = null;\r\n        that.disableVirtualMode();\r\n        that.groupWidth(\"100%\");\r\n        that.groupHeight(\"auto\");\r\n        that.resetColumnsWidth();\r\n        if (tableElement) {\r\n            for (var i = 0; i < tableElement.rows.length; i++) {\r\n                tableElement.rows[i].style.height = \"\"\r\n            }\r\n            tableElement.style.height = \"\";\r\n            tableElement.style.width = \"100%\"\r\n        }\r\n    },\r\n    _updateFakeTableVisibility: function() {\r\n        var that = this,\r\n            tableElement = that.tableElement()[0],\r\n            horizontalOffsetName = that.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n            fakeTableElement = that._fakeTable[0];\r\n        if (tableElement.style.top === fakeTableElement.style.top && fakeTableElement.style[horizontalOffsetName] === tableElement.style[horizontalOffsetName]) {\r\n            that._fakeTable.addClass(\"dx-hidden\")\r\n        } else {\r\n            that._fakeTable.removeClass(\"dx-hidden\")\r\n        }\r\n    },\r\n    _moveFakeTableHorizontally: function(scrollPos) {\r\n        var that = this,\r\n            rtlEnabled = that.option(\"rtlEnabled\"),\r\n            offsetStyleName = rtlEnabled ? \"right\" : \"left\",\r\n            tableElementOffset = parseFloat(that.tableElement()[0].style[offsetStyleName]),\r\n            offset = getFakeTableOffset(scrollPos, tableElementOffset, that._tableWidth, that._groupWidth);\r\n        if (parseFloat(that._fakeTable[0].style[offsetStyleName]) !== offset) {\r\n            that._fakeTable[0].style[offsetStyleName] = offset + \"px\"\r\n        }\r\n    },\r\n    _moveFakeTableTop: function(scrollPos) {\r\n        var that = this,\r\n            tableElementOffsetTop = parseFloat(that.tableElement()[0].style.top),\r\n            offsetTop = getFakeTableOffset(scrollPos, tableElementOffsetTop, that._tableHeight, that._groupHeight);\r\n        if (parseFloat(that._fakeTable[0].style.top) !== offsetTop) {\r\n            that._fakeTable[0].style.top = offsetTop + \"px\"\r\n        }\r\n    },\r\n    _moveFakeTable: function() {\r\n        this._updateFakeTableVisibility()\r\n    },\r\n    _createFakeTable: function() {\r\n        var that = this;\r\n        if (!that._fakeTable) {\r\n            that._fakeTable = that.tableElement().clone().addClass(\"dx-pivot-grid-fake-table\").appendTo(that._virtualContent)\r\n        }\r\n    },\r\n    render: function(rootElement, data) {\r\n        var that = this;\r\n        if (that._tableElement) {\r\n            try {\r\n                that._tableElement[0].innerHTML = \"\"\r\n            } catch (e) {\r\n                that._tableElement.empty()\r\n            }\r\n            that._tableElement.attr(\"style\", \"\")\r\n        } else {\r\n            that._groupElement = that._createGroupElement();\r\n            that._tableElement = that._createTableElement();\r\n            that._tableElement.appendTo(that._groupElement);\r\n            that._groupElement.appendTo(rootElement);\r\n            that._rootElement = rootElement\r\n        }\r\n        that._colgroupElement = $(\"<colgroup>\").appendTo(that._tableElement);\r\n        that._renderTableContent(that._tableElement, data);\r\n        that._renderVirtualContent()\r\n    },\r\n    _getScrollable: function() {\r\n        return this.groupElement().data(\"dxScrollable\")\r\n    },\r\n    on: function(eventName, handler) {\r\n        var that = this,\r\n            scrollable = that._getScrollable();\r\n        if (scrollable) {\r\n            scrollable.on(eventName, function(e) {\r\n                if (that.option(\"rtlEnabled\") && isDefined(e.scrollOffset.left)) {\r\n                    e.scrollOffset.left = scrollable.$content().width() - scrollable._container().width() - e.scrollOffset.left\r\n                }\r\n                handler(e)\r\n            })\r\n        }\r\n        return this\r\n    },\r\n    off: function(eventName) {\r\n        var scrollable = this._getScrollable();\r\n        if (scrollable) {\r\n            scrollable.off(eventName)\r\n        }\r\n        return this\r\n    },\r\n    scrollTo: function(pos) {\r\n        var scrollable = this._getScrollable(),\r\n            scrollablePos = pos;\r\n        if (scrollable) {\r\n            if (this.option(\"rtlEnabled\")) {\r\n                if (\"column\" === this._getAreaName()) {\r\n                    scrollablePos = scrollable.$content().width() - scrollable._container().width() - pos\r\n                } else {\r\n                    if (\"data\" === this._getAreaName()) {\r\n                        scrollablePos = {\r\n                            x: scrollable.$content().width() - scrollable._container().width() - pos.x,\r\n                            y: pos.y\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            scrollable.scrollTo(scrollablePos);\r\n            if (this._virtualContent) {\r\n                this._createFakeTable();\r\n                this._moveFakeTable(pos)\r\n            }\r\n        }\r\n    },\r\n    updateScrollable: function() {\r\n        var scrollable = this._getScrollable();\r\n        if (scrollable) {\r\n            return scrollable.update()\r\n        }\r\n    },\r\n    getColumnsCount: function() {\r\n        var cells, columnCount = 0,\r\n            row = this._getRowElement(0);\r\n        if (row) {\r\n            cells = row.cells;\r\n            for (var i = 0, len = cells.length; i < len; ++i) {\r\n                columnCount += cells[i].colSpan\r\n            }\r\n        }\r\n        return columnCount\r\n    },\r\n    getData: function() {\r\n        var tableElement = this._tableElement;\r\n        return tableElement ? tableElement.data(\"data\") : []\r\n    }\r\n});\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.chart_integration.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    pivotUtils = require(\"./ui.pivot_grid.utils\"),\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    foreachTree = pivotUtils.foreachTree,\r\n    FORMAT_DICTIONARY = {\r\n        number: \"numeric\",\r\n        date: \"datetime\"\r\n    },\r\n    UNBIND_KEY = \"dxPivotGridUnbinding\";\r\n\r\nfunction getFormattedValue(path, fields) {\r\n    var value = [],\r\n        lastFieldIndex = fields.length - 1;\r\n    each(path, function(i, item) {\r\n        value.push(item.text || pivotUtils.formatValue(item.value, fields[lastFieldIndex - i]))\r\n    });\r\n    return value.reverse()\r\n}\r\n\r\nfunction getExpandedLevel(node) {\r\n    var level = 0;\r\n    foreachTree(node, function(members) {\r\n        level = Math.max(level, members.length - 1)\r\n    });\r\n    return level\r\n}\r\n\r\nfunction processDataCell(processCellArgs, processCell) {\r\n    var chartDataItem = processCellArgs.chartDataItem,\r\n        processedCell = processCell && processCell(processCellArgs);\r\n    if (processedCell) {\r\n        chartDataItem = extend({}, chartDataItem, processedCell.chartDataItem);\r\n        processedCell = extend({}, processCellArgs, processedCell, {\r\n            chartDataItem: chartDataItem\r\n        });\r\n        return processedCell\r\n    }\r\n    return processCellArgs\r\n}\r\n\r\nfunction createChartDataSource(pivotGridDataSource, mapOptions, axisDictionary) {\r\n    var measureIndex, dataField, rowMemberIndex, rowVisibility, rowPathFormatted, rowPath, columnMemberIndex, columnVisibility, columnPath, columnPathFormatted, data = pivotGridDataSource.getData(),\r\n        dataSource = [],\r\n        dataFields = pivotGridDataSource.getAreaFields(\"data\"),\r\n        rowFields = pivotGridDataSource.getAreaFields(\"row\"),\r\n        columnFields = pivotGridDataSource.getAreaFields(\"column\"),\r\n        columnElements = [{\r\n            index: data.grandTotalColumnIndex,\r\n            children: data.columns\r\n        }],\r\n        rowElements = [{\r\n            index: data.grandTotalRowIndex,\r\n            children: data.rows\r\n        }],\r\n        rowLevel = getExpandedLevel(rowElements),\r\n        columnLevel = getExpandedLevel(columnElements);\r\n\r\n    function createDataItem() {\r\n        var axis, dataCell = (data.values[rowMemberIndex] || [])[columnMemberIndex] || [],\r\n            value = dataCell[measureIndex],\r\n            processCellArgs = {\r\n                rowPath: rowPath,\r\n                maxRowLevel: rowLevel,\r\n                rowPathFormatted: rowPathFormatted,\r\n                rowFields: rowFields,\r\n                columnPathFormatted: columnPathFormatted,\r\n                maxColumnLevel: columnLevel,\r\n                columnPath: columnPath,\r\n                columnFields: columnFields,\r\n                dataFields: dataFields,\r\n                dataIndex: measureIndex,\r\n                dataValues: dataCell,\r\n                visible: columnVisibility && rowVisibility\r\n            },\r\n            seriesName = (mapOptions.inverted ? columnPathFormatted : rowPathFormatted).join(\" - \"),\r\n            argument = (mapOptions.inverted ? rowPathFormatted : columnPathFormatted).join(\"/\");\r\n        if (dataFields.length > 1) {\r\n            if (\"args\" === mapOptions.putDataFieldsInto || \"both\" === mapOptions.putDataFieldsInto) {\r\n                argument += \" | \" + dataField.caption\r\n            }\r\n            if (\"args\" !== mapOptions.putDataFieldsInto) {\r\n                seriesName += \" | \" + dataField.caption;\r\n                if (\"singleAxis\" !== mapOptions.dataFieldsDisplayMode) {\r\n                    axis = dataField.caption\r\n                }\r\n            }\r\n        }\r\n        processCellArgs.chartDataItem = {\r\n            val: void 0 === value ? null : value,\r\n            series: seriesName,\r\n            arg: argument\r\n        };\r\n        processCellArgs = processDataCell(processCellArgs, mapOptions.processCell);\r\n        if (processCellArgs.visible) {\r\n            axisDictionary[processCellArgs.chartDataItem.series] = axisDictionary[processCellArgs.chartDataItem.series] || axis;\r\n            dataSource.push(processCellArgs.chartDataItem)\r\n        }\r\n    }\r\n\r\n    function foreachRowColumn(callBack) {\r\n        foreachTree(rowElements, function(rowMembers) {\r\n            rowMemberIndex = rowMembers[0].index;\r\n            rowMembers = rowMembers.slice(0, rowMembers.length - 1);\r\n            rowVisibility = rowLevel === rowMembers.length;\r\n            rowPath = pivotUtils.createPath(rowMembers);\r\n            rowPathFormatted = getFormattedValue(rowMembers, rowFields);\r\n            if (0 === rowPath.length) {\r\n                rowPathFormatted = [mapOptions.grandTotalText]\r\n            }\r\n            foreachTree(columnElements, function(columnMembers) {\r\n                columnMemberIndex = columnMembers[0].index;\r\n                columnMembers = columnMembers.slice(0, columnMembers.length - 1);\r\n                columnVisibility = columnLevel === columnMembers.length;\r\n                columnPath = pivotUtils.createPath(columnMembers);\r\n                columnPathFormatted = getFormattedValue(columnMembers, columnFields);\r\n                if (0 === columnPath.length) {\r\n                    columnPathFormatted = [mapOptions.grandTotalText]\r\n                }\r\n                callBack()\r\n            })\r\n        })\r\n    }\r\n\r\n    function foreachDataField(callback) {\r\n        each(dataFields, function(index, field) {\r\n            dataField = field;\r\n            measureIndex = index;\r\n            callback()\r\n        })\r\n    }\r\n    if (false === mapOptions.alternateDataFields) {\r\n        foreachDataField(function() {\r\n            foreachRowColumn(createDataItem)\r\n        })\r\n    } else {\r\n        foreachRowColumn(function() {\r\n            foreachDataField(createDataItem)\r\n        })\r\n    }\r\n    return dataSource\r\n}\r\n\r\nfunction createValueAxisOptions(dataSource, options) {\r\n    var dataFields = dataSource.getAreaFields(\"data\");\r\n    if (\"args\" !== options.putDataFieldsInto && \"singleAxis\" !== options.dataFieldsDisplayMode || 1 === dataFields.length) {\r\n        var valueAxisSettings = [];\r\n        each(dataFields, function(_, dataField) {\r\n            var valueAxisOptions = {\r\n                name: dataField.caption,\r\n                title: dataField.caption,\r\n                valueType: FORMAT_DICTIONARY[dataField.dataType] || dataField.dataType,\r\n                label: {\r\n                    format: dataField.format\r\n                }\r\n            };\r\n            if (dataField.customizeText) {\r\n                valueAxisOptions.label.customizeText = function(formatObject) {\r\n                    return dataField.customizeText.call(dataField, formatObject)\r\n                }\r\n            }\r\n            if (\"splitPanes\" === options.dataFieldsDisplayMode) {\r\n                valueAxisOptions.pane = dataField.caption\r\n            }\r\n            valueAxisSettings.push(valueAxisOptions)\r\n        });\r\n        return valueAxisSettings\r\n    }\r\n    return [{}]\r\n}\r\n\r\nfunction createPanesOptions(dataSource, options) {\r\n    var panes = [];\r\n    var dataFields = dataSource.getAreaFields(\"data\");\r\n    if (dataFields.length > 1 && \"splitPanes\" === options.dataFieldsDisplayMode && \"args\" !== options.putDataFieldsInto) {\r\n        each(dataFields, function(_, dataField) {\r\n            panes.push({\r\n                name: dataField.caption\r\n            })\r\n        })\r\n    }\r\n    if (!panes.length) {\r\n        panes.push({})\r\n    }\r\n    return panes\r\n}\r\n\r\nfunction createChartOptions(dataSource, options) {\r\n    var _customizeSeries = options.customizeSeries,\r\n        customizeChart = options.customizeChart,\r\n        chartOptions = {\r\n            valueAxis: createValueAxisOptions(dataSource, options),\r\n            panes: createPanesOptions(dataSource, options)\r\n        },\r\n        axisDictionary = {};\r\n    if (customizeChart) {\r\n        chartOptions = extend(true, {}, chartOptions, customizeChart(chartOptions))\r\n    }\r\n    chartOptions.dataSource = createChartDataSource(dataSource, options, axisDictionary);\r\n    chartOptions.seriesTemplate = {\r\n        nameField: \"series\",\r\n        customizeSeries: function(seriesName) {\r\n            var seriesOptions = {};\r\n            if (\"splitPanes\" === options.dataFieldsDisplayMode) {\r\n                seriesOptions.pane = axisDictionary[seriesName]\r\n            } else {\r\n                if (\"singleAxis\" !== options.dataFieldsDisplayMode) {\r\n                    seriesOptions.axis = axisDictionary[seriesName]\r\n                }\r\n            }\r\n            if (_customizeSeries) {\r\n                seriesOptions = extend(seriesOptions, _customizeSeries(seriesName, seriesOptions))\r\n            }\r\n            return seriesOptions\r\n        }\r\n    };\r\n    return chartOptions\r\n}\r\n\r\nfunction getChartInstance(chartElement) {\r\n    if (!chartElement) {\r\n        return false\r\n    }\r\n    if (chartElement.NAME) {\r\n        return \"dxChart\" === chartElement.NAME && chartElement\r\n    }\r\n    var element = $(chartElement);\r\n    return element.data(\"dxChart\") && element.dxChart(\"instance\")\r\n}\r\n\r\nfunction removeBinding(chart) {\r\n    var unbind = chart.$element().data(UNBIND_KEY);\r\n    unbind && unbind()\r\n}\r\nmodule.exports = {\r\n    bindChart: function(chart, integrationOptions) {\r\n        integrationOptions = extend({}, integrationOptions);\r\n        var disposeBinding, that = this,\r\n            updateChart = function() {\r\n                integrationOptions.grandTotalText = that.option(\"texts.grandTotal\");\r\n                var chartOptions = createChartOptions(that.getDataSource(), integrationOptions);\r\n                chart.option(chartOptions)\r\n            };\r\n        chart = getChartInstance(chart);\r\n        if (!chart) {\r\n            return null\r\n        }\r\n        removeBinding(chart);\r\n        that.on(\"changed\", updateChart);\r\n        updateChart();\r\n        disposeBinding = function() {\r\n            chart.$element().removeData(UNBIND_KEY);\r\n            that.off(\"changed\", updateChart)\r\n        };\r\n        chart.on(\"disposing\", disposeBinding);\r\n        this.on(\"disposing\", disposeBinding);\r\n        chart.$element().data(UNBIND_KEY, disposeBinding);\r\n        return disposeBinding\r\n    }\r\n};\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.data_area.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    areaItem = require(\"./ui.pivot_grid.area_item\");\r\nvar PIVOTGRID_AREA_CLASS = \"dx-pivotgrid-area\",\r\n    PIVOTGRID_AREA_DATA_CLASS = \"dx-pivotgrid-area-data\",\r\n    PIVOTGRID_TOTAL_CLASS = \"dx-total\",\r\n    PIVOTGRID_GRAND_TOTAL_CLASS = \"dx-grandtotal\",\r\n    PIVOTGRID_ROW_TOTAL_CLASS = \"dx-row-total\";\r\nexports.DataArea = areaItem.AreaItem.inherit({\r\n    _getAreaName: function() {\r\n        return \"data\"\r\n    },\r\n    _createGroupElement: function() {\r\n        return $(\"<div>\").addClass(PIVOTGRID_AREA_CLASS).addClass(PIVOTGRID_AREA_DATA_CLASS)\r\n    },\r\n    _applyCustomStyles: function(options) {\r\n        var cell = options.cell,\r\n            classArray = options.classArray;\r\n        if (\"T\" === cell.rowType || \"T\" === cell.columnType) {\r\n            classArray.push(PIVOTGRID_TOTAL_CLASS)\r\n        }\r\n        if (\"GT\" === cell.rowType || \"GT\" === cell.columnType) {\r\n            classArray.push(PIVOTGRID_GRAND_TOTAL_CLASS)\r\n        }\r\n        if (\"T\" === cell.rowType || \"GT\" === cell.rowType) {\r\n            classArray.push(PIVOTGRID_ROW_TOTAL_CLASS)\r\n        }\r\n        if (options.rowIndex === options.rowsCount - 1) {\r\n            options.cssArray.push(\"border-bottom: 0px\")\r\n        }\r\n        this.callBase(options)\r\n    },\r\n    _moveFakeTable: function(scrollPos) {\r\n        this._moveFakeTableHorizontally(scrollPos.x);\r\n        this._moveFakeTableTop(scrollPos.y);\r\n        this.callBase()\r\n    },\r\n    processScroll: function(useNativeScrolling, horizontalScroll, verticalScroll) {\r\n        var direction = \"both\";\r\n        if (horizontalScroll && !verticalScroll) {\r\n            direction = \"horizontal\"\r\n        } else {\r\n            if (!horizontalScroll && verticalScroll) {\r\n                direction = \"vertical\"\r\n            }\r\n        }\r\n        this._groupElement.css(\"borderTopWidth\", 0).dxScrollable({\r\n            useNative: !!useNativeScrolling,\r\n            useSimulatedScrollbar: !useNativeScrolling,\r\n            direction: direction,\r\n            bounceEnabled: false,\r\n            updateManually: true\r\n        })\r\n    },\r\n    reset: function() {\r\n        this.callBase();\r\n        if (this._virtualContent) {\r\n            this._virtualContent.parent().css(\"height\", \"auto\")\r\n        }\r\n    },\r\n    setVirtualContentParams: function(params) {\r\n        this.callBase(params);\r\n        this._virtualContent.parent().css(\"height\", params.height);\r\n        this._setTableCss({\r\n            top: params.top,\r\n            left: params.left\r\n        })\r\n    }\r\n});\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.data_controller.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar Callbacks = require(\"../../core/utils/callbacks\"),\r\n    deferredUtils = require(\"../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    iteratorUtils = require(\"../../core/utils/iterator\"),\r\n    Class = require(\"../../core/class\"),\r\n    stringUtils = require(\"../../core/utils/string\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    typeUtils = require(\"../../core/utils/type\"),\r\n    virtualScrolling = require(\"../grid_core/ui.grid_core.virtual_scrolling_core\"),\r\n    virtualColumnsCore = require(\"../grid_core/ui.grid_core.virtual_columns_core\"),\r\n    stateStoring = require(\"../grid_core/ui.grid_core.state_storing_core\"),\r\n    PivotGridDataSource = require(\"./data_source\"),\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    foreachTree = pivotGridUtils.foreachTree,\r\n    foreachTreeAsync = pivotGridUtils.foreachTreeAsync,\r\n    createPath = pivotGridUtils.createPath,\r\n    formatValue = pivotGridUtils.formatValue,\r\n    math = Math,\r\n    GRAND_TOTAL_TYPE = \"GT\",\r\n    TOTAL_TYPE = \"T\",\r\n    DATA_TYPE = \"D\",\r\n    NOT_AVAILABLE = \"#N/A\";\r\nvar proxyMethod = function(instance, methodName, defaultResult) {\r\n    if (!instance[methodName]) {\r\n        instance[methodName] = function() {\r\n            var dataSource = this._dataSource;\r\n            return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult\r\n        }\r\n    }\r\n};\r\nexports.DataController = Class.inherit(function() {\r\n    function getHeaderItemText(item, description, options) {\r\n        var text = item.text;\r\n        if (typeUtils.isDefined(item.displayText)) {\r\n            text = item.displayText\r\n        } else {\r\n            if (typeUtils.isDefined(item.caption)) {\r\n                text = item.caption\r\n            } else {\r\n                if (item.type === GRAND_TOTAL_TYPE) {\r\n                    text = options.texts.grandTotal\r\n                }\r\n            }\r\n        }\r\n        if (item.isAdditionalTotal) {\r\n            text = stringUtils.format(options.texts.total || \"\", text)\r\n        }\r\n        return text\r\n    }\r\n\r\n    function formatCellValue(value, dataField, errorText) {\r\n        return value === NOT_AVAILABLE ? errorText : formatValue(value, dataField)\r\n    }\r\n    var createHeaderInfo = function() {\r\n        var getHeaderItemsDepth = function(headerItems) {\r\n            var depth = 0;\r\n            foreachTree(headerItems, function(items) {\r\n                depth = math.max(depth, items.length)\r\n            });\r\n            return depth\r\n        };\r\n        var createInfoItem = function(headerItem, breadth, isHorizontal, isTree) {\r\n            var infoItem = {\r\n                type: headerItem.type,\r\n                text: headerItem.text\r\n            };\r\n            if (headerItem.path) {\r\n                infoItem.path = headerItem.path\r\n            }\r\n            if (headerItem.width) {\r\n                infoItem.width = headerItem.width\r\n            }\r\n            if (typeUtils.isDefined(headerItem.wordWrapEnabled)) {\r\n                infoItem.wordWrapEnabled = headerItem.wordWrapEnabled\r\n            }\r\n            if (headerItem.isLast) {\r\n                infoItem.isLast = true\r\n            }\r\n            if (headerItem.sorted) {\r\n                infoItem.sorted = true\r\n            }\r\n            if (headerItem.isMetric) {\r\n                infoItem.dataIndex = headerItem.dataIndex\r\n            }\r\n            if (typeUtils.isDefined(headerItem.expanded)) {\r\n                infoItem.expanded = headerItem.expanded\r\n            }\r\n            if (breadth > 1) {\r\n                infoItem[isHorizontal ? \"colspan\" : \"rowspan\"] = breadth\r\n            }\r\n            if (headerItem.depthSize && headerItem.depthSize > 1) {\r\n                infoItem[isHorizontal ? \"rowspan\" : \"colspan\"] = headerItem.depthSize\r\n            }\r\n            if (headerItem.index >= 0) {\r\n                infoItem.dataSourceIndex = headerItem.index\r\n            }\r\n            if (isTree && headerItem.children && headerItem.children.length && !headerItem.children[0].isMetric) {\r\n                infoItem.width = null;\r\n                infoItem.isWhiteSpace = true\r\n            }\r\n            return infoItem\r\n        };\r\n        var addInfoItem = function(info, options) {\r\n            var itemInfo, breadth = options.lastIndex - options.index || 1,\r\n                addInfoItemCore = function(info, infoItem, itemIndex, depthIndex, isHorizontal) {\r\n                    var index = isHorizontal ? depthIndex : itemIndex;\r\n                    while (!info[index]) {\r\n                        info.push([])\r\n                    }\r\n                    if (isHorizontal) {\r\n                        info[index].push(infoItem)\r\n                    } else {\r\n                        info[index].unshift(infoItem)\r\n                    }\r\n                };\r\n            itemInfo = createInfoItem(options.headerItem, breadth, options.isHorizontal, options.isTree);\r\n            addInfoItemCore(info, itemInfo, options.index, options.depth, options.isHorizontal);\r\n            if (!options.headerItem.children || 0 === options.headerItem.children.length) {\r\n                return options.lastIndex + 1\r\n            }\r\n            return options.lastIndex\r\n        };\r\n        var isItemSorted = function(items, sortBySummaryPath) {\r\n            var path, item = items[0],\r\n                stringValuesUsed = typeUtils.isString(sortBySummaryPath[0]),\r\n                headerItem = item.dataIndex >= 0 ? items[1] : item;\r\n            if (stringValuesUsed && sortBySummaryPath[0].indexOf(\"&[\") !== -1 && headerItem.key || !headerItem.key) {\r\n                path = createPath(items)\r\n            } else {\r\n                path = iteratorUtils.map(items, function(item) {\r\n                    return item.dataIndex >= 0 ? item.value : item.text\r\n                }).reverse()\r\n            }\r\n            if (item.type === GRAND_TOTAL_TYPE) {\r\n                path = path.slice(1)\r\n            }\r\n            return path.join(\"/\") === sortBySummaryPath.join(\"/\")\r\n        };\r\n        var getViewHeaderItems = function(headerItems, headerDescriptions, cellDescriptions, depthSize, options) {\r\n            var cellDescriptionsCount = cellDescriptions.length,\r\n                viewHeaderItems = createViewHeaderItems(headerItems, headerDescriptions),\r\n                dataFields = options.dataFields,\r\n                d = new Deferred;\r\n            when(viewHeaderItems).done(function(viewHeaderItems) {\r\n                options.notifyProgress(.5);\r\n                if (options.showGrandTotals || 0 === headerDescriptions.length) {\r\n                    viewHeaderItems[!options.showTotalsPrior ? \"push\" : \"unshift\"]({\r\n                        type: GRAND_TOTAL_TYPE,\r\n                        isEmpty: options.isEmptyGrandTotal\r\n                    })\r\n                }\r\n                var hideTotals = false === options.showTotals || dataFields.length > 0 && dataFields.length === options.hiddenTotals.length,\r\n                    hideData = dataFields.length > 0 && options.hiddenValues.length === dataFields.length;\r\n                if (hideData && hideTotals) {\r\n                    depthSize = 1\r\n                }\r\n                if (!hideTotals || \"tree\" === options.layout) {\r\n                    addAdditionalTotalHeaderItems(viewHeaderItems, headerDescriptions, options.showTotalsPrior, \"tree\" === options.layout)\r\n                }\r\n                when(foreachTreeAsync(viewHeaderItems, function(items) {\r\n                    var item = items[0];\r\n                    if (!item.children || 0 === item.children.length) {\r\n                        item.depthSize = depthSize - items.length + 1\r\n                    }\r\n                })).done(function() {\r\n                    if (cellDescriptionsCount > 1) {\r\n                        addMetricHeaderItems(viewHeaderItems, cellDescriptions, options)\r\n                    }!options.showEmpty && removeHiddenItems(viewHeaderItems);\r\n                    options.notifyProgress(.75);\r\n                    when(foreachTreeAsync(viewHeaderItems, function(items) {\r\n                        var item = items[0],\r\n                            isMetric = item.isMetric,\r\n                            field = headerDescriptions[items.length - 1] || {};\r\n                        if (item.type === DATA_TYPE && !isMetric) {\r\n                            item.width = field.width\r\n                        }\r\n                        if (true === hideData && item.type === DATA_TYPE) {\r\n                            var parentChildren = (items[1] ? items[1].children : viewHeaderItems) || [];\r\n                            parentChildren.splice(inArray(item, parentChildren), 1);\r\n                            return\r\n                        }\r\n                        if (isMetric) {\r\n                            item.wordWrapEnabled = cellDescriptions[item.dataIndex].wordWrapEnabled\r\n                        } else {\r\n                            item.wordWrapEnabled = field.wordWrapEnabled\r\n                        }\r\n                        item.isLast = !item.children || !item.children.length;\r\n                        if (item.isLast) {\r\n                            iteratorUtils.each(options.sortBySummaryPaths, function(index, sortBySummaryPath) {\r\n                                if (!typeUtils.isDefined(item.dataIndex)) {\r\n                                    sortBySummaryPath = sortBySummaryPath.slice(0);\r\n                                    sortBySummaryPath.pop()\r\n                                }\r\n                                if (isItemSorted(items, sortBySummaryPath)) {\r\n                                    item.sorted = true;\r\n                                    return false\r\n                                }\r\n                            })\r\n                        }\r\n                        item.text = getHeaderItemText(item, field, options)\r\n                    })).done(function() {\r\n                        if (!viewHeaderItems.length) {\r\n                            viewHeaderItems.push({})\r\n                        }\r\n                        options.notifyProgress(1);\r\n                        d.resolve(viewHeaderItems)\r\n                    })\r\n                })\r\n            });\r\n            return d\r\n        };\r\n\r\n        function createHeaderItem(childrenStack, depth, index) {\r\n            var parent = childrenStack[depth] = childrenStack[depth] || [],\r\n                node = parent[index] = {};\r\n            if (childrenStack[depth + 1]) {\r\n                node.children = childrenStack[depth + 1];\r\n                for (var i = depth + 1; i < childrenStack.length; i++) {\r\n                    childrenStack[i] = void 0\r\n                }\r\n                childrenStack.length = depth + 1\r\n            }\r\n            return node\r\n        }\r\n\r\n        function createViewHeaderItems(headerItems, headerDescriptions) {\r\n            var headerItem, headerDescriptionsCount = headerDescriptions && headerDescriptions.length || 0,\r\n                childrenStack = [],\r\n                d = new Deferred;\r\n            when(foreachTreeAsync(headerItems, function(items, index) {\r\n                var item = items[0],\r\n                    path = createPath(items);\r\n                headerItem = createHeaderItem(childrenStack, path.length, index);\r\n                headerItem.type = DATA_TYPE;\r\n                headerItem.value = item.value;\r\n                headerItem.path = path;\r\n                headerItem.text = item.text;\r\n                headerItem.index = item.index;\r\n                headerItem.displayText = item.displayText;\r\n                headerItem.key = item.key;\r\n                headerItem.isEmpty = item.isEmpty;\r\n                if (path.length < headerDescriptionsCount && (!item.children || 0 !== item.children.length)) {\r\n                    headerItem.expanded = !!item.children\r\n                }\r\n            })).done(function() {\r\n                d.resolve(createHeaderItem(childrenStack, 0, 0).children || [])\r\n            });\r\n            return d\r\n        }\r\n        var addMetricHeaderItems = function(headerItems, cellDescriptions, options) {\r\n            foreachTree(headerItems, function(items) {\r\n                var i, item = items[0];\r\n                if (!item.children || 0 === item.children.length) {\r\n                    item.children = [];\r\n                    for (i = 0; i < cellDescriptions.length; i++) {\r\n                        var isGrandTotal = item.type === GRAND_TOTAL_TYPE,\r\n                            isTotal = item.type === TOTAL_TYPE,\r\n                            isValue = item.type === DATA_TYPE,\r\n                            columnIsHidden = false === cellDescriptions[i].visible || isGrandTotal && inArray(i, options.hiddenGrandTotals) !== -1 || isTotal && inArray(i, options.hiddenTotals) !== -1 || isValue && inArray(i, options.hiddenValues) !== -1;\r\n                        if (columnIsHidden) {\r\n                            continue\r\n                        }\r\n                        item.children.push({\r\n                            caption: cellDescriptions[i].caption,\r\n                            path: item.path,\r\n                            type: item.type,\r\n                            value: i,\r\n                            index: item.index,\r\n                            dataIndex: i,\r\n                            isMetric: true,\r\n                            isEmpty: item.isEmpty && item.isEmpty[i]\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        };\r\n        var addAdditionalTotalHeaderItems = function(headerItems, headerDescriptions, showTotalsPrior, isTree) {\r\n            showTotalsPrior = showTotalsPrior || isTree;\r\n            foreachTree(headerItems, function(items, index) {\r\n                var item = items[0],\r\n                    parentChildren = (items[1] ? items[1].children : headerItems) || [],\r\n                    dataField = headerDescriptions[items.length - 1];\r\n                if (item.type === DATA_TYPE && item.expanded && (false !== dataField.showTotals || isTree)) {\r\n                    index !== -1 && parentChildren.splice(showTotalsPrior ? index : index + 1, 0, extend({}, item, {\r\n                        children: null,\r\n                        type: TOTAL_TYPE,\r\n                        expanded: showTotalsPrior ? true : null,\r\n                        isAdditionalTotal: true\r\n                    }));\r\n                    if (showTotalsPrior) {\r\n                        item.expanded = null\r\n                    }\r\n                }\r\n            })\r\n        };\r\n        var removeEmptyParent = function removeEmptyParent(items, index) {\r\n            var parent = items[index + 1];\r\n            if (!items[index].children.length && parent && parent.children) {\r\n                parent.children.splice(inArray(items[index], parent.children), 1);\r\n                removeEmptyParent(items, index + 1)\r\n            }\r\n        };\r\n        var removeHiddenItems = function(headerItems) {\r\n            foreachTree([{\r\n                children: headerItems\r\n            }], function(items, index) {\r\n                var item = items[0],\r\n                    parentChildren = (items[1] ? items[1].children : headerItems) || [],\r\n                    isEmpty = item.isEmpty;\r\n                if (isEmpty && isEmpty.length) {\r\n                    isEmpty = item.isEmpty.filter(function(isEmpty) {\r\n                        return isEmpty\r\n                    }).length === isEmpty.length\r\n                }\r\n                if (item && !item.children && isEmpty) {\r\n                    parentChildren.splice(index, 1);\r\n                    removeEmptyParent(items, 1)\r\n                }\r\n            })\r\n        };\r\n        var fillHeaderInfo = function(info, viewHeaderItems, depthSize, isHorizontal, isTree) {\r\n            var index, depth, lastIndex = 0,\r\n                indexesByDepth = [0];\r\n            foreachTree(viewHeaderItems, function(items) {\r\n                var headerItem = items[0];\r\n                depth = headerItem.isMetric ? depthSize : items.length - 1;\r\n                while (indexesByDepth.length - 1 < depth) {\r\n                    indexesByDepth.push(indexesByDepth[indexesByDepth.length - 1])\r\n                }\r\n                index = indexesByDepth[depth] || 0;\r\n                lastIndex = addInfoItem(info, {\r\n                    headerItem: headerItem,\r\n                    index: index,\r\n                    lastIndex: lastIndex,\r\n                    depth: depth,\r\n                    isHorizontal: isHorizontal,\r\n                    isTree: isTree\r\n                });\r\n                indexesByDepth.length = depth;\r\n                indexesByDepth.push(lastIndex)\r\n            })\r\n        };\r\n        return function(headerItems, headerDescriptions, cellDescriptions, isHorizontal, options) {\r\n            var info = [],\r\n                depthSize = getHeaderItemsDepth(headerItems) || 1,\r\n                d = new Deferred;\r\n            getViewHeaderItems(headerItems, headerDescriptions, cellDescriptions, depthSize, options).done(function(viewHeaderItems) {\r\n                fillHeaderInfo(info, viewHeaderItems, depthSize, isHorizontal, \"tree\" === options.layout);\r\n                options.notifyProgress(1);\r\n                d.resolve(info)\r\n            });\r\n            return d\r\n        }\r\n    }();\r\n\r\n    function createSortPaths(headerFields, dataFields) {\r\n        var sortBySummaryPaths = [];\r\n        iteratorUtils.each(headerFields, function(index, headerField) {\r\n            var fieldIndex = pivotGridUtils.findField(dataFields, headerField.sortBySummaryField);\r\n            if (fieldIndex >= 0) {\r\n                sortBySummaryPaths.push((headerField.sortBySummaryPath || []).concat([fieldIndex]))\r\n            }\r\n        });\r\n        return sortBySummaryPaths\r\n    }\r\n\r\n    function foreachRowInfo(rowsInfo, callback) {\r\n        var columnOffset = 0,\r\n            columnOffsetResetIndexes = [];\r\n        for (var i = 0; i < rowsInfo.length; i++) {\r\n            for (var j = 0; j < rowsInfo[i].length; j++) {\r\n                var rowSpanOffset = (rowsInfo[i][j].rowspan || 1) - 1,\r\n                    visibleIndex = i + rowSpanOffset;\r\n                if (columnOffsetResetIndexes[i]) {\r\n                    columnOffset -= columnOffsetResetIndexes[i];\r\n                    columnOffsetResetIndexes[i] = 0\r\n                }\r\n                if (false === callback(rowsInfo[i][j], visibleIndex, i, j, columnOffset)) {\r\n                    break\r\n                }\r\n                columnOffsetResetIndexes[i + (rowsInfo[i][j].rowspan || 1)] = (columnOffsetResetIndexes[i + (rowsInfo[i][j].rowspan || 1)] || 0) + 1;\r\n                columnOffset++\r\n            }\r\n        }\r\n    }\r\n\r\n    function createCellsInfo(rowsInfo, columnsInfo, data, dataFields, dataFieldArea, errorText) {\r\n        var info = [],\r\n            dataFieldAreaInRows = \"row\" === dataFieldArea,\r\n            dataSourceCells = data.values;\r\n        dataSourceCells.length && foreachRowInfo(rowsInfo, function(rowInfo, rowIndex) {\r\n            var row = info[rowIndex] = [],\r\n                dataRow = dataSourceCells[rowInfo.dataSourceIndex >= 0 ? rowInfo.dataSourceIndex : data.grandTotalRowIndex] || [];\r\n            rowInfo.isLast && virtualColumnsCore.foreachColumnInfo(columnsInfo, function(columnInfo, columnIndex) {\r\n                var dataIndex = (dataFieldAreaInRows ? rowInfo.dataIndex : columnInfo.dataIndex) || 0,\r\n                    dataField = dataFields[dataIndex];\r\n                if (columnInfo.isLast && dataField) {\r\n                    var cellValue, cell = dataRow[columnInfo.dataSourceIndex >= 0 ? columnInfo.dataSourceIndex : data.grandTotalColumnIndex];\r\n                    if (!Array.isArray(cell)) {\r\n                        cell = [cell]\r\n                    }\r\n                    cellValue = cell[dataIndex];\r\n                    row[columnIndex] = {\r\n                        text: formatCellValue(cellValue, dataField, errorText),\r\n                        value: cellValue,\r\n                        format: dataField.format,\r\n                        dataType: dataField.dataType,\r\n                        columnType: columnInfo.type,\r\n                        rowType: rowInfo.type,\r\n                        rowPath: rowInfo.path || [],\r\n                        columnPath: columnInfo.path || [],\r\n                        dataIndex: dataIndex\r\n                    };\r\n                    if (dataField.width) {\r\n                        row[columnIndex].width = dataField.width\r\n                    }\r\n                }\r\n            })\r\n        });\r\n        return info\r\n    }\r\n\r\n    function getHeaderIndexedItems(headerItems, options) {\r\n        var visibleIndex = 0,\r\n            indexedItems = [];\r\n        foreachTree(headerItems, function(items) {\r\n            var headerItem = items[0],\r\n                path = createPath(items);\r\n            if (headerItem.children && false === options.showTotals) {\r\n                return\r\n            }\r\n            var indexedItem = extend(true, {}, headerItem, {\r\n                visibleIndex: visibleIndex++,\r\n                path: path\r\n            });\r\n            if (typeUtils.isDefined(indexedItem.index)) {\r\n                indexedItems[indexedItem.index] = indexedItem\r\n            } else {\r\n                indexedItems.push(indexedItem)\r\n            }\r\n        });\r\n        return indexedItems\r\n    }\r\n\r\n    function createScrollController(dataController, component, dataAdapter) {\r\n        if (component && \"virtual\" === component.option(\"scrolling.mode\")) {\r\n            return new virtualScrolling.VirtualScrollController(component, extend({\r\n                hasKnownLastPage: function() {\r\n                    return true\r\n                },\r\n                pageCount: function() {\r\n                    return math.ceil(this.totalItemsCount() / this.pageSize())\r\n                },\r\n                updateLoading: function() {},\r\n                itemsCount: function() {\r\n                    if (this.pageIndex() < this.pageCount() - 1) {\r\n                        return this.pageSize()\r\n                    } else {\r\n                        return this.totalItemsCount() % this.pageSize()\r\n                    }\r\n                },\r\n                items: function() {\r\n                    return []\r\n                },\r\n                viewportItems: function() {\r\n                    return []\r\n                },\r\n                onChanged: function() {},\r\n                isLoading: function() {\r\n                    return dataController.isLoading()\r\n                },\r\n                changingDuration: function() {\r\n                    return dataController._changingDuration || 0\r\n                }\r\n            }, dataAdapter))\r\n        }\r\n    }\r\n\r\n    function getHiddenTotals(dataFields) {\r\n        var result = [];\r\n        iteratorUtils.each(dataFields, function(index, field) {\r\n            if (false === field.showTotals) {\r\n                result.push(index)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n\r\n    function getHiddenValues(dataFields) {\r\n        var result = [];\r\n        dataFields.forEach(function(field, index) {\r\n            if (void 0 === field.showValues && false === field.showTotals || false === field.showValues) {\r\n                result.push(index)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n\r\n    function getHiddenGrandTotalsTotals(dataFields, columnFields) {\r\n        var result = [];\r\n        iteratorUtils.each(dataFields, function(index, field) {\r\n            if (false === field.showGrandTotals) {\r\n                result.push(index)\r\n            }\r\n        });\r\n        if (0 === columnFields.length && result.length === dataFields.length) {\r\n            result = []\r\n        }\r\n        return result\r\n    }\r\n    var members = {\r\n        ctor: function(options) {\r\n            var that = this,\r\n                virtualScrollControllerChanged = that._fireChanged.bind(that);\r\n            options = that._options = options || {};\r\n            that.dataSourceChanged = Callbacks();\r\n            that._dataSource = that._createDataSource(options);\r\n            that._rowsScrollController = createScrollController(that, options.component, {\r\n                totalItemsCount: function() {\r\n                    return that.totalRowCount()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return that.rowPageIndex(index)\r\n                },\r\n                pageSize: function() {\r\n                    return that.rowPageSize()\r\n                },\r\n                load: function() {\r\n                    if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                        that._rowsScrollController.pageIndex(this.pageCount() - 1)\r\n                    }\r\n                    return that._rowsScrollController.handleDataChanged(virtualScrollControllerChanged)\r\n                }\r\n            });\r\n            that._columnsScrollController = createScrollController(that, options.component, {\r\n                totalItemsCount: function() {\r\n                    return that.totalColumnCount()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return that.columnPageIndex(index)\r\n                },\r\n                pageSize: function() {\r\n                    return that.columnPageSize()\r\n                },\r\n                load: function() {\r\n                    if (that._columnsScrollController.pageIndex() >= this.pageCount()) {\r\n                        that._columnsScrollController.pageIndex(this.pageCount() - 1)\r\n                    }\r\n                    return that._columnsScrollController.handleDataChanged(virtualScrollControllerChanged)\r\n                }\r\n            });\r\n            that._stateStoringController = new stateStoring.StateStoringController(options.component).init();\r\n            that._columnsInfo = [];\r\n            that._rowsInfo = [];\r\n            that._cellsInfo = [];\r\n            that.expandValueChanging = Callbacks();\r\n            that.loadingChanged = Callbacks();\r\n            that.progressChanged = Callbacks();\r\n            that.scrollChanged = Callbacks();\r\n            that.load();\r\n            that._update();\r\n            that.changed = Callbacks()\r\n        },\r\n        _fireChanged: function() {\r\n            var that = this,\r\n                startChanging = new Date;\r\n            that.changed && !that._lockChanged && that.changed.fire();\r\n            that._changingDuration = new Date - startChanging\r\n        },\r\n        load: function() {\r\n            var that = this,\r\n                stateStoringController = this._stateStoringController;\r\n            if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {\r\n                stateStoringController.load().always(function(state) {\r\n                    if (state) {\r\n                        that._dataSource.state(state)\r\n                    } else {\r\n                        that._dataSource.load()\r\n                    }\r\n                })\r\n            } else {\r\n                that._dataSource.load()\r\n            }\r\n        },\r\n        calculateVirtualContentParams: function(contentParams) {\r\n            var oldColumnViewportItemSize, oldRowViewportItemSize, newLeftPosition, newTopPosition, that = this,\r\n                rowsScrollController = that._rowsScrollController,\r\n                columnsScrollController = that._columnsScrollController,\r\n                rowViewportItemSize = contentParams.contentHeight / contentParams.rowCount,\r\n                columnViewportItemSize = contentParams.contentWidth / contentParams.columnCount;\r\n            if (rowsScrollController && columnsScrollController) {\r\n                oldColumnViewportItemSize = columnsScrollController.viewportItemSize();\r\n                oldRowViewportItemSize = rowsScrollController.viewportItemSize();\r\n                rowsScrollController.viewportItemSize(rowViewportItemSize);\r\n                columnsScrollController.viewportItemSize(columnViewportItemSize);\r\n                rowsScrollController.viewportSize(contentParams.viewportHeight / rowsScrollController.viewportItemSize());\r\n                rowsScrollController.setContentSize(contentParams.contentHeight);\r\n                columnsScrollController.viewportSize(contentParams.viewportWidth / columnsScrollController.viewportItemSize());\r\n                columnsScrollController.setContentSize(contentParams.contentWidth);\r\n                commonUtils.deferUpdate(function() {\r\n                    columnsScrollController.loadIfNeed();\r\n                    rowsScrollController.loadIfNeed()\r\n                });\r\n                newLeftPosition = columnsScrollController.getViewportPosition() * columnViewportItemSize / oldColumnViewportItemSize;\r\n                newTopPosition = rowsScrollController.getViewportPosition() * rowViewportItemSize / oldRowViewportItemSize;\r\n                that.setViewportPosition(newLeftPosition, newTopPosition);\r\n                that.scrollChanged.fire({\r\n                    left: newLeftPosition,\r\n                    top: newTopPosition\r\n                });\r\n                return {\r\n                    contentTop: rowsScrollController.getContentOffset(),\r\n                    contentLeft: columnsScrollController.getContentOffset(),\r\n                    width: columnsScrollController.getVirtualContentSize(),\r\n                    height: rowsScrollController.getVirtualContentSize()\r\n                }\r\n            }\r\n        },\r\n        setViewportPosition: function(left, top) {\r\n            this._rowsScrollController.setViewportPosition(top || 0);\r\n            this._columnsScrollController.setViewportPosition(left || 0)\r\n        },\r\n        subscribeToWindowScrollEvents: function($element) {\r\n            this._rowsScrollController && this._rowsScrollController.subscribeToWindowScrollEvents($element)\r\n        },\r\n        updateWindowScrollPosition: function(position) {\r\n            this._rowsScrollController && this._rowsScrollController.scrollTo(position)\r\n        },\r\n        updateViewOptions: function(options) {\r\n            extend(this._options, options);\r\n            this._update()\r\n        },\r\n        _handleExpandValueChanging: function(e) {\r\n            this.expandValueChanging.fire(e)\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            this.loadingChanged.fire(isLoading)\r\n        },\r\n        _handleProgressChanged: function(progress) {\r\n            this.progressChanged.fire(progress)\r\n        },\r\n        _handleFieldsPrepared: function(e) {\r\n            this._options.onFieldsPrepared && this._options.onFieldsPrepared(e)\r\n        },\r\n        _createDataSource: function(options) {\r\n            var dataSource, that = this,\r\n                dataSourceOptions = options.dataSource;\r\n            that._isSharedDataSource = dataSourceOptions instanceof PivotGridDataSource;\r\n            if (that._isSharedDataSource) {\r\n                dataSource = dataSourceOptions\r\n            } else {\r\n                dataSource = new PivotGridDataSource(dataSourceOptions)\r\n            }\r\n            that._expandValueChangingHandler = that._handleExpandValueChanging.bind(that);\r\n            that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n            that._progressChangedHandler = function(progress) {\r\n                that._handleProgressChanged(.8 * progress)\r\n            };\r\n            that._fieldsPreparedHandler = that._handleFieldsPrepared.bind(that);\r\n            that._changedHandler = function() {\r\n                that._update();\r\n                that.dataSourceChanged.fire()\r\n            };\r\n            dataSource.on(\"changed\", that._changedHandler);\r\n            dataSource.on(\"expandValueChanging\", that._expandValueChangingHandler);\r\n            dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\r\n            dataSource.on(\"progressChanged\", that._progressChangedHandler);\r\n            dataSource.on(\"fieldsPrepared\", that._fieldsPreparedHandler);\r\n            return dataSource\r\n        },\r\n        getDataSource: function() {\r\n            return this._dataSource\r\n        },\r\n        isLoading: function() {\r\n            return this._dataSource.isLoading()\r\n        },\r\n        beginLoading: function() {\r\n            this._dataSource.beginLoading()\r\n        },\r\n        endLoading: function() {\r\n            this._dataSource.endLoading()\r\n        },\r\n        _update: function() {\r\n            var that = this,\r\n                dataSource = that._dataSource,\r\n                options = that._options,\r\n                columnFields = dataSource.getAreaFields(\"column\"),\r\n                rowFields = dataSource.getAreaFields(\"row\"),\r\n                dataFields = dataSource.getAreaFields(\"data\"),\r\n                dataFieldsForRows = \"row\" === options.dataFieldArea ? dataFields : [],\r\n                dataFieldsForColumns = \"row\" !== options.dataFieldArea ? dataFields : [],\r\n                data = dataSource.getData(),\r\n                hiddenTotals = getHiddenTotals(dataFields),\r\n                hiddenValues = getHiddenValues(dataFields),\r\n                hiddenGrandTotals = getHiddenGrandTotalsTotals(dataFields, columnFields),\r\n                grandTotalsAreHiddenForNotAllDataFields = dataFields.length > 0 ? hiddenGrandTotals.length !== dataFields.length : true,\r\n                notifyProgress = function(progress) {\r\n                    this.progress = progress;\r\n                    that._handleProgressChanged(.8 + .1 * rowOptions.progress + .1 * columnOptions.progress)\r\n                },\r\n                rowOptions = {\r\n                    isEmptyGrandTotal: data.isEmptyGrandTotalRow,\r\n                    texts: options.texts || {},\r\n                    hiddenTotals: hiddenTotals,\r\n                    hiddenValues: hiddenValues,\r\n                    hiddenGrandTotals: [],\r\n                    showTotals: options.showRowTotals,\r\n                    showGrandTotals: false !== options.showRowGrandTotals && grandTotalsAreHiddenForNotAllDataFields,\r\n                    sortBySummaryPaths: createSortPaths(columnFields, dataFields),\r\n                    showTotalsPrior: \"rows\" === options.showTotalsPrior || \"both\" === options.showTotalsPrior,\r\n                    showEmpty: !options.hideEmptySummaryCells,\r\n                    layout: options.rowHeaderLayout,\r\n                    fields: rowFields,\r\n                    dataFields: dataFields,\r\n                    progress: 0,\r\n                    notifyProgress: notifyProgress\r\n                },\r\n                columnOptions = {\r\n                    isEmptyGrandTotal: data.isEmptyGrandTotalColumn,\r\n                    texts: options.texts || {},\r\n                    hiddenTotals: hiddenTotals,\r\n                    hiddenValues: hiddenValues,\r\n                    hiddenGrandTotals: hiddenGrandTotals,\r\n                    showTotals: options.showColumnTotals,\r\n                    showTotalsPrior: \"columns\" === options.showTotalsPrior || \"both\" === options.showTotalsPrior,\r\n                    showGrandTotals: false !== options.showColumnGrandTotals && grandTotalsAreHiddenForNotAllDataFields,\r\n                    sortBySummaryPaths: createSortPaths(rowFields, dataFields),\r\n                    showEmpty: !options.hideEmptySummaryCells,\r\n                    fields: columnFields,\r\n                    dataFields: dataFields,\r\n                    progress: 0,\r\n                    notifyProgress: notifyProgress\r\n                };\r\n            if (!typeUtils.isDefined(data.grandTotalRowIndex)) {\r\n                data.grandTotalRowIndex = getHeaderIndexedItems(data.rows, rowOptions).length\r\n            }\r\n            if (!typeUtils.isDefined(data.grandTotalColumnIndex)) {\r\n                data.grandTotalColumnIndex = getHeaderIndexedItems(data.columns, columnOptions).length\r\n            }\r\n            dataSource._changeLoadingCount(1);\r\n            when(createHeaderInfo(data.columns, columnFields, dataFieldsForColumns, true, columnOptions), createHeaderInfo(data.rows, rowFields, dataFieldsForRows, false, rowOptions)).always(function() {\r\n                dataSource._changeLoadingCount(-1)\r\n            }).done(function(columnsInfo, rowsInfo) {\r\n                that._columnsInfo = columnsInfo;\r\n                that._rowsInfo = rowsInfo;\r\n                if (that._rowsScrollController && that._columnsScrollController && that.changed) {\r\n                    that._rowsScrollController.reset();\r\n                    that._columnsScrollController.reset();\r\n                    that._lockChanged = true;\r\n                    that._rowsScrollController.load();\r\n                    that._columnsScrollController.load();\r\n                    that._lockChanged = false\r\n                }\r\n            }).done(function() {\r\n                that._fireChanged();\r\n                if (that._stateStoringController.isEnabled() && !that._dataSource.isLoading()) {\r\n                    that._stateStoringController.state(that._dataSource.state());\r\n                    that._stateStoringController.save()\r\n                }\r\n            })\r\n        },\r\n        getRowsInfo: function(getAllData) {\r\n            var rowspan, i, that = this,\r\n                rowsInfo = that._rowsInfo,\r\n                scrollController = that._rowsScrollController;\r\n            if (scrollController && !getAllData) {\r\n                var startIndex = scrollController.beginPageIndex() * that.rowPageSize(),\r\n                    endIndex = scrollController.endPageIndex() * that.rowPageSize() + that.rowPageSize(),\r\n                    newRowsInfo = [],\r\n                    maxDepth = 1;\r\n                foreachRowInfo(rowsInfo, function(rowInfo, visibleIndex, rowIndex, _, columnIndex) {\r\n                    var isVisible = visibleIndex >= startIndex && rowIndex < endIndex,\r\n                        index = rowIndex < startIndex ? 0 : rowIndex - startIndex,\r\n                        cell = rowInfo;\r\n                    if (isVisible) {\r\n                        newRowsInfo[index] = newRowsInfo[index] || [];\r\n                        rowspan = rowIndex < startIndex ? rowInfo.rowspan - (startIndex - rowIndex) || 1 : rowInfo.rowspan;\r\n                        if (startIndex + index + rowspan > endIndex) {\r\n                            rowspan = endIndex - (index + startIndex) || 1\r\n                        }\r\n                        if (rowspan !== rowInfo.rowspan) {\r\n                            cell = extend({}, cell, {\r\n                                rowspan: rowspan\r\n                            })\r\n                        }\r\n                        newRowsInfo[index].push(cell);\r\n                        maxDepth = math.max(maxDepth, columnIndex + 1)\r\n                    } else {\r\n                        if (i > endIndex) {\r\n                            return false\r\n                        }\r\n                    }\r\n                });\r\n                foreachRowInfo(newRowsInfo, function(rowInfo, visibleIndex, rowIndex, columnIndex, realColumnIndex) {\r\n                    var colspan = rowInfo.colspan || 1;\r\n                    if (realColumnIndex + colspan > maxDepth) {\r\n                        newRowsInfo[rowIndex][columnIndex] = extend({}, rowInfo, {\r\n                            colspan: maxDepth - realColumnIndex || 1\r\n                        })\r\n                    }\r\n                });\r\n                return newRowsInfo\r\n            }\r\n            return rowsInfo\r\n        },\r\n        getColumnsInfo: function(getAllData) {\r\n            var that = this,\r\n                info = that._columnsInfo,\r\n                scrollController = that._columnsScrollController;\r\n            if (scrollController && !getAllData) {\r\n                var startIndex = scrollController.beginPageIndex() * that.columnPageSize(),\r\n                    endIndex = scrollController.endPageIndex() * that.columnPageSize() + that.columnPageSize();\r\n                info = virtualColumnsCore.createColumnsInfo(info, startIndex, endIndex)\r\n            }\r\n            return info\r\n        },\r\n        totalRowCount: function() {\r\n            return this._rowsInfo.length\r\n        },\r\n        rowPageIndex: function(index) {\r\n            if (void 0 !== index) {\r\n                this._rowPageIndex = index\r\n            }\r\n            return this._rowPageIndex || 0\r\n        },\r\n        totalColumnCount: function() {\r\n            var count = 0;\r\n            if (this._columnsInfo && this._columnsInfo.length) {\r\n                for (var i = 0; i < this._columnsInfo[0].length; i++) {\r\n                    count += this._columnsInfo[0][i].colspan || 1\r\n                }\r\n            }\r\n            return count\r\n        },\r\n        rowPageSize: function(size) {\r\n            if (void 0 !== size) {\r\n                this._rowPageSize = size\r\n            }\r\n            return this._rowPageSize || 20\r\n        },\r\n        columnPageSize: function(size) {\r\n            if (void 0 !== size) {\r\n                this._columnPageSize = size\r\n            }\r\n            return this._columnPageSize || 20\r\n        },\r\n        columnPageIndex: function(index) {\r\n            if (void 0 !== index) {\r\n                this._columnPageIndex = index\r\n            }\r\n            return this._columnPageIndex || 0\r\n        },\r\n        getCellsInfo: function(getAllData) {\r\n            var rowsInfo = this.getRowsInfo(getAllData),\r\n                columnsInfo = this.getColumnsInfo(getAllData),\r\n                data = this._dataSource.getData(),\r\n                texts = this._options.texts || {};\r\n            return createCellsInfo(rowsInfo, columnsInfo, data, this._dataSource.getAreaFields(\"data\"), this._options.dataFieldArea, texts.dataNotAvailable)\r\n        },\r\n        dispose: function() {\r\n            var that = this;\r\n            if (that._isSharedDataSource) {\r\n                that._dataSource.off(\"changed\", that._changedHandler);\r\n                that._dataSource.off(\"expandValueChanging\", that._expandValueChangingHandler);\r\n                that._dataSource.off(\"loadingChanged\", that._loadingChangedHandler);\r\n                that._dataSource.off(\"progressChanged\", that._progressChangedHandler)\r\n            } else {\r\n                that._dataSource.dispose()\r\n            }\r\n            that._columnsScrollController && that._columnsScrollController.dispose();\r\n            that._rowsScrollController && that._rowsScrollController.dispose();\r\n            that._stateStoringController.dispose();\r\n            that.expandValueChanging.empty();\r\n            that.changed.empty();\r\n            that.loadingChanged.empty();\r\n            that.progressChanged.empty();\r\n            that.scrollChanged.empty();\r\n            that.dataSourceChanged.empty()\r\n        }\r\n    };\r\n    proxyMethod(members, \"applyPartialDataSource\");\r\n    proxyMethod(members, \"collapseHeaderItem\");\r\n    proxyMethod(members, \"expandHeaderItem\");\r\n    proxyMethod(members, \"getData\");\r\n    proxyMethod(members, \"isEmpty\");\r\n    return members\r\n}());\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.export.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar Class = require(\"../../core/class\"),\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    formatHelper = require(\"../../format_helper\"),\r\n    numberLocalization = require(\"../../localization/number\"),\r\n    clientExporter = require(\"../../exporter\"),\r\n    excelExporter = clientExporter.excel,\r\n    DEFAULT_DATA_TYPE = \"string\",\r\n    exportMixin = require(\"../grid_core/ui.grid_core.export_mixin\"),\r\n    deferredUtils = require(\"../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred,\r\n    COLUMN_HEADER_STYLE_ID = 0,\r\n    ROW_HEADER_STYLE_ID = 1,\r\n    DATA_STYLE_OFFSET = 2,\r\n    DEFAUL_COLUMN_WIDTH = 100;\r\nexports.ExportMixin = extend({}, exportMixin, {\r\n    exportToExcel: function() {\r\n        var that = this;\r\n        clientExporter.export(that.getDataProvider(), {\r\n            fileName: that.option(\"export.fileName\"),\r\n            proxyUrl: that.option(\"export.proxyUrl\"),\r\n            format: \"EXCEL\",\r\n            rtlEnabled: that.option(\"rtlEnabled\"),\r\n            ignoreErrors: that.option(\"export.ignoreExcelErrors\"),\r\n            exportingAction: that._actions.onExporting,\r\n            exportedAction: that._actions.onExported,\r\n            fileSavingAction: that._actions.onFileSaving\r\n        }, excelExporter.getData)\r\n    },\r\n    _getLength: function(items) {\r\n        var i, itemCount = items[0].length,\r\n            cellCount = 0;\r\n        for (i = 0; i < itemCount; i++) {\r\n            cellCount += items[0][i].colspan || 1\r\n        }\r\n        return cellCount\r\n    },\r\n    _getAllItems: function(columnsInfo, rowsInfoItems, cellsInfo) {\r\n        var cellIndex, rowIndex, sourceItems = columnsInfo.concat(cellsInfo),\r\n            rowsLength = this._getLength(rowsInfoItems),\r\n            headerRowsCount = columnsInfo.length;\r\n        for (rowIndex = 0; rowIndex < rowsInfoItems.length; rowIndex++) {\r\n            for (cellIndex = rowsInfoItems[rowIndex].length - 1; cellIndex >= 0; cellIndex--) {\r\n                if (!isDefined(sourceItems[rowIndex + headerRowsCount])) {\r\n                    sourceItems[rowIndex + headerRowsCount] = []\r\n                }\r\n                sourceItems[rowIndex + headerRowsCount].splice(0, 0, extend({}, rowsInfoItems[rowIndex][cellIndex]))\r\n            }\r\n        }\r\n        sourceItems[0].splice(0, 0, extend({}, this._getEmptyCell(), {\r\n            alignment: this._options.rtlEnabled ? \"right\" : \"left\",\r\n            colspan: rowsLength,\r\n            rowspan: headerRowsCount\r\n        }));\r\n        return this._prepareItems(sourceItems)\r\n    },\r\n    getDataProvider: function() {\r\n        var that = this,\r\n            dataController = this._dataController,\r\n            items = new Deferred;\r\n        dataController.beginLoading();\r\n        setTimeout(function() {\r\n            var columnsInfo = extend(true, [], dataController.getColumnsInfo(true)),\r\n                rowsInfoItems = extend(true, [], dataController.getRowsInfo(true)),\r\n                cellsInfo = dataController.getCellsInfo(true);\r\n            items.resolve(that._getAllItems(columnsInfo, rowsInfoItems, cellsInfo));\r\n            dataController.endLoading()\r\n        });\r\n        return new exports.DataProvider({\r\n            items: items,\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            dataFields: this.getDataSource().getAreaFields(\"data\"),\r\n            customizeExcelCell: this.option(\"export.customizeExcelCell\")\r\n        })\r\n    }\r\n});\r\n\r\nfunction getCellDataType(field) {\r\n    if (field && field.customizeText) {\r\n        return \"string\"\r\n    }\r\n    if (field.dataType) {\r\n        return field.dataType\r\n    }\r\n    if (field.format) {\r\n        if (1 === numberLocalization.parse(formatHelper.format(1, field.format))) {\r\n            return \"number\"\r\n        }\r\n        if (formatHelper.format(new Date, field.format)) {\r\n            return \"date\"\r\n        }\r\n    }\r\n    return DEFAULT_DATA_TYPE\r\n}\r\nexports.DataProvider = Class.inherit({\r\n    ctor: function(options) {\r\n        this._options = options;\r\n        this._styles = []\r\n    },\r\n    ready: function() {\r\n        var that = this,\r\n            options = that._options,\r\n            dataFields = options.dataFields;\r\n        return when(options.items).done(function(items) {\r\n            var headerSize = items[0][0].rowspan,\r\n                columns = items[headerSize - 1],\r\n                dataItemStyle = {\r\n                    alignment: options.rtlEnabled ? \"left\" : \"right\"\r\n                };\r\n            that._styles = [{\r\n                alignment: \"center\",\r\n                dataType: \"string\"\r\n            }, {\r\n                alignment: options.rtlEnabled ? \"right\" : \"left\",\r\n                dataType: \"string\"\r\n            }];\r\n            if (dataFields.length) {\r\n                dataFields.forEach(function(dataField) {\r\n                    that._styles.push(extend({}, dataItemStyle, {\r\n                        format: dataField.format,\r\n                        dataType: getCellDataType(dataField)\r\n                    }))\r\n                })\r\n            } else {\r\n                that._styles.push(dataItemStyle)\r\n            }\r\n            each(columns, function(columnIndex, column) {\r\n                column.width = DEFAUL_COLUMN_WIDTH\r\n            });\r\n            options.columns = columns;\r\n            options.items = items\r\n        })\r\n    },\r\n    getColumns: function() {\r\n        return this._options.columns\r\n    },\r\n    getRowsCount: function() {\r\n        return this._options.items.length\r\n    },\r\n    getGroupLevel: function() {\r\n        return 0\r\n    },\r\n    getCellMerging: function(rowIndex, cellIndex) {\r\n        var items = this._options.items,\r\n            item = items[rowIndex] && items[rowIndex][cellIndex];\r\n        return item ? {\r\n            colspan: item.colspan - 1,\r\n            rowspan: item.rowspan - 1\r\n        } : {\r\n            colspan: 0,\r\n            rowspan: 0\r\n        }\r\n    },\r\n    getFrozenArea: function() {\r\n        var items = this._options.items;\r\n        return {\r\n            x: items[0][0].colspan,\r\n            y: items[0][0].rowspan\r\n        }\r\n    },\r\n    getCellType: function(rowIndex, cellIndex) {\r\n        var style = this._styles[this.getStyleId(rowIndex, cellIndex)];\r\n        return style && style.dataType || \"string\"\r\n    },\r\n    getCellData: function(rowIndex, cellIndex) {\r\n        var result = {};\r\n        var items = this._options.items,\r\n            item = items[rowIndex] && items[rowIndex][cellIndex] || {};\r\n        if (\"string\" === this.getCellType(rowIndex, cellIndex)) {\r\n            result.value = item.text\r\n        } else {\r\n            result.value = item.value\r\n        }\r\n        return result\r\n    },\r\n    getStyles: function() {\r\n        return this._styles\r\n    },\r\n    getStyleId: function(rowIndex, cellIndex) {\r\n        var items = this._options.items,\r\n            columnHeaderSize = items[0][0].rowspan,\r\n            rowHeaderSize = items[0][0].colspan,\r\n            item = items[rowIndex] && items[rowIndex][cellIndex] || {};\r\n        if (0 === cellIndex && 0 === rowIndex) {\r\n            return COLUMN_HEADER_STYLE_ID\r\n        } else {\r\n            if (cellIndex >= rowHeaderSize && rowIndex < columnHeaderSize) {\r\n                return COLUMN_HEADER_STYLE_ID\r\n            } else {\r\n                if (rowIndex >= columnHeaderSize && cellIndex < rowHeaderSize) {\r\n                    return ROW_HEADER_STYLE_ID\r\n                }\r\n            }\r\n        }\r\n        return DATA_STYLE_OFFSET + (item.dataIndex || 0)\r\n    },\r\n    hasCustomizeExcelCell: function() {\r\n        return isDefined(this._options.customizeExcelCell)\r\n    },\r\n    customizeExcelCell: function(e) {\r\n        if (this._options.customizeExcelCell) {\r\n            this._options.customizeExcelCell(e)\r\n        }\r\n    }\r\n});\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.field_chooser.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    iconUtils = require(\"../../core/utils/icon\"),\r\n    hasWindow = require(\"../../core/utils/window\").hasWindow(),\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    iteratorUtils = require(\"../../core/utils/iterator\"),\r\n    messageLocalization = require(\"../../localization/message\"),\r\n    registerComponent = require(\"../../core/component_registrator\"),\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    TreeView = require(\"../tree_view\"),\r\n    ContextMenu = require(\"../context_menu\"),\r\n    BaseFieldChooser = require(\"./ui.pivot_grid.field_chooser_base\"),\r\n    inArray = inArray,\r\n    each = iteratorUtils.each,\r\n    DIV = \"<div>\";\r\nrequire(\"./data_source\");\r\nvar FIELDCHOOSER_CLASS = \"dx-pivotgridfieldchooser\",\r\n    FIELDCHOOSER_CONTAINER_CLASS = \"dx-pivotgridfieldchooser-container\",\r\n    FIELDS_CONTAINER_CLASS = \"dx-pivotgrid-fields-container\",\r\n    AREA_DRAG_CLASS = \"dx-pivotgrid-drag-action\";\r\n\r\nfunction getDimensionFields(item, fields) {\r\n    var result = [];\r\n    if (item.items) {\r\n        for (var i = 0; i < item.items.length; i++) {\r\n            result.push.apply(result, getDimensionFields(item.items[i], fields))\r\n        }\r\n    } else {\r\n        if (isDefined(item.index)) {\r\n            result.push(fields[item.index])\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getFirstItem(item, condition) {\r\n    if (item.items) {\r\n        for (var i = 0; i < item.items.length; i++) {\r\n            var childrenItem = getFirstItem(item.items[i], condition);\r\n            if (childrenItem) {\r\n                return childrenItem\r\n            }\r\n        }\r\n    }\r\n    if (condition(item)) {\r\n        return item\r\n    }\r\n}\r\nvar compareOrder = [function(a, b) {\r\n    var aValue = -!!a.isMeasure,\r\n        bValue = +!!b.isMeasure;\r\n    return aValue + bValue\r\n}, function(a, b) {\r\n    var aValue = -!!(a.items && a.items.length),\r\n        bValue = +!!(b.items && b.items.length);\r\n    return aValue + bValue\r\n}, function(a, b) {\r\n    var aValue = +!!(a.field && a.field.levels && a.field.levels.length),\r\n        bValue = -!!(b.field && b.field.levels && b.field.levels.length);\r\n    return aValue + bValue\r\n}, pivotGridUtils.getCompareFunction(function(item) {\r\n    return item.text\r\n})];\r\n\r\nfunction compareItems(a, b) {\r\n    var result = 0,\r\n        i = 0;\r\n    while (!result && compareOrder[i]) {\r\n        result = compareOrder[i++](a, b)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getScrollable(container) {\r\n    return container.find(\".dx-scrollable\").dxScrollable(\"instance\")\r\n}\r\nvar FieldChooser = BaseFieldChooser.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            height: 400,\r\n            layout: 0,\r\n            dataSource: null,\r\n            onContextMenuPreparing: null,\r\n            allowSearch: false,\r\n            searchTimeout: 500,\r\n            texts: {\r\n                columnFields: messageLocalization.format(\"dxPivotGrid-columnFields\"),\r\n                rowFields: messageLocalization.format(\"dxPivotGrid-rowFields\"),\r\n                dataFields: messageLocalization.format(\"dxPivotGrid-dataFields\"),\r\n                filterFields: messageLocalization.format(\"dxPivotGrid-filterFields\"),\r\n                allFields: messageLocalization.format(\"dxPivotGrid-allFields\")\r\n            }\r\n        })\r\n    },\r\n    _refreshDataSource: function() {\r\n        var that = this;\r\n        that._expandedPaths = [];\r\n        that._changedHandler = that._changedHandler || function() {\r\n            each(that._dataChangedHandlers, function(_, func) {\r\n                func()\r\n            });\r\n            that._fireContentReadyAction();\r\n            that._skipStateChange = true;\r\n            that.option(\"state\", that._dataSource.state());\r\n            that._skipStateChange = false\r\n        };\r\n        if (that._dataSource) {\r\n            that._dataSource.off(\"changed\", that._changedHandler);\r\n            that._dataSource = void 0\r\n        }\r\n        that.callBase();\r\n        that._dataSource && that._dataSource.on(\"changed\", that._changedHandler)\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._refreshDataSource();\r\n        this._dataChangedHandlers = [];\r\n        this._initActions()\r\n    },\r\n    _initActions: function() {\r\n        this._actions = {\r\n            onContextMenuPreparing: this._createActionByOption(\"onContextMenuPreparing\")\r\n        }\r\n    },\r\n    _trigger: function(eventName, eventArg) {\r\n        this._actions[eventName](eventArg)\r\n    },\r\n    _setOptionsByReference: function() {\r\n        this.callBase();\r\n        extend(this._optionsByReference, {\r\n            dataSource: true\r\n        })\r\n    },\r\n    _optionChanged: function(args) {\r\n        var that = this;\r\n        switch (args.name) {\r\n            case \"dataSource\":\r\n                that._refreshDataSource();\r\n                that._invalidate();\r\n                break;\r\n            case \"layout\":\r\n            case \"texts\":\r\n            case \"allowSearch\":\r\n            case \"searchTimeout\":\r\n                that._invalidate();\r\n                break;\r\n            case \"onContextMenuPreparing\":\r\n                that._actions[args.name] = that._createActionByOption(args.name);\r\n                break;\r\n            default:\r\n                that.callBase(args)\r\n        }\r\n    },\r\n    _clean: function(skipStateSetting) {\r\n        !skipStateSetting && this._dataSource && this.option(\"state\", this._dataSource.state());\r\n        this.$element().children(\".\" + FIELDCHOOSER_CONTAINER_CLASS).remove()\r\n    },\r\n    _renderLayout0: function($container) {\r\n        var $col1, $col2, $col3, $col4, $row1, $row2, that = this;\r\n        $container.addClass(\"dx-layout-0\");\r\n        $row1 = $(DIV).addClass(\"dx-row\").appendTo($container);\r\n        $row2 = $(DIV).addClass(\"dx-row\").appendTo($container);\r\n        $col1 = $(DIV).addClass(\"dx-col\").appendTo($row1);\r\n        $col2 = $(DIV).addClass(\"dx-col\").appendTo($row1);\r\n        $col3 = $(DIV).addClass(\"dx-col\").appendTo($row2);\r\n        $col4 = $(DIV).addClass(\"dx-col\").appendTo($row2);\r\n        that._renderArea($col1, \"all\");\r\n        that._renderArea($col2, \"row\");\r\n        that._renderArea($col2, \"column\");\r\n        that._renderArea($col3, \"filter\");\r\n        that._renderArea($col4, \"data\")\r\n    },\r\n    _renderLayout1: function($container) {\r\n        var $col1, $col2, that = this;\r\n        $col1 = $(DIV).addClass(\"dx-col\").appendTo($container);\r\n        $col2 = $(DIV).addClass(\"dx-col\").appendTo($container);\r\n        that._renderArea($col1, \"all\");\r\n        that._renderArea($col2, \"filter\");\r\n        that._renderArea($col2, \"row\");\r\n        that._renderArea($col2, \"column\");\r\n        that._renderArea($col2, \"data\")\r\n    },\r\n    _renderLayout2: function($container) {\r\n        var $col1, $col2, $row1, $row2, that = this;\r\n        $container.addClass(\"dx-layout-2\");\r\n        $row1 = $(DIV).addClass(\"dx-row\").appendTo($container);\r\n        that._renderArea($row1, \"all\");\r\n        $row2 = $(DIV).addClass(\"dx-row\").appendTo($container);\r\n        $col1 = $(DIV).addClass(\"dx-col\").appendTo($row2);\r\n        $col2 = $(DIV).addClass(\"dx-col\").appendTo($row2);\r\n        that._renderArea($col1, \"filter\");\r\n        that._renderArea($col1, \"row\");\r\n        that._renderArea($col2, \"column\");\r\n        that._renderArea($col2, \"data\")\r\n    },\r\n    _initMarkup: function() {\r\n        var that = this,\r\n            $element = this.$element(),\r\n            $container = $(DIV).addClass(FIELDCHOOSER_CONTAINER_CLASS).appendTo($element),\r\n            layout = that.option(\"layout\");\r\n        that.callBase();\r\n        $element.addClass(FIELDCHOOSER_CLASS).addClass(FIELDS_CONTAINER_CLASS);\r\n        that._dataChangedHandlers = [];\r\n        if (0 === layout) {\r\n            that._renderLayout0($container)\r\n        } else {\r\n            if (1 === layout) {\r\n                that._renderLayout1($container)\r\n            } else {\r\n                that._renderLayout2($container)\r\n            }\r\n        }\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.callBase();\r\n        this.renderSortable();\r\n        this._renderContextMenu();\r\n        this.updateDimensions()\r\n    },\r\n    _fireContentReadyAction: function() {\r\n        if (!this._dataSource || !this._dataSource.isLoading()) {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _getContextMenuArgs: function(dxEvent) {\r\n        var field, area, targetFieldElement = $(dxEvent.target).closest(\".dx-area-field\"),\r\n            targetGroupElement = $(dxEvent.target).closest(\".dx-area-fields\");\r\n        if (targetFieldElement.length) {\r\n            field = targetFieldElement.data(\"field\")\r\n        }\r\n        if (targetGroupElement.length) {\r\n            area = targetGroupElement.attr(\"group\")\r\n        }\r\n        return {\r\n            event: dxEvent,\r\n            field: field,\r\n            area: area,\r\n            items: []\r\n        }\r\n    },\r\n    _renderContextMenu: function() {\r\n        var that = this,\r\n            $container = that.$element();\r\n        if (that._contextMenu) {\r\n            that._contextMenu.$element().remove()\r\n        }\r\n        that._contextMenu = that._createComponent($(DIV).appendTo($container), ContextMenu, {\r\n            onPositioning: function(actionArgs) {\r\n                var args, event = actionArgs.event;\r\n                if (!event) {\r\n                    return\r\n                }\r\n                args = that._getContextMenuArgs(event);\r\n                that._trigger(\"onContextMenuPreparing\", args);\r\n                if (args.items && args.items.length) {\r\n                    actionArgs.component.option(\"items\", args.items)\r\n                } else {\r\n                    actionArgs.cancel = true\r\n                }\r\n            },\r\n            target: $container,\r\n            onItemClick: function(params) {\r\n                params.itemData.onItemClick && params.itemData.onItemClick(params)\r\n            },\r\n            cssClass: \"dx-pivotgridfieldchooser-context-menu\"\r\n        })\r\n    },\r\n    _createTreeItems: function(fields, groupFieldNames, path) {\r\n        var isMeasure, that = this,\r\n            resultItems = [],\r\n            groupedItems = [],\r\n            groupFieldName = groupFieldNames[0],\r\n            fieldsByGroup = {};\r\n        if (!groupFieldName) {\r\n            each(fields, function(index, field) {\r\n                var icon;\r\n                if (true === field.isMeasure) {\r\n                    icon = \"measure\"\r\n                }\r\n                if (false === field.isMeasure) {\r\n                    icon = field.groupName ? \"hierarchy\" : \"dimension\"\r\n                }\r\n                resultItems.push({\r\n                    index: field.index,\r\n                    field: field,\r\n                    key: field.dataField,\r\n                    selected: isDefined(field.area),\r\n                    text: field.caption || field.dataField,\r\n                    icon: icon,\r\n                    isMeasure: field.isMeasure,\r\n                    isDefault: field.isDefault\r\n                })\r\n            })\r\n        } else {\r\n            each(fields, function(index, field) {\r\n                var groupName = field[groupFieldName] || \"\";\r\n                fieldsByGroup[groupName] = fieldsByGroup[groupName] || [];\r\n                fieldsByGroup[groupName].push(field);\r\n                if (void 0 === isMeasure) {\r\n                    isMeasure = true\r\n                }\r\n                isMeasure = isMeasure && true === field.isMeasure\r\n            });\r\n            each(fieldsByGroup, function(groupName, fields) {\r\n                var currentPath = path ? path + \".\" + groupName : groupName;\r\n                var items = that._createTreeItems(fields, groupFieldNames.slice(1), currentPath);\r\n                if (groupName) {\r\n                    groupedItems.push({\r\n                        key: groupName,\r\n                        text: groupName,\r\n                        path: currentPath,\r\n                        isMeasure: items.isMeasure,\r\n                        expanded: inArray(currentPath, that._expandedPaths) >= 0,\r\n                        items: items\r\n                    })\r\n                } else {\r\n                    resultItems = items\r\n                }\r\n            });\r\n            resultItems = groupedItems.concat(resultItems);\r\n            resultItems.isMeasure = isMeasure\r\n        }\r\n        return resultItems\r\n    },\r\n    _createFieldsDataSource: function(dataSource) {\r\n        var treeItems, fields = dataSource && dataSource.fields() || [];\r\n        fields = fields.filter(function(field) {\r\n            return false !== field.visible && !isDefined(field.groupIndex)\r\n        });\r\n        treeItems = this._createTreeItems(fields, [\"dimension\", \"displayFolder\"]);\r\n        pivotGridUtils.foreachDataLevel(treeItems, function(items) {\r\n            items.sort(compareItems)\r\n        }, 0, \"items\");\r\n        return treeItems\r\n    },\r\n    _renderFieldsTreeView: function(container) {\r\n        var that = this,\r\n            dataSource = that._dataSource,\r\n            treeView = that._createComponent(container, TreeView, {\r\n                dataSource: that._createFieldsDataSource(dataSource),\r\n                showCheckBoxesMode: \"normal\",\r\n                searchEnabled: that.option(\"allowSearch\"),\r\n                searchTimeout: that.option(\"searchTimeout\"),\r\n                itemTemplate: function(itemData, itemIndex, itemElement) {\r\n                    if (itemData.icon) {\r\n                        iconUtils.getImageContainer(itemData.icon).appendTo(itemElement)\r\n                    }\r\n                    $(\"<span>\").toggleClass(\"dx-area-field\", !itemData.items).data(\"field\", itemData.field).text(itemData.text).appendTo(itemElement)\r\n                },\r\n                onItemCollapsed: function(e) {\r\n                    var index = inArray(e.itemData.path, that._expandedPaths);\r\n                    if (index >= 0) {\r\n                        that._expandedPaths.splice(index, 1)\r\n                    }\r\n                },\r\n                onItemExpanded: function(e) {\r\n                    var index = inArray(e.itemData.path, that._expandedPaths);\r\n                    if (index < 0) {\r\n                        that._expandedPaths.push(e.itemData.path)\r\n                    }\r\n                },\r\n                onItemSelectionChanged: function(e) {\r\n                    var field, fields, area, data = e.itemData,\r\n                        needSelectDefaultItem = true;\r\n                    if (data.items) {\r\n                        if (data.selected) {\r\n                            treeView.unselectItem(data);\r\n                            return\r\n                        }\r\n                        that._processDemandState(function() {\r\n                            fields = getDimensionFields(data, dataSource.fields());\r\n                            for (var i = 0; i < fields.length; i++) {\r\n                                if (fields[i].area) {\r\n                                    needSelectDefaultItem = false;\r\n                                    break\r\n                                }\r\n                            }\r\n                        });\r\n                        if (needSelectDefaultItem) {\r\n                            var item = getFirstItem(data, function(item) {\r\n                                return item.isDefault\r\n                            }) || getFirstItem(data, function(item) {\r\n                                return isDefined(item.index)\r\n                            });\r\n                            item && treeView.selectItem(item);\r\n                            return\r\n                        }\r\n                    } else {\r\n                        field = dataSource.fields()[data.index];\r\n                        if (data.selected) {\r\n                            area = field.isMeasure ? \"data\" : \"column\"\r\n                        }\r\n                        if (field) {\r\n                            fields = [field]\r\n                        }\r\n                    }\r\n                    that._applyChanges(fields, {\r\n                        area: area,\r\n                        areaIndex: void 0\r\n                    })\r\n                }\r\n            }),\r\n            dataChanged = function() {\r\n                var scrollable = getScrollable(container),\r\n                    scrollTop = scrollable ? scrollable.scrollTop() : 0;\r\n                treeView.option({\r\n                    dataSource: that._createFieldsDataSource(dataSource)\r\n                });\r\n                scrollable = getScrollable(container);\r\n                if (scrollable) {\r\n                    scrollable.scrollTo({\r\n                        y: scrollTop\r\n                    });\r\n                    scrollable.update()\r\n                }\r\n            };\r\n        that._dataChangedHandlers.push(dataChanged)\r\n    },\r\n    _renderAreaFields: function($container, area) {\r\n        var that = this,\r\n            dataSource = that._dataSource,\r\n            fields = dataSource ? extend(true, [], dataSource.getAreaFields(area, true)) : [];\r\n        $container.empty();\r\n        each(fields, function(_, field) {\r\n            if (false !== field.visible) {\r\n                that.renderField(field, true).appendTo($container)\r\n            }\r\n        })\r\n    },\r\n    _renderArea: function(container, area) {\r\n        var $fieldsContainer, $fieldsContent, render, that = this,\r\n            $areaContainer = $(DIV).addClass(\"dx-area\").appendTo(container),\r\n            $fieldsHeaderContainer = $(DIV).addClass(\"dx-area-fields-header\").appendTo($areaContainer),\r\n            caption = that.option(\"texts.\" + area + \"Fields\");\r\n        $(\"<span>\").addClass(\"dx-area-icon\").addClass(\"dx-area-icon-\" + area).appendTo($fieldsHeaderContainer);\r\n        $(\"<span>\").html(\"&nbsp;\").appendTo($fieldsHeaderContainer);\r\n        $(\"<span>\").addClass(\"dx-area-caption\").text(caption).appendTo($fieldsHeaderContainer);\r\n        $fieldsContainer = $(DIV).addClass(\"dx-area-fields\").addClass(AREA_DRAG_CLASS).appendTo($areaContainer);\r\n        if (\"all\" !== area) {\r\n            $fieldsContainer.attr(\"group\", area).attr(\"allow-scrolling\", true);\r\n            $fieldsContent = $(DIV).addClass(\"dx-area-field-container\").appendTo($fieldsContainer);\r\n            render = function() {\r\n                that._renderAreaFields($fieldsContent, area)\r\n            };\r\n            that._dataChangedHandlers.push(render);\r\n            render();\r\n            $fieldsContainer.dxScrollable()\r\n        } else {\r\n            $areaContainer.addClass(\"dx-all-fields\");\r\n            $fieldsContainer.addClass(\"dx-treeview-border-visible\");\r\n            that._renderFieldsTreeView($fieldsContainer)\r\n        }\r\n    },\r\n    _getSortableOptions: function() {\r\n        return {}\r\n    },\r\n    _adjustSortableOnChangedArgs: function() {},\r\n    resetTreeView: function() {\r\n        var treeView = this.$element().find(\".dx-treeview\").dxTreeView(\"instance\");\r\n        if (treeView) {\r\n            treeView.option(\"searchValue\", \"\");\r\n            treeView.collapseAll()\r\n        }\r\n    },\r\n    applyChanges: function() {\r\n        var state = this.option(\"state\");\r\n        if (isDefined(state)) {\r\n            this._dataSource.state(state)\r\n        }\r\n    },\r\n    cancelChanges: function() {\r\n        this.option(\"state\", this._dataSource.state())\r\n    },\r\n    getDataSource: function() {\r\n        return this._dataSource\r\n    },\r\n    updateDimensions: function() {\r\n        var $scrollableElements = this.$element().find(\".dx-area .dx-scrollable\");\r\n        $scrollableElements.dxScrollable(\"update\")\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible && hasWindow) {\r\n            this.updateDimensions()\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxPivotGridFieldChooser\", FieldChooser);\r\nmodule.exports = FieldChooser;\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.field_chooser_base.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    ArrayStore = require(\"../../data/array_store\"),\r\n    clickEvent = require(\"../../events/click\"),\r\n    noop = require(\"../../core/utils/common\").noop,\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    iteratorUtils = require(\"../../core/utils/iterator\"),\r\n    messageLocalization = require(\"../../localization/message\"),\r\n    registerComponent = require(\"../../core/component_registrator\"),\r\n    Widget = require(\"../widget/ui.widget\"),\r\n    headerFilter = require(\"../grid_core/ui.grid_core.header_filter_core\"),\r\n    columnStateMixin = require(\"../grid_core/ui.grid_core.column_state_mixin\"),\r\n    sortingMixin = require(\"../grid_core/ui.grid_core.sorting_mixin\"),\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    Sortable = require(\"./ui.sortable\"),\r\n    Deferred = require(\"../../core/utils/deferred\").Deferred,\r\n    inArray = inArray,\r\n    each = iteratorUtils.each,\r\n    IE_FIELD_WIDTH_CORRECTION = 1,\r\n    DIV = \"<div>\";\r\nvar HeaderFilterView = headerFilter.HeaderFilterView.inherit({\r\n    _getSearchExpr: function(options) {\r\n        options.useDefaultSearchExpr = true;\r\n        return this.callBase(options)\r\n    }\r\n});\r\nvar processItems = function(groupItems, field) {\r\n    var filterValues = [],\r\n        isTree = !!field.groupName,\r\n        isExcludeFilterType = \"exclude\" === field.filterType;\r\n    if (field.filterValues) {\r\n        each(field.filterValues, function(_, filterValue) {\r\n            filterValues.push(Array.isArray(filterValue) ? filterValue.join(\"/\") : filterValue && filterValue.valueOf())\r\n        })\r\n    }\r\n    pivotGridUtils.foreachTree(groupItems, function(items) {\r\n        var preparedFilterValue, item = items[0],\r\n            path = pivotGridUtils.createPath(items),\r\n            preparedFilterValueByText = isTree ? iteratorUtils.map(items, function(item) {\r\n                return item.text\r\n            }).reverse().join(\"/\") : item.text;\r\n        item.value = isTree ? path.slice(0) : item.key || item.value;\r\n        preparedFilterValue = isTree ? path.join(\"/\") : item.value && item.value.valueOf();\r\n        if (item.children) {\r\n            item.items = item.children;\r\n            item.children = null\r\n        }\r\n        headerFilter.updateHeaderFilterItemSelectionState(item, item.key && inArray(preparedFilterValueByText, filterValues) > -1 || inArray(preparedFilterValue, filterValues) > -1, isExcludeFilterType)\r\n    })\r\n};\r\n\r\nfunction getMainGroupField(dataSource, sourceField) {\r\n    var field = sourceField;\r\n    if (isDefined(sourceField.groupIndex)) {\r\n        field = dataSource.getAreaFields(sourceField.area, true)[sourceField.areaIndex]\r\n    }\r\n    return field\r\n}\r\n\r\nfunction getStringState(state) {\r\n    return JSON.stringify([state.fields, state.columnExpandedPaths, state.rowExpandedPaths])\r\n}\r\nvar FieldChooserBase = Widget.inherit(columnStateMixin).inherit(sortingMixin).inherit(headerFilter.headerFilterMixin).inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            allowFieldDragging: true,\r\n            applyChangesMode: \"instantly\",\r\n            state: null,\r\n            headerFilter: {\r\n                width: 252,\r\n                height: 325,\r\n                searchTimeout: 500,\r\n                texts: {\r\n                    emptyValue: messageLocalization.format(\"dxDataGrid-headerFilterEmptyValue\"),\r\n                    ok: messageLocalization.format(\"dxDataGrid-headerFilterOK\"),\r\n                    cancel: messageLocalization.format(\"dxDataGrid-headerFilterCancel\")\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._headerFilterView = new HeaderFilterView(this);\r\n        this._refreshDataSource();\r\n        this.subscribeToEvents()\r\n    },\r\n    _refreshDataSource: function() {\r\n        var dataSource = this.option(\"dataSource\");\r\n        if (dataSource && dataSource.fields && dataSource.load) {\r\n            this._dataSource = dataSource\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"dataSource\":\r\n                this._refreshDataSource();\r\n                break;\r\n            case \"applyChangesMode\":\r\n                break;\r\n            case \"state\":\r\n                if (this._skipStateChange || !this._dataSource) {\r\n                    break\r\n                }\r\n                if (getStringState(this._dataSource.state()) === getStringState(args.value)) {\r\n                    this._clean(true);\r\n                    this._renderComponent()\r\n                } else {\r\n                    this._dataSource.state(args.value)\r\n                }\r\n                break;\r\n            case \"headerFilter\":\r\n            case \"allowFieldDragging\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    renderField: function(field, showColumnLines) {\r\n        var that = this,\r\n            $fieldContent = $(DIV).addClass(\"dx-area-field-content\").text(field.caption || field.dataField),\r\n            $fieldElement = $(DIV).addClass(\"dx-area-field\").addClass(\"dx-area-box\").data(\"field\", field).append($fieldContent),\r\n            mainGroupField = getMainGroupField(that._dataSource, field);\r\n        if (\"data\" !== field.area) {\r\n            if (field.allowSorting) {\r\n                that._applyColumnState({\r\n                    name: \"sort\",\r\n                    rootElement: $fieldElement,\r\n                    column: {\r\n                        alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n                        sortOrder: \"desc\" === field.sortOrder ? \"desc\" : \"asc\"\r\n                    },\r\n                    showColumnLines: showColumnLines\r\n                })\r\n            }\r\n            that._applyColumnState({\r\n                name: \"headerFilter\",\r\n                rootElement: $fieldElement,\r\n                column: {\r\n                    alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n                    filterValues: mainGroupField.filterValues,\r\n                    allowFiltering: mainGroupField.allowFiltering && !field.groupIndex\r\n                },\r\n                showColumnLines: showColumnLines\r\n            })\r\n        }\r\n        if (field.groupName) {\r\n            $fieldElement.attr(\"item-group\", field.groupName)\r\n        }\r\n        return $fieldElement\r\n    },\r\n    _clean: function() {},\r\n    _render: function() {\r\n        this.callBase();\r\n        this._headerFilterView.render(this.$element())\r\n    },\r\n    renderSortable: function() {\r\n        var that = this;\r\n        that._createComponent(that.$element(), Sortable, extend({\r\n            allowDragging: that.option(\"allowFieldDragging\"),\r\n            itemSelector: \".dx-area-field\",\r\n            itemContainerSelector: \".dx-area-field-container\",\r\n            groupSelector: \".dx-area-fields\",\r\n            groupFilter: function() {\r\n                var dataSource = that._dataSource,\r\n                    $sortable = $(this).closest(\".dx-sortable\"),\r\n                    pivotGrid = $sortable.data(\"dxPivotGrid\"),\r\n                    pivotGridFieldChooser = $sortable.data(\"dxPivotGridFieldChooser\");\r\n                if (pivotGrid) {\r\n                    return pivotGrid.getDataSource() === dataSource\r\n                }\r\n                if (pivotGridFieldChooser) {\r\n                    return pivotGridFieldChooser.option(\"dataSource\") === dataSource\r\n                }\r\n                return false\r\n            },\r\n            itemRender: function($sourceItem, target) {\r\n                var $item;\r\n                if ($sourceItem.hasClass(\"dx-area-box\")) {\r\n                    $item = $sourceItem.clone();\r\n                    if (\"drag\" === target) {\r\n                        each($sourceItem, function(index, sourceItem) {\r\n                            $item.eq(index).css(\"width\", parseInt($(sourceItem).outerWidth(), 10) + IE_FIELD_WIDTH_CORRECTION)\r\n                        })\r\n                    }\r\n                } else {\r\n                    $item = $(DIV).addClass(\"dx-area-field\").addClass(\"dx-area-box\").text($sourceItem.text())\r\n                }\r\n                if (\"drag\" === target) {\r\n                    var wrapperContainer = $(DIV);\r\n                    each($item, function(_, item) {\r\n                        var wrapper = $(\"<div>\").addClass(\"dx-pivotgrid-fields-container\").addClass(\"dx-widget\").append($(item));\r\n                        wrapperContainer.append(wrapper)\r\n                    });\r\n                    return wrapperContainer.children()\r\n                }\r\n                return $item\r\n            },\r\n            onDragging: function(e) {\r\n                var field = e.sourceElement.data(\"field\"),\r\n                    targetGroup = e.targetGroup;\r\n                e.cancel = false;\r\n                if (true === field.isMeasure) {\r\n                    if (\"column\" === targetGroup || \"row\" === targetGroup || \"filter\" === targetGroup) {\r\n                        e.cancel = true\r\n                    }\r\n                } else {\r\n                    if (false === field.isMeasure && \"data\" === targetGroup) {\r\n                        e.cancel = true\r\n                    }\r\n                }\r\n            },\r\n            useIndicator: true,\r\n            onChanged: function(e) {\r\n                var dataSource = that._dataSource,\r\n                    field = e.sourceElement.data(\"field\");\r\n                e.removeSourceElement = !!e.sourceGroup;\r\n                that._adjustSortableOnChangedArgs(e);\r\n                if (field) {\r\n                    that._applyChanges([getMainGroupField(dataSource, field)], {\r\n                        area: e.targetGroup,\r\n                        areaIndex: e.targetIndex\r\n                    })\r\n                }\r\n            }\r\n        }, that._getSortableOptions()))\r\n    },\r\n    _processDemandState: function(func) {\r\n        var that = this,\r\n            isInstantlyMode = \"instantly\" === that.option(\"applyChangesMode\"),\r\n            dataSource = that._dataSource;\r\n        if (isInstantlyMode) {\r\n            func(dataSource, isInstantlyMode)\r\n        } else {\r\n            var currentState = dataSource.state();\r\n            dataSource.state(that.option(\"state\"), true);\r\n            func(dataSource, isInstantlyMode);\r\n            dataSource.state(currentState, true)\r\n        }\r\n    },\r\n    _applyChanges: function(fields, props) {\r\n        var that = this;\r\n        that._processDemandState(function(dataSource, isInstantlyMode) {\r\n            fields.forEach(function(_ref) {\r\n                var index = _ref.index;\r\n                dataSource.field(index, props)\r\n            });\r\n            if (isInstantlyMode) {\r\n                dataSource.load()\r\n            } else {\r\n                that._changedHandler()\r\n            }\r\n        })\r\n    },\r\n    _adjustSortableOnChangedArgs: function(e) {\r\n        e.removeSourceElement = false;\r\n        e.removeTargetElement = true;\r\n        e.removeSourceClass = false\r\n    },\r\n    _getSortableOptions: function() {\r\n        return {\r\n            direction: \"auto\"\r\n        }\r\n    },\r\n    subscribeToEvents: function(element) {\r\n        var that = this,\r\n            func = function(e) {\r\n                var field = $(e.currentTarget).data(\"field\"),\r\n                    mainGroupField = extend(true, {}, getMainGroupField(that._dataSource, field)),\r\n                    isHeaderFilter = $(e.target).hasClass(\"dx-header-filter\"),\r\n                    dataSource = that._dataSource;\r\n                if (isHeaderFilter) {\r\n                    that._headerFilterView.showHeaderFilterMenu($(e.currentTarget), extend(mainGroupField, {\r\n                        type: mainGroupField.groupName ? \"tree\" : \"list\",\r\n                        encodeHtml: that.option(\"encodeHtml\"),\r\n                        dataSource: {\r\n                            useDefaultSearch: true,\r\n                            load: function(options) {\r\n                                var userData = options.userData;\r\n                                if (userData.store) {\r\n                                    return userData.store.load(options)\r\n                                } else {\r\n                                    var d = new Deferred;\r\n                                    dataSource.getFieldValues(mainGroupField.index).done(function(data) {\r\n                                        userData.store = new ArrayStore(data);\r\n                                        userData.store.load(options).done(d.resolve).fail(d.reject)\r\n                                    }).fail(d.reject);\r\n                                    return d\r\n                                }\r\n                            },\r\n                            postProcess: function(data) {\r\n                                processItems(data, mainGroupField);\r\n                                return data\r\n                            }\r\n                        },\r\n                        apply: function() {\r\n                            that._applyChanges([mainGroupField], {\r\n                                filterValues: this.filterValues,\r\n                                filterType: this.filterType\r\n                            })\r\n                        }\r\n                    }))\r\n                } else {\r\n                    if (field.allowSorting && \"data\" !== field.area) {\r\n                        that._applyChanges([field], {\r\n                            sortOrder: \"desc\" === field.sortOrder ? \"asc\" : \"desc\"\r\n                        })\r\n                    }\r\n                }\r\n            };\r\n        if (element) {\r\n            eventsEngine.on(element, clickEvent.name, \".dx-area-field.dx-area-box\", func);\r\n            return\r\n        }\r\n        eventsEngine.on(that.$element(), clickEvent.name, \".dx-area-field.dx-area-box\", func)\r\n    },\r\n    _initTemplates: noop,\r\n    addWidgetPrefix: function(className) {\r\n        return \"dx-pivotgrid-\" + className\r\n    }\r\n});\r\nregisterComponent(\"dxPivotGridFieldChooserBase\", FieldChooserBase);\r\nmodule.exports = FieldChooserBase;\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.fields_area.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    noop = require(\"../../core/utils/common\").noop,\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    areaItem = require(\"./ui.pivot_grid.area_item\"),\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    Popup = require(\"../popup\"),\r\n    Button = require(\"../button\"),\r\n    DIV = \"<div>\";\r\nrequire(\"./ui.pivot_grid.field_chooser_base\");\r\nvar AREA_DRAG_CLASS = \"dx-pivotgrid-drag-action\";\r\n\r\nfunction renderGroupConnector(field, nextField, prevField, $container) {\r\n    if (prevField && prevField.groupName && prevField.groupName === field.groupName) {\r\n        $(DIV).addClass(\"dx-group-connector\").addClass(\"dx-group-connector-prev\").appendTo($container)\r\n    }\r\n    if (nextField && nextField.groupName && nextField.groupName === field.groupName) {\r\n        $(DIV).addClass(\"dx-group-connector\").addClass(\"dx-group-connector-next\").appendTo($container)\r\n    }\r\n}\r\nexports.FieldsArea = areaItem.AreaItem.inherit({\r\n    ctor: function(component, area) {\r\n        this.callBase(component);\r\n        this._area = area\r\n    },\r\n    _getAreaName: function() {\r\n        return \"fields\"\r\n    },\r\n    _createGroupElement: function() {\r\n        return $(DIV).addClass(\"dx-pivotgrid-fields-area\").addClass(\"dx-area-fields\").addClass(AREA_DRAG_CLASS).attr(\"group\", this._area)\r\n    },\r\n    isVisible: function() {\r\n        return !!this.option(\"fieldPanel.visible\") && this.option(\"fieldPanel.show\" + pivotGridUtils.capitalizeFirstLetter(this._area) + \"Fields\")\r\n    },\r\n    _renderButton: function(element) {\r\n        var that = this,\r\n            container = $(\"<td>\").appendTo($(\"<tr>\").appendTo(element)),\r\n            button = that.component._createComponent($(DIV).appendTo(container), Button, {\r\n                text: \"Fields\",\r\n                icon: \"menu\",\r\n                width: \"auto\",\r\n                onClick: function() {\r\n                    var popup = that.tableElement().find(\".dx-fields-area-popup\").dxPopup(\"instance\");\r\n                    if (!popup.option(\"visible\")) {\r\n                        popup.show()\r\n                    }\r\n                }\r\n            });\r\n        button.$element().addClass(\"dx-pivotgrid-fields-area-hamburger\")\r\n    },\r\n    _getPopupOptions: function(row, button) {\r\n        return {\r\n            contentTemplate: function() {\r\n                return $(\"<table>\").addClass(\"dx-area-field-container\").append($(\"<thead>\").addClass(\"dx-pivotgrid-fields-area-head\").append(row))\r\n            },\r\n            height: \"auto\",\r\n            width: \"auto\",\r\n            position: {\r\n                at: \"left\",\r\n                my: \"left\",\r\n                of: button\r\n            },\r\n            dragEnabled: false,\r\n            animation: {\r\n                show: {\r\n                    type: \"pop\",\r\n                    duration: 200\r\n                }\r\n            },\r\n            shading: false,\r\n            showTitle: false,\r\n            closeOnOutsideClick: true,\r\n            container: button.parent()\r\n        }\r\n    },\r\n    _renderPopup: function(tableElement, row) {\r\n        var that = this,\r\n            button = tableElement.find(\".dx-button\"),\r\n            popupOptions = that._getPopupOptions(row, button),\r\n            FieldChooserBase = that.component.$element().dxPivotGridFieldChooserBase(\"instance\");\r\n        if (that._rowPopup) {\r\n            that._rowPopup.$element().remove()\r\n        }\r\n        that._rowPopup = that.component._createComponent($(DIV).appendTo(tableElement), Popup, popupOptions);\r\n        that._rowPopup.$element().addClass(\"dx-fields-area-popup\");\r\n        that._rowPopup.content().addClass(\"dx-pivotgrid-fields-container\");\r\n        that._rowPopup.content().parent().attr(\"group\", \"row\");\r\n        FieldChooserBase.subscribeToEvents(that._rowPopup.content());\r\n        FieldChooserBase.renderSortable(that._rowPopup.content())\r\n    },\r\n    _shouldCreateButton: function() {\r\n        return false\r\n    },\r\n    _renderTableContent: function(tableElement, data) {\r\n        var that = this,\r\n            groupElement = this.groupElement(),\r\n            isVisible = this.isVisible(),\r\n            fieldChooserBase = that.component.$element().dxPivotGridFieldChooserBase(\"instance\"),\r\n            head = $(\"<thead>\").addClass(\"dx-pivotgrid-fields-area-head\").appendTo(tableElement),\r\n            area = that._area,\r\n            row = $(\"<tr>\");\r\n        groupElement.toggleClass(\"dx-hidden\", !isVisible);\r\n        tableElement.addClass(\"dx-area-field-container\");\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        each(data, function(index, field) {\r\n            if (field.area === area && false !== field.visible) {\r\n                var td = $(\"<td>\").append(fieldChooserBase.renderField(field, \"row\" === field.area)),\r\n                    indicators = td.find(\".dx-column-indicators\");\r\n                if (indicators.length && that._shouldCreateButton()) {\r\n                    indicators.insertAfter(indicators.next())\r\n                }\r\n                td.appendTo(row);\r\n                renderGroupConnector(field, data[index + 1], data[index - 1], td)\r\n            }\r\n        });\r\n        if (!row.children().length) {\r\n            $(\"<td>\").append($(DIV).addClass(\"dx-empty-area-text\").text(this.option(\"fieldPanel.texts.\" + area + \"FieldArea\"))).appendTo(row)\r\n        }\r\n        if (that._shouldCreateButton()) {\r\n            that._renderButton(head);\r\n            that._renderPopup(tableElement, row)\r\n        } else {\r\n            head.append(row)\r\n        }\r\n    },\r\n    reset: function() {\r\n        this.callBase();\r\n        this.groupElement().css(\"marginTop\", 0)\r\n    },\r\n    _renderVirtualContent: noop\r\n});\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.headers_area.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    areaItem = require(\"./ui.pivot_grid.area_item\");\r\nvar PIVOTGRID_AREA_CLASS = \"dx-pivotgrid-area\",\r\n    PIVOTGRID_AREA_COLUMN_CLASS = \"dx-pivotgrid-horizontal-headers\",\r\n    PIVOTGRID_AREA_ROW_CLASS = \"dx-pivotgrid-vertical-headers\",\r\n    PIVOTGRID_TOTAL_CLASS = \"dx-total\",\r\n    PIVOTGRID_GRAND_TOTAL_CLASS = \"dx-grandtotal\",\r\n    PIVOTGRID_ROW_TOTAL_CLASS = \"dx-row-total\",\r\n    PIVOTGRID_EXPANDED_CLASS = \"dx-pivotgrid-expanded\",\r\n    PIVOTGRID_COLLAPSED_CLASS = \"dx-pivotgrid-collapsed\",\r\n    PIVOTGRID_LAST_CELL_CLASS = \"dx-last-cell\",\r\n    PIVOTGRID_VERTICAL_SCROLL_CLASS = \"dx-vertical-scroll\",\r\n    PIVOTGRID_EXPAND_BORDER = \"dx-expand-border\";\r\n\r\nfunction getCellPath(tableElement, cell) {\r\n    if (cell) {\r\n        var data = tableElement.data().data,\r\n            rowIndex = cell.parentNode.rowIndex,\r\n            cellIndex = cell.cellIndex;\r\n        return data[rowIndex] && data[rowIndex][cellIndex] && data[rowIndex][cellIndex].path\r\n    }\r\n}\r\nexports.HorizontalHeadersArea = areaItem.AreaItem.inherit({\r\n    _getAreaName: function() {\r\n        return \"column\"\r\n    },\r\n    _getAreaClassName: function() {\r\n        return PIVOTGRID_AREA_COLUMN_CLASS\r\n    },\r\n    _createGroupElement: function() {\r\n        return $(\"<div>\").addClass(this._getAreaClassName()).addClass(PIVOTGRID_AREA_CLASS)\r\n    },\r\n    _applyCustomStyles: function(options) {\r\n        var cssArray = options.cssArray,\r\n            cell = options.cell,\r\n            rowsCount = options.rowsCount,\r\n            classArray = options.classArray;\r\n        if (options.cellIndex === options.cellsCount - 1) {\r\n            cssArray.push((options.rtlEnabled ? \"border-left:\" : \"border-right:\") + \"0px\")\r\n        }\r\n        if (cell.rowspan === rowsCount - options.rowIndex || options.rowIndex + 1 === rowsCount) {\r\n            cssArray.push(\"border-bottom-width:0px\")\r\n        }\r\n        if (\"T\" === cell.type || \"GT\" === cell.type) {\r\n            classArray.push(PIVOTGRID_ROW_TOTAL_CLASS)\r\n        }\r\n        if (\"T\" === options.cell.type) {\r\n            classArray.push(PIVOTGRID_TOTAL_CLASS)\r\n        }\r\n        if (\"GT\" === options.cell.type) {\r\n            classArray.push(PIVOTGRID_GRAND_TOTAL_CLASS)\r\n        }\r\n        if (isDefined(cell.expanded)) {\r\n            classArray.push(cell.expanded ? PIVOTGRID_EXPANDED_CLASS : PIVOTGRID_COLLAPSED_CLASS)\r\n        }\r\n        this.callBase(options)\r\n    },\r\n    _getMainElementMarkup: function() {\r\n        return \"<thead class='\" + this._getAreaClassName() + \"'>\"\r\n    },\r\n    _getCloseMainElementMarkup: function() {\r\n        return \"</thead>\"\r\n    },\r\n    setVirtualContentParams: function(params) {\r\n        this.callBase(params);\r\n        this._setTableCss({\r\n            left: params.left,\r\n            top: 0\r\n        });\r\n        this._virtualContentWidth = params.width\r\n    },\r\n    hasScroll: function() {\r\n        var tableWidth = this._virtualContent ? this._virtualContentWidth : this._tableWidth;\r\n        if (this._groupWidth && tableWidth) {\r\n            return tableWidth - this._groupWidth >= 1\r\n        }\r\n        return false\r\n    },\r\n    processScroll: function() {\r\n        if (!this._getScrollable()) {\r\n            this._groupElement.dxScrollable({\r\n                useNative: false,\r\n                useSimulatedScrollbar: false,\r\n                showScrollbar: false,\r\n                bounceEnabled: false,\r\n                direction: \"horizontal\",\r\n                updateManually: true\r\n            })\r\n        }\r\n    },\r\n    processScrollBarSpacing: function(scrollBarWidth) {\r\n        var that = this,\r\n            groupAlignment = that.option(\"rtlEnabled\") ? \"right\" : \"left\";\r\n        if (that._groupWidth) {\r\n            that.groupWidth(that._groupWidth - scrollBarWidth)\r\n        }\r\n        if (that._scrollBarWidth) {\r\n            that._groupElement.next().remove()\r\n        }\r\n        that._groupElement.toggleClass(PIVOTGRID_VERTICAL_SCROLL_CLASS, scrollBarWidth > 0);\r\n        that._groupElement.css(\"float\", groupAlignment).width(that._groupHeight);\r\n        that._scrollBarWidth = scrollBarWidth\r\n    },\r\n    ctor: function(component) {\r\n        this.callBase(component);\r\n        this._scrollBarWidth = 0\r\n    },\r\n    getScrollPath: function(offset) {\r\n        var cell, tableElement = this.tableElement();\r\n        offset -= parseInt(tableElement[0].style.left, 10) || 0;\r\n        each(tableElement.find(\"td\"), function(_, td) {\r\n            if (1 === td.colSpan && td.offsetLeft <= offset && td.offsetWidth + td.offsetLeft > offset) {\r\n                cell = td;\r\n                return false\r\n            }\r\n        });\r\n        return getCellPath(tableElement, cell)\r\n    },\r\n    _moveFakeTable: function(scrollPos) {\r\n        this._moveFakeTableHorizontally(scrollPos);\r\n        this.callBase()\r\n    }\r\n});\r\nexports.VerticalHeadersArea = exports.HorizontalHeadersArea.inherit({\r\n    _getAreaClassName: function() {\r\n        return PIVOTGRID_AREA_ROW_CLASS\r\n    },\r\n    _applyCustomStyles: function(options) {\r\n        this.callBase(options);\r\n        if (options.cellIndex === options.cellsCount - 1) {\r\n            options.classArray.push(PIVOTGRID_LAST_CELL_CLASS)\r\n        }\r\n        if (options.rowIndex === options.rowsCount - 1) {\r\n            options.cssArray.push(\"border-bottom: 0px\")\r\n        }\r\n        if (options.cell.isWhiteSpace) {\r\n            options.classArray.push(\"dx-white-space-column\")\r\n        }\r\n    },\r\n    _getAreaName: function() {\r\n        return \"row\"\r\n    },\r\n    setVirtualContentParams: function(params) {\r\n        this.callBase(params);\r\n        this._setTableCss({\r\n            top: params.top,\r\n            left: 0\r\n        });\r\n        this._virtualContentHeight = params.height\r\n    },\r\n    hasScroll: function() {\r\n        var tableHeight = this._virtualContent ? this._virtualContentHeight : this._tableHeight;\r\n        if (this._groupHeight && tableHeight) {\r\n            return tableHeight - this._groupHeight >= 1\r\n        }\r\n        return false\r\n    },\r\n    processScroll: function() {\r\n        if (!this._getScrollable()) {\r\n            this._groupElement.dxScrollable({\r\n                useNative: false,\r\n                useSimulatedScrollbar: false,\r\n                showScrollbar: false,\r\n                bounceEnabled: false,\r\n                direction: \"vertical\",\r\n                updateManually: true\r\n            })\r\n        }\r\n    },\r\n    processScrollBarSpacing: function(scrollBarWidth) {\r\n        var that = this;\r\n        if (that._groupHeight) {\r\n            that.groupHeight(that._groupHeight - scrollBarWidth)\r\n        }\r\n        if (that._scrollBarWidth) {\r\n            that._groupElement.next().remove()\r\n        }\r\n        if (scrollBarWidth) {\r\n            that._groupElement.after($(\"<div>\").width(\"100%\").height(scrollBarWidth - 1))\r\n        }\r\n        that._scrollBarWidth = scrollBarWidth\r\n    },\r\n    getScrollPath: function(offset) {\r\n        var cell, tableElement = this.tableElement();\r\n        offset -= parseInt(tableElement[0].style.top, 10) || 0;\r\n        each(tableElement.find(\"tr\"), function(_, tr) {\r\n            var td = tr.childNodes[tr.childNodes.length - 1];\r\n            if (td && 1 === td.rowSpan && td.offsetTop <= offset && td.offsetHeight + td.offsetTop > offset) {\r\n                cell = td;\r\n                return false\r\n            }\r\n        });\r\n        return getCellPath(tableElement, cell)\r\n    },\r\n    _moveFakeTable: function(scrollPos) {\r\n        this._moveFakeTableTop(scrollPos);\r\n        this.callBase()\r\n    },\r\n    _getRowClassNames: function(rowIndex, cell, rowClassNames) {\r\n        if (0 !== rowIndex & cell.expanded && inArray(PIVOTGRID_EXPAND_BORDER, rowClassNames) === -1) {\r\n            rowClassNames.push(PIVOTGRID_EXPAND_BORDER)\r\n        }\r\n    },\r\n    _getMainElementMarkup: function() {\r\n        return \"<tbody class='\" + this._getAreaClassName() + \"'>\"\r\n    },\r\n    _getCloseMainElementMarkup: function() {\r\n        return \"</tbody>\"\r\n    },\r\n    updateColspans: function(columnCount) {\r\n        var diff, i, j, rows = this.tableElement()[0].rows,\r\n            columnOffset = 0,\r\n            columnOffsetResetIndexes = [];\r\n        if (this.getColumnsCount() - columnCount > 0) {\r\n            return\r\n        }\r\n        for (i = 0; i < rows.length; i++) {\r\n            for (j = 0; j < rows[i].cells.length; j++) {\r\n                var cell = rows[i].cells[j],\r\n                    rowSpan = cell.rowSpan;\r\n                if (columnOffsetResetIndexes[i]) {\r\n                    columnOffset -= columnOffsetResetIndexes[i];\r\n                    columnOffsetResetIndexes[i] = 0\r\n                }\r\n                diff = columnCount - (columnOffset + cell.colSpan);\r\n                if (j === rows[i].cells.length - 1 && diff > 0) {\r\n                    cell.colSpan = cell.colSpan + diff\r\n                }\r\n                columnOffsetResetIndexes[i + rowSpan] = (columnOffsetResetIndexes[i + rowSpan] || 0) + cell.colSpan;\r\n                columnOffset += cell.colSpan\r\n            }\r\n        }\r\n    }\r\n});\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    windowUtils = require(\"../../core/utils/window\"),\r\n    window = windowUtils.getWindow(),\r\n    browser = require(\"../../core/utils/browser\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    registerComponent = require(\"../../core/component_registrator\"),\r\n    getPublicElement = require(\"../../core/utils/dom\").getPublicElement,\r\n    stringUtils = require(\"../../core/utils/string\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    clickEvent = require(\"../../events/click\"),\r\n    messageLocalization = require(\"../../localization/message\"),\r\n    Widget = require(\"../widget/ui.widget\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    gridCoreUtils = require(\"../grid_core/ui.grid_core.utils\"),\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    pivotGridDataController = require(\"./ui.pivot_grid.data_controller\"),\r\n    PivotGridDataSource = require(\"./data_source\"),\r\n    dataAreaNamespace = require(\"./ui.pivot_grid.data_area\"),\r\n    headersArea = require(\"./ui.pivot_grid.headers_area\"),\r\n    fieldsArea = require(\"./ui.pivot_grid.fields_area\"),\r\n    PivotGridFieldChooser = require(\"./ui.pivot_grid.field_chooser\"),\r\n    PivotGridFieldChooserBase = require(\"./ui.pivot_grid.field_chooser_base\"),\r\n    ExportMixin = require(\"./ui.pivot_grid.export\").ExportMixin,\r\n    chartIntegrationMixin = require(\"./ui.pivot_grid.chart_integration\"),\r\n    Popup = require(\"../popup\"),\r\n    ContextMenu = require(\"../context_menu\"),\r\n    deferredUtils = require(\"../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred,\r\n    DATA_AREA_CELL_CLASS = \"dx-area-data-cell\",\r\n    ROW_AREA_CELL_CLASS = \"dx-area-row-cell\",\r\n    COLUMN_AREA_CELL_CLASS = \"dx-area-column-cell\",\r\n    DESCRIPTION_AREA_CELL_CLASS = \"dx-area-description-cell\",\r\n    BORDERS_CLASS = \"dx-pivotgrid-border\",\r\n    PIVOTGRID_CLASS = \"dx-pivotgrid\",\r\n    ROW_LINES_CLASS = \"dx-row-lines\",\r\n    BOTTOM_ROW_CLASS = \"dx-bottom-row\",\r\n    BOTTOM_BORDER_CLASS = \"dx-bottom-border\",\r\n    FIELDS_CONTAINER_CLASS = \"dx-pivotgrid-fields-container\",\r\n    FIELDS_CLASS = \"dx-area-fields\",\r\n    FIELD_CHOOSER_POPUP_CLASS = \"dx-fieldchooser-popup\",\r\n    INCOMPRESSIBLE_FIELDS_CLASS = \"dx-incompressible-fields\",\r\n    OVERFLOW_HIDDEN_CLASS = \"dx-overflow-hidden\",\r\n    TR = \"<tr>\",\r\n    TD = \"<td>\",\r\n    DIV = \"<div>\",\r\n    TEST_HEIGHT = 66666;\r\n\r\nfunction getArraySum(array) {\r\n    var sum = 0;\r\n    each(array, function(_, value) {\r\n        sum += value || 0\r\n    });\r\n    return sum\r\n}\r\n\r\nfunction adjustSizeArray(sizeArray, space) {\r\n    var delta = space / sizeArray.length;\r\n    for (var i = 0; i < sizeArray.length; i++) {\r\n        sizeArray[i] -= delta\r\n    }\r\n}\r\n\r\nfunction unsubscribeScrollEvents(area) {\r\n    area.off(\"scroll\").off(\"stop\")\r\n}\r\n\r\nfunction subscribeToScrollEvent(area, handler) {\r\n    unsubscribeScrollEvents(area);\r\n    area.on(\"scroll\", handler).on(\"stop\", handler)\r\n}\r\nvar scrollBarInfoCache = {};\r\n\r\nfunction getScrollBarInfo(useNativeScrolling) {\r\n    if (scrollBarInfoCache[useNativeScrolling]) {\r\n        return scrollBarInfoCache[useNativeScrolling]\r\n    }\r\n    var scrollBarUseNative, scrollBarWidth = 0,\r\n        options = {};\r\n    var container = $(DIV).css({\r\n        position: \"absolute\",\r\n        visibility: \"hidden\",\r\n        top: -1e3,\r\n        left: -1e3,\r\n        width: 100,\r\n        height: 100\r\n    }).appendTo(\"body\");\r\n    var content = $(\"<p>\").css({\r\n        width: \"100%\",\r\n        height: 200\r\n    }).appendTo(container);\r\n    if (\"auto\" !== useNativeScrolling) {\r\n        options.useNative = !!useNativeScrolling;\r\n        options.useSimulatedScrollbar = !useNativeScrolling\r\n    }\r\n    container.dxScrollable(options);\r\n    scrollBarUseNative = container.dxScrollable(\"instance\").option(\"useNative\");\r\n    scrollBarWidth = scrollBarUseNative ? container.width() - content.width() : 0;\r\n    container.remove();\r\n    scrollBarInfoCache[useNativeScrolling] = {\r\n        scrollBarWidth: scrollBarWidth,\r\n        scrollBarUseNative: scrollBarUseNative\r\n    };\r\n    return scrollBarInfoCache[useNativeScrolling]\r\n}\r\n\r\nfunction getCommonBorderWidth(elements, direction) {\r\n    var borderStyleNames = \"width\" === direction ? [\"borderLeftWidth\", \"borderRightWidth\"] : [\"borderTopWidth\", \"borderBottomWidth\"],\r\n        width = 0;\r\n    each(elements, function(_, elem) {\r\n        var computedStyle = window.getComputedStyle(elem.get(0));\r\n        borderStyleNames.forEach(function(borderStyleName) {\r\n            width += parseFloat(computedStyle[borderStyleName]) || 0\r\n        })\r\n    });\r\n    return width\r\n}\r\n\r\nfunction clickedOnFieldsArea($targetElement) {\r\n    return $targetElement.closest(\".\" + FIELDS_CLASS).length || $targetElement.find(\".\" + FIELDS_CLASS).length\r\n}\r\nvar PivotGrid = Widget.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            scrolling: {\r\n                timeout: 300,\r\n                renderingThreshold: 150,\r\n                minTimeout: 10,\r\n                mode: \"standard\",\r\n                useNative: \"auto\",\r\n                removeInvisiblePages: true\r\n            },\r\n            encodeHtml: true,\r\n            dataSource: null,\r\n            activeStateEnabled: false,\r\n            fieldChooser: {\r\n                minWidth: 250,\r\n                minHeight: 250,\r\n                enabled: true,\r\n                allowSearch: false,\r\n                searchTimeout: 500,\r\n                layout: 0,\r\n                title: messageLocalization.format(\"dxPivotGrid-fieldChooserTitle\"),\r\n                width: 600,\r\n                height: 600,\r\n                applyChangesMode: \"instantly\"\r\n            },\r\n            onContextMenuPreparing: null,\r\n            allowSorting: false,\r\n            allowSortingBySummary: false,\r\n            allowFiltering: false,\r\n            allowExpandAll: false,\r\n            wordWrapEnabled: true,\r\n            fieldPanel: {\r\n                showColumnFields: true,\r\n                showFilterFields: true,\r\n                showDataFields: true,\r\n                showRowFields: true,\r\n                allowFieldDragging: true,\r\n                visible: false,\r\n                texts: {\r\n                    columnFieldArea: messageLocalization.format(\"dxPivotGrid-columnFieldArea\"),\r\n                    rowFieldArea: messageLocalization.format(\"dxPivotGrid-rowFieldArea\"),\r\n                    filterFieldArea: messageLocalization.format(\"dxPivotGrid-filterFieldArea\"),\r\n                    dataFieldArea: messageLocalization.format(\"dxPivotGrid-dataFieldArea\")\r\n                }\r\n            },\r\n            dataFieldArea: \"column\",\r\n            \"export\": {\r\n                enabled: false,\r\n                fileName: \"PivotGrid\",\r\n                proxyUrl: void 0,\r\n                ignoreExcelErrors: true\r\n            },\r\n            showRowTotals: true,\r\n            showRowGrandTotals: true,\r\n            showColumnTotals: true,\r\n            showColumnGrandTotals: true,\r\n            hideEmptySummaryCells: true,\r\n            showTotalsPrior: \"none\",\r\n            rowHeaderLayout: \"standard\",\r\n            loadPanel: {\r\n                enabled: true,\r\n                text: messageLocalization.format(\"Loading\"),\r\n                width: 200,\r\n                height: 70,\r\n                showIndicator: true,\r\n                indicatorSrc: \"\",\r\n                showPane: true\r\n            },\r\n            texts: {\r\n                grandTotal: messageLocalization.format(\"dxPivotGrid-grandTotal\"),\r\n                total: messageLocalization.getFormatter(\"dxPivotGrid-total\"),\r\n                noData: messageLocalization.format(\"dxDataGrid-noDataText\"),\r\n                showFieldChooser: messageLocalization.format(\"dxPivotGrid-showFieldChooser\"),\r\n                expandAll: messageLocalization.format(\"dxPivotGrid-expandAll\"),\r\n                collapseAll: messageLocalization.format(\"dxPivotGrid-collapseAll\"),\r\n                sortColumnBySummary: messageLocalization.getFormatter(\"dxPivotGrid-sortColumnBySummary\"),\r\n                sortRowBySummary: messageLocalization.getFormatter(\"dxPivotGrid-sortRowBySummary\"),\r\n                removeAllSorting: messageLocalization.format(\"dxPivotGrid-removeAllSorting\"),\r\n                exportToExcel: messageLocalization.format(\"dxDataGrid-exportToExcel\"),\r\n                dataNotAvailable: messageLocalization.format(\"dxPivotGrid-dataNotAvailable\")\r\n            },\r\n            onCellClick: null,\r\n            onCellPrepared: null,\r\n            showBorders: false,\r\n            stateStoring: {\r\n                enabled: false,\r\n                storageKey: null,\r\n                type: \"localStorage\",\r\n                customLoad: null,\r\n                customSave: null,\r\n                savingTimeout: 2e3\r\n            },\r\n            onExpandValueChanging: null,\r\n            renderCellCountLimit: 2e4,\r\n            onExporting: null,\r\n            onExported: null,\r\n            onFileSaving: null,\r\n            headerFilter: {\r\n                width: 252,\r\n                height: 325,\r\n                allowSearch: false,\r\n                searchTimeout: 500,\r\n                texts: {\r\n                    emptyValue: messageLocalization.format(\"dxDataGrid-headerFilterEmptyValue\"),\r\n                    ok: messageLocalization.format(\"dxDataGrid-headerFilterOK\"),\r\n                    cancel: messageLocalization.format(\"dxDataGrid-headerFilterCancel\")\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _getDataControllerOptions: function() {\r\n        var that = this;\r\n        return {\r\n            component: that,\r\n            dataSource: that.option(\"dataSource\"),\r\n            texts: that.option(\"texts\"),\r\n            showRowTotals: that.option(\"showRowTotals\"),\r\n            showRowGrandTotals: that.option(\"showRowGrandTotals\"),\r\n            showColumnTotals: that.option(\"showColumnTotals\"),\r\n            showTotalsPrior: that.option(\"showTotalsPrior\"),\r\n            showColumnGrandTotals: that.option(\"showColumnGrandTotals\"),\r\n            dataFieldArea: that.option(\"dataFieldArea\"),\r\n            rowHeaderLayout: that.option(\"rowHeaderLayout\"),\r\n            hideEmptySummaryCells: that.option(\"hideEmptySummaryCells\"),\r\n            onFieldsPrepared: function(fields) {\r\n                each(fields, function(index, field) {\r\n                    each([\"allowSorting\", \"allowSortingBySummary\", \"allowFiltering\", \"allowExpandAll\"], function(_, optionName) {\r\n                        if (void 0 === field[optionName]) {\r\n                            pivotGridUtils.setFieldProperty(field, optionName, that.option(optionName))\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _initDataController: function() {\r\n        var that = this;\r\n        that._dataController && that._dataController.dispose();\r\n        that._dataController = new pivotGridDataController.DataController(that._getDataControllerOptions());\r\n        if (windowUtils.hasWindow()) {\r\n            that._dataController.changed.add(function() {\r\n                that._render()\r\n            })\r\n        }\r\n        that._dataController.scrollChanged.add(function(options) {\r\n            that._scrollLeft = options.left;\r\n            that._scrollTop = options.top\r\n        });\r\n        that._dataController.loadingChanged.add(function(isLoading) {\r\n            that._updateLoading()\r\n        });\r\n        that._dataController.progressChanged.add(that._updateLoading.bind(that));\r\n        that._dataController.dataSourceChanged.add(function() {\r\n            that._trigger(\"onChanged\")\r\n        });\r\n        var expandValueChanging = that.option(\"onExpandValueChanging\");\r\n        if (expandValueChanging) {\r\n            that._dataController.expandValueChanging.add(function(e) {\r\n                expandValueChanging(e)\r\n            })\r\n        }\r\n    },\r\n    _init: function() {\r\n        var that = this;\r\n        that.callBase();\r\n        that._initDataController();\r\n        that._scrollLeft = that._scrollTop = null;\r\n        that._initActions()\r\n    },\r\n    _initActions: function() {\r\n        var that = this;\r\n        that._actions = {\r\n            onChanged: that._createActionByOption(\"onChanged\"),\r\n            onContextMenuPreparing: that._createActionByOption(\"onContextMenuPreparing\"),\r\n            onCellClick: that._createActionByOption(\"onCellClick\"),\r\n            onExporting: that._createActionByOption(\"onExporting\"),\r\n            onExported: that._createActionByOption(\"onExported\"),\r\n            onFileSaving: that._createActionByOption(\"onFileSaving\"),\r\n            onCellPrepared: that._createActionByOption(\"onCellPrepared\")\r\n        }\r\n    },\r\n    _trigger: function(eventName, eventArg) {\r\n        this._actions[eventName](eventArg)\r\n    },\r\n    _optionValuesEqual: function(name, oldValue, newValue) {\r\n        if (\"dataSource\" === name && newValue instanceof PivotGridDataSource && oldValue instanceof PivotGridDataSource) {\r\n            return newValue === oldValue\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _optionChanged: function(args) {\r\n        var that = this;\r\n        switch (args.name) {\r\n            case \"dataSource\":\r\n            case \"allowSorting\":\r\n            case \"allowFiltering\":\r\n            case \"allowExpandAll\":\r\n            case \"allowSortingBySummary\":\r\n            case \"scrolling\":\r\n            case \"stateStoring\":\r\n                that._initDataController();\r\n                that._fieldChooserPopup.hide();\r\n                that._renderFieldChooser();\r\n                that._invalidate();\r\n                break;\r\n            case \"texts\":\r\n            case \"showTotalsPrior\":\r\n            case \"showRowTotals\":\r\n            case \"showRowGrandTotals\":\r\n            case \"showColumnTotals\":\r\n            case \"showColumnGrandTotals\":\r\n            case \"hideEmptySummaryCells\":\r\n            case \"dataFieldArea\":\r\n                that._dataController.updateViewOptions(that._getDataControllerOptions());\r\n                break;\r\n            case \"useNativeScrolling\":\r\n            case \"encodeHtml\":\r\n            case \"renderCellCountLimit\":\r\n                break;\r\n            case \"rtlEnabled\":\r\n                that.callBase(args);\r\n                that._renderFieldChooser();\r\n                that._renderContextMenu();\r\n                windowUtils.hasWindow() && that._renderLoadPanel(that._dataArea.groupElement(), that.$element());\r\n                that._invalidate();\r\n                break;\r\n            case \"export\":\r\n                that._renderDescriptionArea();\r\n                break;\r\n            case \"onExpandValueChanging\":\r\n                break;\r\n            case \"onCellClick\":\r\n            case \"onContextMenuPreparing\":\r\n            case \"onExporting\":\r\n            case \"onExported\":\r\n            case \"onFileSaving\":\r\n            case \"onCellPrepared\":\r\n                that._actions[args.name] = that._createActionByOption(args.name);\r\n                break;\r\n            case \"fieldChooser\":\r\n                that._renderFieldChooser();\r\n                that._renderDescriptionArea();\r\n                break;\r\n            case \"loadPanel\":\r\n                if (windowUtils.hasWindow()) {\r\n                    that._renderLoadPanel(that._dataArea.groupElement(), that.$element());\r\n                    that._invalidate()\r\n                }\r\n                break;\r\n            case \"fieldPanel\":\r\n                that._renderDescriptionArea();\r\n                that._invalidate();\r\n                break;\r\n            case \"headerFilter\":\r\n                that._renderFieldChooser();\r\n                that._invalidate();\r\n                break;\r\n            case \"showBorders\":\r\n                that._tableElement().toggleClass(BORDERS_CLASS, !!args.value);\r\n                that.updateDimensions();\r\n                break;\r\n            case \"wordWrapEnabled\":\r\n                that._tableElement().toggleClass(\"dx-word-wrap\", !!args.value);\r\n                that.updateDimensions();\r\n                break;\r\n            case \"rowHeaderLayout\":\r\n                that._tableElement().find(\".\" + ROW_AREA_CELL_CLASS).toggleClass(\"dx-area-tree-view\", \"tree\" === args.value);\r\n                that._dataController.updateViewOptions(that._getDataControllerOptions());\r\n                break;\r\n            case \"height\":\r\n            case \"width\":\r\n                that._hasHeight = null;\r\n                that.callBase(args);\r\n                that.resize();\r\n                break;\r\n            default:\r\n                that.callBase(args)\r\n        }\r\n    },\r\n    _updateScrollPosition: function(columnsArea, rowsArea, dataArea) {\r\n        var scrollTop, scrollLeft, that = this,\r\n            scrolled = that._scrollTop || that._scrollLeft;\r\n        if (that._scrollUpdating) {\r\n            return\r\n        }\r\n        that._scrollUpdating = true;\r\n        if (rowsArea && !rowsArea.hasScroll() && that._hasHeight) {\r\n            that._scrollTop = null\r\n        }\r\n        if (columnsArea && !columnsArea.hasScroll()) {\r\n            that._scrollLeft = null\r\n        }\r\n        if (null !== that._scrollTop || null !== that._scrollLeft || scrolled || that.option(\"rtlEnabled\")) {\r\n            scrollTop = that._scrollTop || 0;\r\n            scrollLeft = that._scrollLeft || 0;\r\n            dataArea.scrollTo({\r\n                x: scrollLeft,\r\n                y: scrollTop\r\n            });\r\n            columnsArea.scrollTo(scrollLeft);\r\n            rowsArea.scrollTo(scrollTop);\r\n            that._dataController.updateWindowScrollPosition(that._scrollTop)\r\n        }\r\n        that._scrollUpdating = false\r\n    },\r\n    _subscribeToEvents: function(columnsArea, rowsArea, dataArea) {\r\n        var that = this,\r\n            scrollHandler = function(e) {\r\n                var scrollOffset = e.scrollOffset,\r\n                    leftOffset = isDefined(scrollOffset.left) ? scrollOffset.left : that._scrollLeft,\r\n                    topOffset = isDefined(scrollOffset.top) && that._hasHeight ? scrollOffset.top : that._scrollTop;\r\n                if ((that._scrollLeft || 0) !== (leftOffset || 0) || (that._scrollTop || 0) !== (topOffset || 0)) {\r\n                    that._scrollLeft = leftOffset;\r\n                    that._scrollTop = topOffset;\r\n                    that._updateScrollPosition(columnsArea, rowsArea, dataArea);\r\n                    if (\"virtual\" === that.option(\"scrolling.mode\")) {\r\n                        that._dataController.setViewportPosition(that._scrollLeft, that._scrollTop)\r\n                    }\r\n                }\r\n            };\r\n        each([columnsArea, rowsArea, dataArea], function(_, area) {\r\n            subscribeToScrollEvent(area, scrollHandler)\r\n        });\r\n        !that._hasHeight && that._dataController.subscribeToWindowScrollEvents(dataArea.groupElement())\r\n    },\r\n    _clean: commonUtils.noop,\r\n    _needDelayResizing: function(cellsInfo) {\r\n        var cellsCount = cellsInfo.length * (cellsInfo.length ? cellsInfo[0].length : 0);\r\n        return cellsCount > this.option(\"renderCellCountLimit\")\r\n    },\r\n    _renderFieldChooser: function() {\r\n        var that = this,\r\n            container = that._pivotGridContainer,\r\n            fieldChooserOptions = that.option(\"fieldChooser\") || {},\r\n            toolbarItems = \"onDemand\" === fieldChooserOptions.applyChangesMode ? [{\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    text: messageLocalization.format(\"OK\"),\r\n                    onClick: function(e) {\r\n                        that._fieldChooserPopup.$content().dxPivotGridFieldChooser(\"applyChanges\");\r\n                        that._fieldChooserPopup.hide()\r\n                    }\r\n                }\r\n            }, {\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    text: messageLocalization.format(\"Cancel\"),\r\n                    onClick: function(e) {\r\n                        that._fieldChooserPopup.hide()\r\n                    }\r\n                }\r\n            }] : [],\r\n            fieldChooserComponentOptions = {\r\n                layout: fieldChooserOptions.layout,\r\n                texts: fieldChooserOptions.texts || {},\r\n                dataSource: that.getDataSource(),\r\n                allowSearch: fieldChooserOptions.allowSearch,\r\n                searchTimeout: fieldChooserOptions.searchTimeout,\r\n                width: void 0,\r\n                height: void 0,\r\n                headerFilter: that.option(\"headerFilter\"),\r\n                encodeHtml: that.option(\"encodeHtml\"),\r\n                applyChangesMode: fieldChooserOptions.applyChangesMode\r\n            },\r\n            popupOptions = {\r\n                shading: false,\r\n                title: fieldChooserOptions.title,\r\n                width: fieldChooserOptions.width,\r\n                height: fieldChooserOptions.height,\r\n                showCloseButton: true,\r\n                resizeEnabled: true,\r\n                minWidth: fieldChooserOptions.minWidth,\r\n                minHeight: fieldChooserOptions.minHeight,\r\n                toolbarItems: toolbarItems,\r\n                onResize: function(e) {\r\n                    e.component.$content().dxPivotGridFieldChooser(\"updateDimensions\")\r\n                },\r\n                onShown: function(e) {\r\n                    that._createComponent(e.component.content(), PivotGridFieldChooser, fieldChooserComponentOptions)\r\n                },\r\n                onHidden: function(e) {\r\n                    var fieldChooser = e.component.$content().dxPivotGridFieldChooser(\"instance\");\r\n                    fieldChooser.resetTreeView();\r\n                    fieldChooser.cancelChanges()\r\n                }\r\n            };\r\n        if (that._fieldChooserPopup) {\r\n            that._fieldChooserPopup.option(popupOptions);\r\n            that._fieldChooserPopup.$content().dxPivotGridFieldChooser(fieldChooserComponentOptions)\r\n        } else {\r\n            that._fieldChooserPopup = that._createComponent($(DIV).addClass(FIELD_CHOOSER_POPUP_CLASS).appendTo(container), Popup, popupOptions)\r\n        }\r\n    },\r\n    _renderContextMenu: function() {\r\n        var that = this,\r\n            $container = that._pivotGridContainer;\r\n        if (that._contextMenu) {\r\n            that._contextMenu.$element().remove()\r\n        }\r\n        that._contextMenu = that._createComponent($(DIV).appendTo($container), ContextMenu, {\r\n            onPositioning: function(actionArgs) {\r\n                var targetElement, args, items, event = actionArgs.event;\r\n                actionArgs.cancel = true;\r\n                if (!event) {\r\n                    return\r\n                }\r\n                targetElement = event.target.cellIndex >= 0 ? event.target : $(event.target).closest(\"td\").get(0);\r\n                if (!targetElement) {\r\n                    return\r\n                }\r\n                args = that._createEventArgs(targetElement, event);\r\n                items = that._getContextMenuItems(args);\r\n                if (items) {\r\n                    actionArgs.component.option(\"items\", items);\r\n                    actionArgs.cancel = false;\r\n                    return\r\n                }\r\n            },\r\n            onItemClick: function(params) {\r\n                params.itemData.onItemClick && params.itemData.onItemClick(params)\r\n            },\r\n            cssClass: PIVOTGRID_CLASS,\r\n            target: that.$element()\r\n        })\r\n    },\r\n    _getContextMenuItems: function(e) {\r\n        var that = this,\r\n            items = [],\r\n            texts = that.option(\"texts\");\r\n        if (\"row\" === e.area || \"column\" === e.area) {\r\n            var areaFields = e[e.area + \"Fields\"],\r\n                oppositeAreaFields = e[\"column\" === e.area ? \"rowFields\" : \"columnFields\"],\r\n                field = e.cell.path && areaFields[e.cell.path.length - 1],\r\n                dataSource = that.getDataSource();\r\n            if (field && field.allowExpandAll && e.cell.path.length < e[e.area + \"Fields\"].length) {\r\n                items.push({\r\n                    beginGroup: true,\r\n                    icon: \"none\",\r\n                    text: texts.expandAll,\r\n                    onItemClick: function() {\r\n                        dataSource.expandAll(field.index)\r\n                    }\r\n                });\r\n                items.push({\r\n                    text: texts.collapseAll,\r\n                    icon: \"none\",\r\n                    onItemClick: function() {\r\n                        dataSource.collapseAll(field.index)\r\n                    }\r\n                })\r\n            }\r\n            if (e.cell.isLast) {\r\n                var sortingBySummaryItemCount = 0;\r\n                each(oppositeAreaFields, function(index, field) {\r\n                    if (!field.allowSortingBySummary) {\r\n                        return\r\n                    }\r\n                    each(e.dataFields, function(dataIndex, dataField) {\r\n                        if (isDefined(e.cell.dataIndex) && e.cell.dataIndex !== dataIndex) {\r\n                            return\r\n                        }\r\n                        var showDataFieldCaption = !isDefined(e.cell.dataIndex) && e.dataFields.length > 1,\r\n                            textFormat = \"column\" === e.area ? texts.sortColumnBySummary : texts.sortRowBySummary,\r\n                            checked = pivotGridUtils.findField(e.dataFields, field.sortBySummaryField) === dataIndex && (e.cell.path || []).join(\"/\") === (field.sortBySummaryPath || []).join(\"/\"),\r\n                            text = stringUtils.format(textFormat, showDataFieldCaption ? field.caption + \" - \" + dataField.caption : field.caption);\r\n                        items.push({\r\n                            beginGroup: 0 === sortingBySummaryItemCount,\r\n                            icon: checked ? \"desc\" === field.sortOrder ? \"sortdowntext\" : \"sortuptext\" : \"none\",\r\n                            text: text,\r\n                            onItemClick: function() {\r\n                                dataSource.field(field.index, {\r\n                                    sortBySummaryField: dataField.name || dataField.caption || dataField.dataField,\r\n                                    sortBySummaryPath: e.cell.path,\r\n                                    sortOrder: \"desc\" === field.sortOrder ? \"asc\" : \"desc\"\r\n                                });\r\n                                dataSource.load()\r\n                            }\r\n                        });\r\n                        sortingBySummaryItemCount++\r\n                    })\r\n                });\r\n                each(oppositeAreaFields, function(index, field) {\r\n                    if (!field.allowSortingBySummary || !isDefined(field.sortBySummaryField)) {\r\n                        return\r\n                    }\r\n                    items.push({\r\n                        beginGroup: 0 === sortingBySummaryItemCount,\r\n                        icon: \"none\",\r\n                        text: texts.removeAllSorting,\r\n                        onItemClick: function() {\r\n                            each(oppositeAreaFields, function(index, field) {\r\n                                dataSource.field(field.index, {\r\n                                    sortBySummaryField: void 0,\r\n                                    sortBySummaryPath: void 0,\r\n                                    sortOrder: void 0\r\n                                })\r\n                            });\r\n                            dataSource.load()\r\n                        }\r\n                    });\r\n                    return false\r\n                })\r\n            }\r\n        }\r\n        if (that.option(\"fieldChooser.enabled\")) {\r\n            items.push({\r\n                beginGroup: true,\r\n                icon: \"columnchooser\",\r\n                text: texts.showFieldChooser,\r\n                onItemClick: function() {\r\n                    that._fieldChooserPopup.show()\r\n                }\r\n            })\r\n        }\r\n        if (that.option(\"export.enabled\")) {\r\n            items.push({\r\n                beginGroup: true,\r\n                icon: \"exportxlsx\",\r\n                text: texts.exportToExcel,\r\n                onItemClick: function() {\r\n                    that.exportToExcel()\r\n                }\r\n            })\r\n        }\r\n        e.items = items;\r\n        that._trigger(\"onContextMenuPreparing\", e);\r\n        items = e.items;\r\n        if (items && items.length) {\r\n            return items\r\n        }\r\n    },\r\n    _createEventArgs: function(targetElement, dxEvent) {\r\n        var that = this,\r\n            dataSource = that.getDataSource(),\r\n            args = {\r\n                rowFields: dataSource.getAreaFields(\"row\"),\r\n                columnFields: dataSource.getAreaFields(\"column\"),\r\n                dataFields: dataSource.getAreaFields(\"data\"),\r\n                event: dxEvent\r\n            };\r\n        if (clickedOnFieldsArea($(targetElement))) {\r\n            return extend(that._createFieldArgs(targetElement), args)\r\n        } else {\r\n            return extend(that._createCellArgs(targetElement), args)\r\n        }\r\n    },\r\n    _createFieldArgs: function(targetElement) {\r\n        var field = $(targetElement).children().data(\"field\"),\r\n            args = {\r\n                field: field\r\n            };\r\n        return isDefined(field) ? args : {}\r\n    },\r\n    _createCellArgs: function(cellElement) {\r\n        var $cellElement = $(cellElement),\r\n            columnIndex = cellElement.cellIndex,\r\n            rowIndex = cellElement.parentElement.rowIndex,\r\n            $table = $cellElement.closest(\"table\"),\r\n            data = $table.data(\"data\"),\r\n            cell = data && data[rowIndex] && data[rowIndex][columnIndex],\r\n            args = {\r\n                area: $table.data(\"area\"),\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex,\r\n                cellElement: getPublicElement($cellElement),\r\n                cell: cell\r\n            };\r\n        return args\r\n    },\r\n    _handleCellClick: function(e) {\r\n        var that = this,\r\n            args = that._createEventArgs(e.currentTarget, e),\r\n            cell = args.cell;\r\n        if (!cell || !args.area && (args.rowIndex || args.columnIndex)) {\r\n            return\r\n        }\r\n        that._trigger(\"onCellClick\", args);\r\n        cell && !args.cancel && isDefined(cell.expanded) && setTimeout(function() {\r\n            that._dataController[cell.expanded ? \"collapseHeaderItem\" : \"expandHeaderItem\"](args.area, cell.path)\r\n        })\r\n    },\r\n    _getNoDataText: function() {\r\n        return this.option(\"texts.noData\")\r\n    },\r\n    _renderNoDataText: gridCoreUtils.renderNoDataText,\r\n    _renderLoadPanel: gridCoreUtils.renderLoadPanel,\r\n    _updateLoading: function(progress) {\r\n        var loadPanelVisible, that = this,\r\n            isLoading = that._dataController.isLoading();\r\n        if (!that._loadPanel) {\r\n            return\r\n        }\r\n        loadPanelVisible = that._loadPanel.option(\"visible\");\r\n        if (!loadPanelVisible) {\r\n            that._startLoadingTime = new Date\r\n        }\r\n        if (isLoading) {\r\n            if (progress) {\r\n                if (new Date - that._startLoadingTime >= 1e3) {\r\n                    that._loadPanel.option(\"message\", Math.floor(100 * progress) + \"%\")\r\n                }\r\n            } else {\r\n                that._loadPanel.option(\"message\", that.option(\"loadPanel.text\"))\r\n            }\r\n        }\r\n        clearTimeout(that._hideLoadingTimeoutID);\r\n        if (loadPanelVisible && !isLoading) {\r\n            that._hideLoadingTimeoutID = setTimeout(function() {\r\n                that._loadPanel.option(\"visible\", false);\r\n                that.$element().removeClass(OVERFLOW_HIDDEN_CLASS)\r\n            })\r\n        } else {\r\n            that._loadPanel.option(\"visible\", isLoading);\r\n            that.$element().toggleClass(OVERFLOW_HIDDEN_CLASS, !isLoading)\r\n        }\r\n    },\r\n    _renderDescriptionArea: function() {\r\n        var _this = this;\r\n        var $element = this.$element(),\r\n            $descriptionCell = $element.find(\".\" + DESCRIPTION_AREA_CELL_CLASS),\r\n            $toolbarContainer = $(DIV).addClass(\"dx-pivotgrid-toolbar\"),\r\n            fieldPanel = this.option(\"fieldPanel\"),\r\n            $filterHeader = $element.find(\".dx-filter-header\"),\r\n            $columnHeader = $element.find(\".dx-column-header\");\r\n        var $targetContainer = void 0;\r\n        if (fieldPanel.visible && fieldPanel.showFilterFields) {\r\n            $targetContainer = $filterHeader\r\n        } else {\r\n            if (fieldPanel.visible && (fieldPanel.showDataFields || fieldPanel.showColumnFields)) {\r\n                $targetContainer = $columnHeader\r\n            } else {\r\n                $targetContainer = $descriptionCell\r\n            }\r\n        }\r\n        $columnHeader.toggleClass(BOTTOM_BORDER_CLASS, !!(fieldPanel.visible && (fieldPanel.showDataFields || fieldPanel.showColumnFields)));\r\n        $filterHeader.toggleClass(BOTTOM_BORDER_CLASS, !!(fieldPanel.visible && fieldPanel.showFilterFields));\r\n        $descriptionCell.toggleClass(\"dx-pivotgrid-background\", fieldPanel.visible && (fieldPanel.showDataFields || fieldPanel.showColumnFields || fieldPanel.showRowFields));\r\n        this.$element().find(\".dx-pivotgrid-toolbar\").remove();\r\n        $toolbarContainer.prependTo($targetContainer);\r\n        if (this.option(\"fieldChooser.enabled\")) {\r\n            var $buttonElement = $(DIV).appendTo($toolbarContainer).addClass(\"dx-pivotgrid-field-chooser-button\");\r\n            var buttonOptions = {\r\n                icon: \"columnchooser\",\r\n                hint: this.option(\"texts.showFieldChooser\"),\r\n                onClick: function() {\r\n                    _this.getFieldChooserPopup().show()\r\n                }\r\n            };\r\n            this._createComponent($buttonElement, \"dxButton\", buttonOptions)\r\n        }\r\n        if (this.option(\"export.enabled\")) {\r\n            var _$buttonElement = $(DIV).appendTo($toolbarContainer).addClass(\"dx-pivotgrid-export-button\");\r\n            var _buttonOptions = {\r\n                icon: \"exportxlsx\",\r\n                hint: this.option(\"texts.exportToExcel\"),\r\n                onClick: function() {\r\n                    _this.exportToExcel()\r\n                }\r\n            };\r\n            this._createComponent(_$buttonElement, \"dxButton\", _buttonOptions)\r\n        }\r\n    },\r\n    _detectHasContainerHeight: function() {\r\n        var testElement, that = this,\r\n            element = that.$element();\r\n        if (isDefined(that._hasHeight) || element.is(\":hidden\")) {\r\n            return\r\n        }\r\n        that._pivotGridContainer.addClass(\"dx-hidden\");\r\n        testElement = $(DIV).height(TEST_HEIGHT);\r\n        element.append(testElement);\r\n        that._hasHeight = element.height() !== TEST_HEIGHT;\r\n        that._pivotGridContainer.removeClass(\"dx-hidden\");\r\n        testElement.remove()\r\n    },\r\n    _renderHeaders: function(rowHeaderContainer, columnHeaderContainer, filterHeaderContainer, dataHeaderContainer) {\r\n        var that = this,\r\n            dataSource = that.getDataSource(),\r\n            FieldsArea = fieldsArea.FieldsArea;\r\n        that._rowFields = that._rowFields || new FieldsArea(that, \"row\");\r\n        that._rowFields.render(rowHeaderContainer, dataSource.getAreaFields(\"row\"));\r\n        that._columnFields = that._columnFields || new FieldsArea(that, \"column\");\r\n        that._columnFields.render(columnHeaderContainer, dataSource.getAreaFields(\"column\"));\r\n        that._filterFields = that._filterFields || new FieldsArea(that, \"filter\");\r\n        that._filterFields.render(filterHeaderContainer, dataSource.getAreaFields(\"filter\"));\r\n        that._dataFields = that._dataFields || new FieldsArea(that, \"data\");\r\n        that._dataFields.render(dataHeaderContainer, dataSource.getAreaFields(\"data\"));\r\n        that.$element().dxPivotGridFieldChooserBase(\"instance\").renderSortable()\r\n    },\r\n    _createTableElement: function() {\r\n        var that = this;\r\n        var $table = $(\"<table>\").css({\r\n            width: \"100%\"\r\n        }).toggleClass(BORDERS_CLASS, !!that.option(\"showBorders\")).toggleClass(\"dx-word-wrap\", !!that.option(\"wordWrapEnabled\"));\r\n        eventsEngine.on($table, eventUtils.addNamespace(clickEvent.name, \"dxPivotGrid\"), \"td\", that._handleCellClick.bind(that));\r\n        return $table\r\n    },\r\n    _renderDataArea: function(dataAreaElement) {\r\n        var that = this,\r\n            dataArea = that._dataArea || new dataAreaNamespace.DataArea(that);\r\n        that._dataArea = dataArea;\r\n        dataArea.render(dataAreaElement, that._dataController.getCellsInfo());\r\n        return dataArea\r\n    },\r\n    _renderRowsArea: function(rowsAreaElement) {\r\n        var that = this,\r\n            rowsArea = that._rowsArea || new headersArea.VerticalHeadersArea(that);\r\n        that._rowsArea = rowsArea;\r\n        rowsArea.render(rowsAreaElement, that._dataController.getRowsInfo());\r\n        return rowsArea\r\n    },\r\n    _renderColumnsArea: function(columnsAreaElement) {\r\n        var that = this,\r\n            columnsArea = that._columnsArea || new headersArea.HorizontalHeadersArea(that);\r\n        that._columnsArea = columnsArea;\r\n        columnsArea.render(columnsAreaElement, that._dataController.getColumnsInfo());\r\n        return columnsArea\r\n    },\r\n    _initMarkup: function() {\r\n        var that = this;\r\n        that.callBase.apply(this, arguments);\r\n        that.$element().addClass(PIVOTGRID_CLASS)\r\n    },\r\n    _renderContentImpl: function() {\r\n        var columnsAreaElement, rowsAreaElement, dataAreaElement, tableElement, dataArea, rowsArea, columnsArea, rowHeaderContainer, columnHeaderContainer, filterHeaderContainer, dataHeaderContainer, that = this,\r\n            isFirstDrawing = !that._pivotGridContainer;\r\n        tableElement = !isFirstDrawing && that._tableElement();\r\n        if (!tableElement) {\r\n            that.$element().addClass(ROW_LINES_CLASS).addClass(FIELDS_CONTAINER_CLASS);\r\n            that._pivotGridContainer = $(DIV).addClass(\"dx-pivotgrid-container\");\r\n            that._renderFieldChooser();\r\n            that._renderContextMenu();\r\n            columnsAreaElement = $(TD).addClass(COLUMN_AREA_CELL_CLASS);\r\n            rowsAreaElement = $(TD).addClass(ROW_AREA_CELL_CLASS);\r\n            dataAreaElement = $(TD).addClass(DATA_AREA_CELL_CLASS);\r\n            tableElement = that._createTableElement();\r\n            dataHeaderContainer = $(TD).addClass(\"dx-data-header\");\r\n            filterHeaderContainer = $(\"<td>\").attr(\"colspan\", \"2\").addClass(\"dx-filter-header\");\r\n            columnHeaderContainer = $(TD).addClass(\"dx-column-header\");\r\n            rowHeaderContainer = $(TD).addClass(DESCRIPTION_AREA_CELL_CLASS);\r\n            if (browser.msie) {\r\n                rowHeaderContainer.addClass(\"dx-ie\")\r\n            }\r\n            $(TR).append(filterHeaderContainer).appendTo(tableElement);\r\n            $(TR).append(dataHeaderContainer).append(columnHeaderContainer).appendTo(tableElement);\r\n            $(TR).append(rowHeaderContainer).append(columnsAreaElement).appendTo(tableElement);\r\n            $(TR).addClass(BOTTOM_ROW_CLASS).append(rowsAreaElement).append(dataAreaElement).appendTo(tableElement);\r\n            that._pivotGridContainer.append(tableElement);\r\n            that.$element().append(that._pivotGridContainer);\r\n            if (\"tree\" === that.option(\"rowHeaderLayout\")) {\r\n                rowsAreaElement.addClass(\"dx-area-tree-view\")\r\n            }\r\n        }\r\n        that.$element().addClass(OVERFLOW_HIDDEN_CLASS);\r\n        that._createComponent(that.$element(), PivotGridFieldChooserBase, {\r\n            dataSource: that.getDataSource(),\r\n            encodeHtml: that.option(\"encodeHtml\"),\r\n            allowFieldDragging: that.option(\"fieldPanel.allowFieldDragging\"),\r\n            headerFilter: that.option(\"headerFilter\"),\r\n            visible: that.option(\"visible\")\r\n        });\r\n        dataArea = that._renderDataArea(dataAreaElement);\r\n        rowsArea = that._renderRowsArea(rowsAreaElement);\r\n        columnsArea = that._renderColumnsArea(columnsAreaElement);\r\n        dataArea.tableElement().prepend(columnsArea.headElement());\r\n        if (isFirstDrawing) {\r\n            that._renderLoadPanel(dataArea.groupElement().parent(), that.$element());\r\n            that._renderDescriptionArea();\r\n            rowsArea.processScroll();\r\n            columnsArea.processScroll()\r\n        } [dataArea, rowsArea, columnsArea].forEach(function(area) {\r\n            unsubscribeScrollEvents(area)\r\n        });\r\n        that._renderHeaders(rowHeaderContainer, columnHeaderContainer, filterHeaderContainer, dataHeaderContainer);\r\n        that._update(isFirstDrawing)\r\n    },\r\n    _update: function(isFirstDrawing) {\r\n        var updateHandler, that = this;\r\n        updateHandler = function() {\r\n            that.updateDimensions().done(function() {\r\n                that._subscribeToEvents(that._columnsArea, that._rowsArea, that._dataArea)\r\n            })\r\n        };\r\n        if (that._needDelayResizing(that._dataArea.getData()) && isFirstDrawing) {\r\n            setTimeout(updateHandler)\r\n        } else {\r\n            updateHandler()\r\n        }\r\n    },\r\n    _fireContentReadyAction: function() {\r\n        if (!this._dataController.isLoading()) {\r\n            this.callBase()\r\n        }\r\n    },\r\n    getScrollPath: function(area) {\r\n        var that = this;\r\n        if (\"column\" === area) {\r\n            return that._columnsArea.getScrollPath(that._scrollLeft)\r\n        } else {\r\n            return that._rowsArea.getScrollPath(that._scrollTop)\r\n        }\r\n    },\r\n    getDataSource: function() {\r\n        return this._dataController.getDataSource()\r\n    },\r\n    getFieldChooserPopup: function() {\r\n        return this._fieldChooserPopup\r\n    },\r\n    hasScroll: function(area) {\r\n        var that = this;\r\n        return \"column\" === area ? that._columnsArea.hasScroll() : that._rowsArea.hasScroll()\r\n    },\r\n    _dimensionChanged: function() {\r\n        this.updateDimensions()\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        if (visible) {\r\n            this.updateDimensions()\r\n        }\r\n    },\r\n    _dispose: function() {\r\n        var that = this;\r\n        clearTimeout(that._hideLoadingTimeoutID);\r\n        that.callBase.apply(that, arguments);\r\n        if (that._dataController) {\r\n            that._dataController.dispose()\r\n        }\r\n    },\r\n    _tableElement: function() {\r\n        return this.$element().find(\"table\").first()\r\n    },\r\n    addWidgetPrefix: function(className) {\r\n        return \"dx-pivotgrid-\" + className\r\n    },\r\n    resize: function() {\r\n        this.updateDimensions()\r\n    },\r\n    isReady: function() {\r\n        return this.callBase() && !this._dataController.isLoading()\r\n    },\r\n    updateDimensions: function() {\r\n        var groupWidth, groupHeight, dataAreaHeights, rowsAreaHeights, resultHeights, resultWidths, rowsAreaColumnWidths, bordersWidth, hasRowsScroll, hasColumnsScroll, elementWidth, columnsAreaHeight, descriptionCellHeight, columnsAreaRowHeights, rowHeights, columnsAreaRowCount, needSynchronizeFieldPanel, that = this,\r\n            tableElement = that._tableElement(),\r\n            rowsArea = that._rowsArea,\r\n            columnsArea = that._columnsArea,\r\n            dataArea = that._dataArea,\r\n            totalWidth = 0,\r\n            totalHeight = 0,\r\n            rowsAreaWidth = 0,\r\n            scrollBarInfo = getScrollBarInfo(that.option(\"scrolling.useNative\")),\r\n            scrollBarWidth = scrollBarInfo.scrollBarWidth,\r\n            dataAreaCell = tableElement.find(\".\" + DATA_AREA_CELL_CLASS),\r\n            rowAreaCell = tableElement.find(\".\" + ROW_AREA_CELL_CLASS),\r\n            columnAreaCell = tableElement.find(\".\" + COLUMN_AREA_CELL_CLASS),\r\n            descriptionCell = tableElement.find(\".\" + DESCRIPTION_AREA_CELL_CLASS),\r\n            filterHeaderCell = tableElement.find(\".dx-filter-header\"),\r\n            rowFieldsHeader = that._rowFields,\r\n            d = new Deferred;\r\n        if (!windowUtils.hasWindow()) {\r\n            return\r\n        }\r\n        needSynchronizeFieldPanel = rowFieldsHeader.isVisible() && \"tree\" !== that.option(\"rowHeaderLayout\"), that._detectHasContainerHeight();\r\n        if (!dataArea.headElement().length) {\r\n            dataArea.tableElement().prepend(columnsArea.headElement())\r\n        }\r\n        if (needSynchronizeFieldPanel) {\r\n            rowsArea.updateColspans(rowFieldsHeader.getColumnsCount());\r\n            rowsArea.tableElement().prepend(rowFieldsHeader.headElement())\r\n        }\r\n        tableElement.addClass(INCOMPRESSIBLE_FIELDS_CLASS);\r\n        dataArea.reset();\r\n        rowsArea.reset();\r\n        columnsArea.reset();\r\n        rowFieldsHeader.reset();\r\n        commonUtils.deferUpdate(function() {\r\n            resultWidths = dataArea.getColumnsWidth();\r\n            rowHeights = rowsArea.getRowsHeight();\r\n            rowsAreaHeights = needSynchronizeFieldPanel ? rowHeights.slice(1) : rowHeights;\r\n            dataAreaHeights = dataArea.getRowsHeight();\r\n            descriptionCellHeight = descriptionCell.outerHeight() + (needSynchronizeFieldPanel ? rowHeights[0] : 0);\r\n            columnsAreaRowCount = that._dataController.getColumnsInfo().length;\r\n            resultHeights = pivotGridUtils.mergeArraysByMaxValue(rowsAreaHeights, dataAreaHeights.slice(columnsAreaRowCount));\r\n            columnsAreaRowHeights = dataAreaHeights.slice(0, columnsAreaRowCount);\r\n            columnsAreaHeight = getArraySum(columnsAreaRowHeights);\r\n            rowsAreaColumnWidths = rowsArea.getColumnsWidth();\r\n            if (that._hasHeight) {\r\n                bordersWidth = getCommonBorderWidth([columnAreaCell, dataAreaCell, tableElement, tableElement.find(\".dx-column-header\"), filterHeaderCell], \"height\");\r\n                groupHeight = that.$element().height() - filterHeaderCell.height() - tableElement.find(\".dx-data-header\").height() - (Math.max(dataArea.headElement().height(), columnAreaCell.height(), descriptionCellHeight) + bordersWidth)\r\n            }\r\n            totalWidth = dataArea.tableElement().width();\r\n            totalHeight = getArraySum(resultHeights);\r\n            if (!totalWidth || !totalHeight) {\r\n                d.resolve();\r\n                return\r\n            }\r\n            rowsAreaWidth = getArraySum(rowsAreaColumnWidths);\r\n            elementWidth = that.$element().width();\r\n            bordersWidth = getCommonBorderWidth([rowAreaCell, dataAreaCell, tableElement], \"width\");\r\n            groupWidth = elementWidth - rowsAreaWidth - bordersWidth;\r\n            groupWidth = groupWidth > 0 ? groupWidth : totalWidth;\r\n            hasRowsScroll = that._hasHeight && totalHeight - groupHeight >= 1;\r\n            hasColumnsScroll = totalWidth - groupWidth >= 1;\r\n            if (!hasRowsScroll) {\r\n                groupHeight = totalHeight + (hasColumnsScroll ? scrollBarWidth : 0)\r\n            }\r\n            commonUtils.deferRender(function() {\r\n                columnsArea.tableElement().append(dataArea.headElement());\r\n                rowFieldsHeader.tableElement().append(rowsArea.headElement());\r\n                if (!hasColumnsScroll && hasRowsScroll && scrollBarWidth) {\r\n                    adjustSizeArray(resultWidths, scrollBarWidth);\r\n                    totalWidth -= scrollBarWidth\r\n                }\r\n                if (descriptionCellHeight > columnsAreaHeight) {\r\n                    adjustSizeArray(columnsAreaRowHeights, columnsAreaHeight - descriptionCellHeight);\r\n                    columnsArea.setRowsHeight(columnsAreaRowHeights)\r\n                } else {\r\n                    if (rowFieldsHeader.isVisible()) {\r\n                        rowFieldsHeader.groupElement().css(\"marginTop\", columnsAreaHeight - descriptionCellHeight)\r\n                    }\r\n                }\r\n                tableElement.removeClass(INCOMPRESSIBLE_FIELDS_CLASS);\r\n                columnsArea.groupWidth(groupWidth);\r\n                columnsArea.processScrollBarSpacing(hasRowsScroll ? scrollBarWidth : 0);\r\n                columnsArea.setColumnsWidth(resultWidths);\r\n                rowsArea.groupHeight(that._hasHeight ? groupHeight : \"auto\");\r\n                rowsArea.processScrollBarSpacing(hasColumnsScroll ? scrollBarWidth : 0);\r\n                rowsArea.setColumnsWidth(rowsAreaColumnWidths);\r\n                rowsArea.setRowsHeight(resultHeights);\r\n                dataArea.setColumnsWidth(resultWidths);\r\n                dataArea.setRowsHeight(resultHeights);\r\n                dataArea.groupWidth(groupWidth);\r\n                dataArea.groupHeight(that._hasHeight ? groupHeight : \"auto\");\r\n                needSynchronizeFieldPanel && rowFieldsHeader.setColumnsWidth(rowsAreaColumnWidths);\r\n                dataAreaCell.toggleClass(BOTTOM_BORDER_CLASS, !hasRowsScroll);\r\n                rowAreaCell.toggleClass(BOTTOM_BORDER_CLASS, !hasRowsScroll);\r\n                if (!that._hasHeight && elementWidth !== that.$element().width()) {\r\n                    var diff = elementWidth - that.$element().width();\r\n                    if (!hasColumnsScroll) {\r\n                        adjustSizeArray(resultWidths, diff);\r\n                        columnsArea.setColumnsWidth(resultWidths);\r\n                        dataArea.setColumnsWidth(resultWidths)\r\n                    }\r\n                    dataArea.groupWidth(groupWidth - diff);\r\n                    columnsArea.groupWidth(groupWidth - diff)\r\n                }\r\n                if (\"virtual\" === that.option(\"scrolling.mode\") && !that._dataController.isEmpty()) {\r\n                    var virtualContentParams = that._dataController.calculateVirtualContentParams({\r\n                        contentWidth: totalWidth,\r\n                        contentHeight: totalHeight,\r\n                        rowCount: resultHeights.length,\r\n                        columnCount: resultWidths.length,\r\n                        viewportWidth: groupWidth,\r\n                        viewportHeight: that._hasHeight ? groupHeight : $(window).outerHeight()\r\n                    });\r\n                    dataArea.setVirtualContentParams({\r\n                        top: virtualContentParams.contentTop,\r\n                        left: virtualContentParams.contentLeft,\r\n                        width: virtualContentParams.width,\r\n                        height: virtualContentParams.height\r\n                    });\r\n                    rowsArea.setVirtualContentParams({\r\n                        top: virtualContentParams.contentTop,\r\n                        width: rowsAreaWidth,\r\n                        height: virtualContentParams.height\r\n                    });\r\n                    columnsArea.setVirtualContentParams({\r\n                        left: virtualContentParams.contentLeft,\r\n                        width: virtualContentParams.width,\r\n                        height: columnsArea.groupElement().height()\r\n                    })\r\n                }\r\n                var updateScrollableResults = [];\r\n                dataArea.processScroll(scrollBarInfo.scrollBarUseNative, hasColumnsScroll, hasRowsScroll);\r\n                each([columnsArea, rowsArea, dataArea], function(_, area) {\r\n                    updateScrollableResults.push(area && area.updateScrollable())\r\n                });\r\n                that._updateLoading();\r\n                that._renderNoDataText(dataAreaCell);\r\n                when.apply($, updateScrollableResults).done(function() {\r\n                    that._updateScrollPosition(columnsArea, rowsArea, dataArea);\r\n                    d.resolve()\r\n                })\r\n            })\r\n        });\r\n        return d\r\n    },\r\n    applyPartialDataSource: function(area, path, dataSource) {\r\n        this._dataController.applyPartialDataSource(area, path, dataSource)\r\n    }\r\n}).inherit(ExportMixin).include(chartIntegrationMixin);\r\nregisterComponent(\"dxPivotGrid\", PivotGrid);\r\nmodule.exports = PivotGrid;\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.summary_display_modes.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar typeUtils = require(\"../../core/utils/type\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    isDefined = typeUtils.isDefined,\r\n    pivotGridUtils = require(\"./ui.pivot_grid.utils\"),\r\n    findField = pivotGridUtils.findField,\r\n    foreachTree = pivotGridUtils.foreachTree,\r\n    COLUMN = \"column\",\r\n    ROW = \"row\",\r\n    NULL = null,\r\n    calculatePercentValue = function(value, totalValue) {\r\n        var result = value / totalValue;\r\n        if (!isDefined(value) || isNaN(result)) {\r\n            result = NULL\r\n        }\r\n        return result\r\n    },\r\n    _percentOfGrandTotal = function(e, dimension) {\r\n        return calculatePercentValue(e.value(), e.grandTotal(dimension).value())\r\n    },\r\n    percentOfParent = function(e, dimension) {\r\n        var parent = e.parent(dimension),\r\n            parentValue = parent ? parent.value() : e.value();\r\n        return calculatePercentValue(e.value(), parentValue)\r\n    },\r\n    createAbsoluteVariationExp = function(allowCrossGroup) {\r\n        return function(e) {\r\n            var prevCell = e.prev(COLUMN, allowCrossGroup),\r\n                prevValue = prevCell && prevCell.value();\r\n            if (isDefined(prevValue) && isDefined(e.value())) {\r\n                return e.value() - prevValue\r\n            }\r\n            return NULL\r\n        }\r\n    },\r\n    createPercentVariationExp = function(allowCrossGroup) {\r\n        var absoluteExp = createAbsoluteVariationExp(allowCrossGroup);\r\n        return function(e) {\r\n            var absVar = absoluteExp(e),\r\n                prevCell = e.prev(COLUMN, allowCrossGroup),\r\n                prevValue = prevCell && prevCell.value();\r\n            return absVar !== NULL && prevValue ? absVar / prevValue : NULL\r\n        }\r\n    },\r\n    summaryDictionary = {\r\n        percentOfColumnTotal: function(e) {\r\n            return percentOfParent(e, ROW)\r\n        },\r\n        percentOfRowTotal: function(e) {\r\n            return percentOfParent(e, COLUMN)\r\n        },\r\n        percentOfColumnGrandTotal: function(e) {\r\n            return _percentOfGrandTotal(e, ROW)\r\n        },\r\n        percentOfRowGrandTotal: function(e) {\r\n            return _percentOfGrandTotal(e, COLUMN)\r\n        },\r\n        percentOfGrandTotal: function(e) {\r\n            return _percentOfGrandTotal(e)\r\n        }\r\n    },\r\n    getPrevCellCrossGroup = function getPrevCellCrossGroup(cell, direction) {\r\n        if (!cell || !cell.parent(direction)) {\r\n            return\r\n        }\r\n        var prevCell = cell.prev(direction);\r\n        if (!prevCell) {\r\n            prevCell = getPrevCellCrossGroup(cell.parent(direction), direction)\r\n        }\r\n        return prevCell\r\n    },\r\n    createRunningTotalExpr = function(field) {\r\n        if (!field.runningTotal) {\r\n            return\r\n        }\r\n        var direction = field.runningTotal === COLUMN ? ROW : COLUMN;\r\n        return function(e) {\r\n            var prevCell = field.allowCrossGroupCalculation ? getPrevCellCrossGroup(e, direction) : e.prev(direction, false),\r\n                value = e.value(true),\r\n                prevValue = prevCell && prevCell.value(true);\r\n            if (isDefined(prevValue) && isDefined(value)) {\r\n                value = prevValue + value\r\n            } else {\r\n                if (isDefined(prevValue)) {\r\n                    value = prevValue\r\n                }\r\n            }\r\n            return value\r\n        }\r\n    };\r\n\r\nfunction createCache() {\r\n    return {\r\n        fields: {},\r\n        positions: {}\r\n    }\r\n}\r\n\r\nfunction getFieldPos(descriptions, field, cache) {\r\n    var fieldIndex, allFields, fieldParams = {\r\n        index: -1\r\n    };\r\n    if (!typeUtils.isObject(field)) {\r\n        if (cache.fields[field]) {\r\n            field = cache[field]\r\n        } else {\r\n            allFields = descriptions.columns.concat(descriptions.rows).concat(descriptions.values);\r\n            fieldIndex = findField(allFields, field);\r\n            field = cache[field] = allFields[fieldIndex]\r\n        }\r\n    }\r\n    if (field) {\r\n        var area = field.area || \"data\";\r\n        fieldParams = cache.positions[field.index] = cache.positions[field.index] || {\r\n            area: area,\r\n            index: inArray(field, descriptions[\"data\" === area ? \"values\" : area + \"s\"])\r\n        }\r\n    }\r\n    return fieldParams\r\n}\r\n\r\nfunction getPathFieldName(dimension) {\r\n    return dimension === ROW ? \"_rowPath\" : \"_columnPath\"\r\n}\r\nvar SummaryCell = function(columnPath, rowPath, data, descriptions, fieldIndex, fieldsCache) {\r\n    this._columnPath = columnPath;\r\n    this._rowPath = rowPath;\r\n    this._fieldIndex = fieldIndex;\r\n    this._fieldsCache = fieldsCache || createCache();\r\n    this._data = data;\r\n    this._descriptions = descriptions;\r\n    var cell = data.values && data.values[rowPath[0].index] && data.values[rowPath[0].index][columnPath[0].index];\r\n    if (cell) {\r\n        cell.originalCell = cell.originalCell || cell.slice();\r\n        this._cell = cell\r\n    }\r\n};\r\nSummaryCell.prototype = extend(SummaryCell.prototype, {\r\n    _getPath: function(dimension) {\r\n        return this[getPathFieldName(dimension)]\r\n    },\r\n    _getDimension: function(dimension) {\r\n        dimension = dimension === ROW ? \"rows\" : \"columns\";\r\n        return this._descriptions[dimension]\r\n    },\r\n    _createCell: function(config) {\r\n        var that = this;\r\n        return new SummaryCell(config._columnPath || that._columnPath, config._rowPath || that._rowPath, that._data, that._descriptions, that._fieldIndex)\r\n    },\r\n    parent: function(direction) {\r\n        var path = this._getPath(direction).slice(),\r\n            config = {};\r\n        path.shift();\r\n        if (path.length) {\r\n            config[getPathFieldName(direction)] = path;\r\n            return this._createCell(config)\r\n        }\r\n        return NULL\r\n    },\r\n    children: function(direction) {\r\n        var path = this._getPath(direction).slice(),\r\n            item = path[0],\r\n            result = [],\r\n            cellConfig = {};\r\n        if (item.children) {\r\n            for (var i = 0; i < item.children.length; i++) {\r\n                cellConfig[getPathFieldName(direction)] = [item.children[i]].concat(path.slice());\r\n                result.push(this._createCell(cellConfig))\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    grandTotal: function(direction) {\r\n        var config = {},\r\n            rowPath = this._rowPath,\r\n            columnPath = this._columnPath,\r\n            dimensionPath = this._getPath(direction),\r\n            pathFieldName = getPathFieldName(direction);\r\n        if (!direction) {\r\n            config._rowPath = [rowPath[rowPath.length - 1]];\r\n            config._columnPath = [columnPath[columnPath.length - 1]]\r\n        } else {\r\n            config[pathFieldName] = [dimensionPath[dimensionPath.length - 1]]\r\n        }\r\n        return this._createCell(config)\r\n    },\r\n    next: function(direction, allowCrossGroup) {\r\n        var siblings, index, currentPath = this._getPath(direction),\r\n            item = currentPath[0],\r\n            parent = this.parent(direction);\r\n        if (parent) {\r\n            index = inArray(item, currentPath[1].children);\r\n            siblings = parent.children(direction);\r\n            if (siblings[index + 1]) {\r\n                return siblings[index + 1]\r\n            }\r\n        }\r\n        if (allowCrossGroup && parent) {\r\n            do {\r\n                parent = parent.next(direction, allowCrossGroup);\r\n                siblings = parent ? parent.children(direction) : []\r\n            } while (parent && !siblings.length);\r\n            return siblings[0] || NULL\r\n        }\r\n        return NULL\r\n    },\r\n    prev: function(direction, allowCrossGroup) {\r\n        var siblings, index, currentPath = this._getPath(direction),\r\n            item = currentPath[0],\r\n            parent = this.parent(direction);\r\n        if (parent) {\r\n            index = inArray(item, currentPath[1].children);\r\n            siblings = parent.children(direction);\r\n            if (siblings[index - 1]) {\r\n                return siblings[index - 1]\r\n            }\r\n        }\r\n        if (allowCrossGroup && parent) {\r\n            do {\r\n                parent = parent.prev(direction, allowCrossGroup);\r\n                siblings = parent ? parent.children(direction) : []\r\n            } while (parent && !siblings.length);\r\n            return siblings[siblings.length - 1] || NULL\r\n        }\r\n        return NULL\r\n    },\r\n    cell: function() {\r\n        return this._cell\r\n    },\r\n    field: function field(area) {\r\n        var path = this._getPath(area),\r\n            descriptions = this._getDimension(area),\r\n            field = descriptions[path.length - 2];\r\n        return field || NULL\r\n    },\r\n    child: function(direction, fieldValue) {\r\n        var childLevelField, children = this.children(direction);\r\n        for (var i = 0; i < children.length; i++) {\r\n            childLevelField = childLevelField || children[i].field(direction);\r\n            if (children[i].value(childLevelField) === fieldValue) {\r\n                return children[i]\r\n            }\r\n        }\r\n        return NULL\r\n    },\r\n    slice: function(field, value) {\r\n        var childItems, path, currentValue, level, that = this,\r\n            config = {},\r\n            fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache),\r\n            area = fieldPos.area,\r\n            fieldIndex = fieldPos.index,\r\n            sliceCell = NULL,\r\n            newPath = [];\r\n        if (area === ROW || area === COLUMN) {\r\n            path = this._getPath(area).slice();\r\n            level = fieldIndex !== -1 && path.length - 2 - fieldIndex;\r\n            if (path[level]) {\r\n                newPath[path.length - 1] = path[path.length - 1];\r\n                for (var i = level; i >= 0; i--) {\r\n                    if (path[i + 1]) {\r\n                        childItems = path[i + 1].children || [];\r\n                        currentValue = i === level ? value : path[i].value;\r\n                        path[i] = void 0;\r\n                        for (var childIndex = 0; childIndex < childItems.length; childIndex++) {\r\n                            if (childItems[childIndex].value === currentValue) {\r\n                                path[i] = childItems[childIndex];\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    if (void 0 === path[i]) {\r\n                        return sliceCell\r\n                    }\r\n                }\r\n                config[getPathFieldName(area)] = path;\r\n                sliceCell = that._createCell(config)\r\n            }\r\n        }\r\n        return sliceCell\r\n    },\r\n    value: function(arg1, arg2) {\r\n        var path, level, cell = this._cell,\r\n            fieldIndex = this._fieldIndex,\r\n            fistArgIsBoolean = true === arg1 || false === arg1,\r\n            field = !fistArgIsBoolean ? arg1 : NULL,\r\n            needCalculatedValue = fistArgIsBoolean && arg1 || arg2;\r\n        if (isDefined(field)) {\r\n            var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n            fieldIndex = fieldPos.index;\r\n            if (\"data\" !== fieldPos.area) {\r\n                path = this._getPath(fieldPos.area);\r\n                level = fieldIndex !== -1 && path.length - 2 - fieldIndex;\r\n                return path[level] && path[level].value\r\n            }\r\n        }\r\n        if (cell && cell.originalCell) {\r\n            return needCalculatedValue ? cell[fieldIndex] : cell.originalCell[fieldIndex]\r\n        }\r\n        return NULL\r\n    }\r\n});\r\n\r\nfunction getExpression(field) {\r\n    var summaryDisplayMode = field.summaryDisplayMode,\r\n        crossGroupCalculation = field.allowCrossGroupCalculation,\r\n        expression = NULL;\r\n    if (typeUtils.isFunction(field.calculateSummaryValue)) {\r\n        expression = field.calculateSummaryValue\r\n    } else {\r\n        if (summaryDisplayMode) {\r\n            if (\"absoluteVariation\" === summaryDisplayMode) {\r\n                expression = createAbsoluteVariationExp(crossGroupCalculation)\r\n            } else {\r\n                if (\"percentVariation\" === summaryDisplayMode) {\r\n                    expression = createPercentVariationExp(crossGroupCalculation)\r\n                } else {\r\n                    expression = summaryDictionary[summaryDisplayMode]\r\n                }\r\n            }\r\n            if (expression && !field.format && summaryDisplayMode.indexOf(\"percent\") !== -1) {\r\n                pivotGridUtils.setFieldProperty(field, \"format\", \"percent\")\r\n            }\r\n        }\r\n    }\r\n    return expression\r\n}\r\n\r\nfunction processDataCell(data, rowIndex, columnIndex, isRunningTotalCalculation) {\r\n    var values = data.values[rowIndex][columnIndex] = data.values[rowIndex][columnIndex] || [],\r\n        originalCell = values.originalCell;\r\n    if (!originalCell) {\r\n        return\r\n    }\r\n    if (values.allowResetting || !isRunningTotalCalculation) {\r\n        data.values[rowIndex][columnIndex] = originalCell.slice()\r\n    }\r\n    data.values[rowIndex][columnIndex].allowResetting = isRunningTotalCalculation\r\n}\r\nexports.applyDisplaySummaryMode = function(descriptions, data) {\r\n    var expressions = [],\r\n        columnElements = [{\r\n            index: data.grandTotalColumnIndex,\r\n            children: data.columns\r\n        }],\r\n        rowElements = [{\r\n            index: data.grandTotalRowIndex,\r\n            children: data.rows\r\n        }],\r\n        valueFields = descriptions.values,\r\n        fieldsCache = createCache();\r\n    data.values = data.values || [];\r\n    foreachTree(rowElements, function(rowPath) {\r\n        var rowItem = rowPath[0];\r\n        rowItem.isEmpty = [];\r\n        data.values[rowItem.index] = data.values[rowItem.index] || [];\r\n        foreachTree(columnElements, function(columnPath) {\r\n            var expression, expressionArg, cell, field, isEmptyCell, value, columnItem = columnPath[0];\r\n            columnItem.isEmpty = columnItem.isEmpty || [];\r\n            processDataCell(data, rowItem.index, columnItem.index, false);\r\n            for (var i = 0; i < valueFields.length; i++) {\r\n                field = valueFields[i];\r\n                expression = expressions[i] = void 0 === expressions[i] ? getExpression(field) : expressions[i];\r\n                isEmptyCell = false;\r\n                if (expression) {\r\n                    expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\r\n                    cell = expressionArg.cell();\r\n                    value = cell[i] = expression(expressionArg);\r\n                    isEmptyCell = null === value || void 0 === value\r\n                }\r\n                if (void 0 === columnItem.isEmpty[i]) {\r\n                    columnItem.isEmpty[i] = true\r\n                }\r\n                if (void 0 === rowItem.isEmpty[i]) {\r\n                    rowItem.isEmpty[i] = true\r\n                }\r\n                if (!isEmptyCell) {\r\n                    rowItem.isEmpty[i] = columnItem.isEmpty[i] = false\r\n                }\r\n            }\r\n        }, false)\r\n    }, false);\r\n    data.isEmptyGrandTotalRow = rowElements[0].isEmpty;\r\n    data.isEmptyGrandTotalColumn = columnElements[0].isEmpty\r\n};\r\nexports.applyRunningTotal = function(descriptions, data) {\r\n    var expressions = [],\r\n        columnElements = [{\r\n            index: data.grandTotalColumnIndex,\r\n            children: data.columns\r\n        }],\r\n        rowElements = [{\r\n            index: data.grandTotalRowIndex,\r\n            children: data.rows\r\n        }],\r\n        valueFields = descriptions.values,\r\n        fieldsCache = createCache();\r\n    data.values = data.values || [];\r\n    foreachTree(rowElements, function(rowPath) {\r\n        var rowItem = rowPath[0];\r\n        data.values[rowItem.index] = data.values[rowItem.index] || [];\r\n        foreachTree(columnElements, function(columnPath) {\r\n            var expression, expressionArg, cell, field, columnItem = columnPath[0];\r\n            processDataCell(data, rowItem.index, columnItem.index, true);\r\n            for (var i = 0; i < valueFields.length; i++) {\r\n                field = valueFields[i];\r\n                expression = expressions[i] = void 0 === expressions[i] ? createRunningTotalExpr(field) : expressions[i];\r\n                if (expression) {\r\n                    expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\r\n                    cell = expressionArg.cell();\r\n                    cell[i] = expression(expressionArg)\r\n                }\r\n            }\r\n        }, false)\r\n    }, false)\r\n};\r\nexports.createMockSummaryCell = function(descriptions, fields, indices) {\r\n    var summaryCell = new SummaryCell([], [], {}, descriptions, 0);\r\n    summaryCell.value = function(fieldId) {\r\n        if (isDefined(fieldId)) {\r\n            var index = findField(fields, fieldId),\r\n                field = fields[index];\r\n            if (!indices[index] && field && !isDefined(field.area)) {\r\n                descriptions.values.push(field);\r\n                indices[index] = true\r\n            }\r\n        }\r\n    };\r\n    summaryCell.grandTotal = function() {\r\n        return this\r\n    };\r\n    summaryCell.children = function() {\r\n        return []\r\n    };\r\n    return summaryCell\r\n};\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.utils.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar typeUtils = require(\"../../core/utils/type\"),\r\n    ajax = require(\"../../core/utils/ajax\"),\r\n    dataCoreUtils = require(\"../../core/utils/data\"),\r\n    iteratorUtils = require(\"../../core/utils/iterator\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    dateLocalization = require(\"../../localization/date\"),\r\n    formatHelper = require(\"../../format_helper\"),\r\n    DataSourceModule = require(\"../../data/data_source/data_source\"),\r\n    ArrayStore = require(\"../../data/array_store\"),\r\n    deferredUtils = require(\"../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred;\r\nvar setFieldProperty = exports.setFieldProperty = function(field, property, value, isInitialization) {\r\n    var initProperties = field._initProperties = field._initProperties || {},\r\n        initValue = isInitialization ? value : field[property];\r\n    if (!initProperties.hasOwnProperty(property) || isInitialization) {\r\n        initProperties[property] = initValue\r\n    }\r\n    field[property] = value\r\n};\r\nexports.sendRequest = function(options) {\r\n    return ajax.sendRequest(options)\r\n};\r\nvar foreachTreeAsyncDate = new Date;\r\n\r\nfunction createForeachTreeFunc(isAsync) {\r\n    var foreachTreeFunc = function foreachTreeFunc(items, callback, parentAtFirst, members, index, isChildrenProcessing) {\r\n        members = members || [];\r\n        items = items || [];\r\n        var item, i, deferred, childrenDeferred;\r\n        index = index || 0;\r\n\r\n        function createForeachTreeAsyncHandler(deferred, i, isChildrenProcessing) {\r\n            when(foreachTreeFunc(items, callback, parentAtFirst, members, i, isChildrenProcessing)).done(deferred.resolve)\r\n        }\r\n        for (i = index; i < items.length; i++) {\r\n            if (isAsync && i > index && i % 1e4 === 0 && new Date - foreachTreeAsyncDate >= 300) {\r\n                foreachTreeAsyncDate = new Date;\r\n                deferred = new Deferred;\r\n                setTimeout(createForeachTreeAsyncHandler(deferred, i, false), 0);\r\n                return deferred\r\n            }\r\n            item = items[i];\r\n            if (!isChildrenProcessing) {\r\n                members.unshift(item);\r\n                if (parentAtFirst && false === callback(members, i)) {\r\n                    return\r\n                }\r\n                if (item.children) {\r\n                    childrenDeferred = foreachTreeFunc(item.children, callback, parentAtFirst, members);\r\n                    if (isAsync && childrenDeferred) {\r\n                        deferred = new Deferred;\r\n                        childrenDeferred.done(createForeachTreeAsyncHandler(deferred, i, true));\r\n                        return deferred\r\n                    }\r\n                }\r\n            }\r\n            isChildrenProcessing = false;\r\n            if (!parentAtFirst && false === callback(members, i)) {\r\n                return\r\n            }\r\n            members.shift();\r\n            if (items[i] !== item) {\r\n                i--\r\n            }\r\n        }\r\n    };\r\n    return foreachTreeFunc\r\n}\r\nexports.foreachTree = createForeachTreeFunc(false);\r\nexports.foreachTreeAsync = createForeachTreeFunc(true);\r\nexports.findField = function(fields, id) {\r\n    var i, field;\r\n    if (fields && typeUtils.isDefined(id)) {\r\n        for (i = 0; i < fields.length; i++) {\r\n            field = fields[i];\r\n            if (field.name === id || field.caption === id || field.dataField === id || field.index === id) {\r\n                return i\r\n            }\r\n        }\r\n    }\r\n    return -1\r\n};\r\nexports.formatValue = function(value, options) {\r\n    var formatObject = {\r\n        value: value,\r\n        valueText: formatHelper.format(value, options.format) || \"\"\r\n    };\r\n    return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText\r\n};\r\nexports.getCompareFunction = function(valueSelector) {\r\n    return function(a, b) {\r\n        var result = 0,\r\n            valueA = valueSelector(a),\r\n            valueB = valueSelector(b),\r\n            aIsDefined = isDefined(valueA),\r\n            bIsDefined = isDefined(valueB);\r\n        if (aIsDefined && bIsDefined) {\r\n            if (valueA > valueB) {\r\n                result = 1\r\n            } else {\r\n                if (valueA < valueB) {\r\n                    result = -1\r\n                }\r\n            }\r\n        }\r\n        if (aIsDefined && !bIsDefined) {\r\n            result = 1\r\n        }\r\n        if (!aIsDefined && bIsDefined) {\r\n            result = -1\r\n        }\r\n        return result\r\n    }\r\n};\r\nexports.createPath = function(items) {\r\n    var i, result = [];\r\n    for (i = items.length - 1; i >= 0; i--) {\r\n        result.push(items[i].key || items[i].value)\r\n    }\r\n    return result\r\n};\r\nexports.foreachDataLevel = function foreachDataLevel(data, callback, index, childrenField) {\r\n    var item, i;\r\n    index = index || 0;\r\n    childrenField = childrenField || \"children\";\r\n    if (data.length) {\r\n        callback(data, index)\r\n    }\r\n    for (i = 0; i < data.length; i++) {\r\n        item = data[i];\r\n        if (item[childrenField] && item[childrenField].length) {\r\n            foreachDataLevel(item[childrenField], callback, index + 1, childrenField)\r\n        }\r\n    }\r\n};\r\nexports.mergeArraysByMaxValue = function(values1, values2) {\r\n    var i, result = [];\r\n    for (i = 0; i < values1.length; i++) {\r\n        result.push(Math.max(values1[i] || 0, values2[i] || 0))\r\n    }\r\n    return result\r\n};\r\nexports.getExpandedLevel = function(options, axisName) {\r\n    var dimensions = options[axisName],\r\n        expandLevel = 0,\r\n        expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || [];\r\n    if (options.headerName === axisName) {\r\n        expandLevel = options.path.length\r\n    } else {\r\n        iteratorUtils.each(expandedPaths, function(_, path) {\r\n            expandLevel = Math.max(expandLevel, path.length)\r\n        })\r\n    }\r\n    while (dimensions[expandLevel + 1] && dimensions[expandLevel].expanded) {\r\n        expandLevel++\r\n    }\r\n    return expandLevel\r\n};\r\n\r\nfunction createGroupFields(item) {\r\n    return iteratorUtils.map([\"year\", \"quarter\", \"month\"], function(value, index) {\r\n        return extend({}, item, {\r\n            groupInterval: value,\r\n            groupIndex: index\r\n        })\r\n    })\r\n}\r\n\r\nfunction parseFields(dataSource, fieldsList, path, fieldsDataType) {\r\n    var result = [];\r\n    iteratorUtils.each(fieldsList || [], function(field, value) {\r\n        if (field && 0 === field.indexOf(\"__\")) {\r\n            return\r\n        }\r\n        var items, dataIndex = 1,\r\n            currentPath = path.length ? path + \".\" + field : field,\r\n            dataType = fieldsDataType[currentPath],\r\n            getter = dataCoreUtils.compileGetter(currentPath);\r\n        while (!typeUtils.isDefined(value) && dataSource[dataIndex]) {\r\n            value = getter(dataSource[dataIndex]);\r\n            dataIndex++\r\n        }\r\n        if (!dataType && typeUtils.isDefined(value)) {\r\n            dataType = typeUtils.type(value)\r\n        }\r\n        items = [{\r\n            dataField: currentPath,\r\n            dataType: dataType,\r\n            groupName: \"date\" === dataType ? field : void 0,\r\n            groupInterval: void 0,\r\n            displayFolder: path\r\n        }];\r\n        if (\"date\" === dataType) {\r\n            items = items.concat(createGroupFields(items[0]))\r\n        } else {\r\n            if (\"object\" === dataType) {\r\n                items = parseFields(dataSource, value, currentPath, fieldsDataType)\r\n            }\r\n        }\r\n        result.push.apply(result, items)\r\n    });\r\n    return result\r\n}\r\nexports.discoverObjectFields = function(items, fields) {\r\n    var fieldsDataType = exports.getFieldsDataType(fields);\r\n    return parseFields(items, items[0], \"\", fieldsDataType)\r\n};\r\nexports.getFieldsDataType = function(fields) {\r\n    var result = {};\r\n    iteratorUtils.each(fields, function(_, field) {\r\n        result[field.dataField] = result[field.dataField] || field.dataType\r\n    });\r\n    return result\r\n};\r\nvar DATE_INTERVAL_FORMATS = {\r\n    month: function(value) {\r\n        return dateLocalization.getMonthNames()[value - 1]\r\n    },\r\n    quarter: function(value) {\r\n        return dateLocalization.format(new Date(2e3, 3 * value - 1), \"quarter\")\r\n    },\r\n    dayOfWeek: function(value) {\r\n        return dateLocalization.getDayNames()[value]\r\n    }\r\n};\r\nexports.setDefaultFieldValueFormatting = function(field) {\r\n    if (\"date\" === field.dataType) {\r\n        if (!field.format) {\r\n            setFieldProperty(field, \"format\", DATE_INTERVAL_FORMATS[field.groupInterval])\r\n        }\r\n    } else {\r\n        if (\"number\" === field.dataType) {\r\n            var groupInterval = typeUtils.isNumeric(field.groupInterval) && field.groupInterval > 0 && field.groupInterval;\r\n            if (groupInterval && !field.customizeText) {\r\n                setFieldProperty(field, \"customizeText\", function(formatObject) {\r\n                    var secondValue = formatObject.value + groupInterval,\r\n                        secondValueText = formatHelper.format(secondValue, field.format);\r\n                    return formatObject.valueText && secondValueText ? formatObject.valueText + \" - \" + secondValueText : \"\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.getFiltersByPath = function(fields, path) {\r\n    var result = [];\r\n    path = path || [];\r\n    for (var i = 0; i < path.length; i++) {\r\n        result.push(extend({}, fields[i], {\r\n            groupIndex: null,\r\n            groupName: null,\r\n            filterType: \"include\",\r\n            filterValues: [path[i]]\r\n        }))\r\n    }\r\n    return result\r\n};\r\nexports.storeDrillDownMixin = {\r\n    createDrillDownDataSource: function(descriptions, params) {\r\n        function createCustomStoreMethod(methodName) {\r\n            return function(options) {\r\n                var d;\r\n                if (arrayStore) {\r\n                    d = arrayStore[methodName](options)\r\n                } else {\r\n                    d = new Deferred;\r\n                    when(items).done(function(data) {\r\n                        arrayStore = new ArrayStore(data);\r\n                        arrayStore[methodName](options).done(d.resolve).fail(d.reject)\r\n                    }).fail(d.reject)\r\n                }\r\n                return d\r\n            }\r\n        }\r\n        var arrayStore, items = this.getDrillDownItems(descriptions, params),\r\n            dataSource = new DataSourceModule.DataSource({\r\n                load: createCustomStoreMethod(\"load\"),\r\n                totalCount: createCustomStoreMethod(\"totalCount\"),\r\n                key: this.key()\r\n            });\r\n        return dataSource\r\n    }\r\n};\r\nexports.capitalizeFirstLetter = function(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1)\r\n};\r\n","/**\r\n * DevExtreme (ui/pivot_grid/ui.sortable.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    isDefined = require(\"../../core/utils/type\").isDefined,\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    each = require(\"../../core/utils/iterator\").each,\r\n    eventUtils = require(\"../../events/utils\"),\r\n    addNamespace = eventUtils.addNamespace,\r\n    registerComponent = require(\"../../core/component_registrator\"),\r\n    DOMComponent = require(\"../../core/dom_component\"),\r\n    dragEvents = require(\"../../events/drag\"),\r\n    getSwatchContainer = require(\"../widget/swatch_container\");\r\nvar SORTABLE_NAMESPACE = \"dxSortable\",\r\n    SORTABLE_CLASS = \"dx-sortable\",\r\n    SCROLL_STEP = 2,\r\n    START_SCROLL_OFFSET = 20,\r\n    SCROLL_TIMEOUT = 10;\r\n\r\nfunction elementHasPoint(element, x, y) {\r\n    var $item = $(element),\r\n        offset = $item.offset();\r\n    if (x >= offset.left && x <= offset.left + $item.outerWidth(true)) {\r\n        if (y >= offset.top && y <= offset.top + $item.outerHeight(true)) {\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkHorizontalPosition(position, itemOffset, rtl) {\r\n    if (isDefined(itemOffset.posHorizontal)) {\r\n        return rtl ? position > itemOffset.posHorizontal : position < itemOffset.posHorizontal\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nfunction getIndex($items, $item) {\r\n    var index = -1,\r\n        itemElement = $item.get(0);\r\n    each($items, function(elementIndex, element) {\r\n        var $element = $(element);\r\n        if (!($element.attr(\"item-group\") && $element.attr(\"item-group\") === $items.eq(elementIndex - 1).attr(\"item-group\"))) {\r\n            index++\r\n        }\r\n        if (element === itemElement) {\r\n            return false\r\n        }\r\n    });\r\n    return index === $items.length ? -1 : index\r\n}\r\n\r\nfunction getTargetGroup(e, $groups) {\r\n    var result;\r\n    each($groups, function() {\r\n        if (elementHasPoint(this, e.pageX, e.pageY)) {\r\n            result = $(this)\r\n        }\r\n    });\r\n    return result\r\n}\r\n\r\nfunction getItemsOffset($elements, isVertical, $itemsContainer) {\r\n    var result = [],\r\n        $item = [];\r\n    for (var i = 0; i < $elements.length; i += $item.length) {\r\n        $item = $elements.eq(i);\r\n        if ($item.attr(\"item-group\")) {\r\n            $item = $itemsContainer.find(\"[item-group='\" + $item.attr(\"item-group\") + \"']\")\r\n        }\r\n        if ($item.is(\":visible\")) {\r\n            var offset = {\r\n                item: $item,\r\n                index: result.length,\r\n                posHorizontal: isVertical ? void 0 : ($item.last().outerWidth(true) + $item.last().offset().left + $item.offset().left) / 2\r\n            };\r\n            if (isVertical) {\r\n                offset.posVertical = ($item.last().offset().top + $item.offset().top + $item.last().outerHeight(true)) / 2\r\n            } else {\r\n                offset.posVertical = $item.last().outerHeight(true) + $item.last().offset().top\r\n            }\r\n            result.push(offset)\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getScrollWrapper(scrollable) {\r\n    var timeout = null,\r\n        scrollTop = scrollable.scrollTop(),\r\n        $element = scrollable.$element(),\r\n        top = $element.offset().top,\r\n        height = $element.height(),\r\n        delta = 0;\r\n\r\n    function onScroll(e) {\r\n        scrollTop = e.scrollOffset.top\r\n    }\r\n    scrollable.on(\"scroll\", onScroll);\r\n\r\n    function move() {\r\n        stop();\r\n        scrollable.scrollTo(scrollTop += delta);\r\n        timeout = setTimeout(move, SCROLL_TIMEOUT)\r\n    }\r\n\r\n    function stop() {\r\n        clearTimeout(timeout)\r\n    }\r\n\r\n    function moveIfNeed(event) {\r\n        if (event.pageY <= top + START_SCROLL_OFFSET) {\r\n            delta = -SCROLL_STEP\r\n        } else {\r\n            if (event.pageY >= top + height - START_SCROLL_OFFSET) {\r\n                delta = SCROLL_STEP\r\n            } else {\r\n                delta = 0;\r\n                stop();\r\n                return\r\n            }\r\n        }\r\n        move()\r\n    }\r\n    return {\r\n        moveIfNeed: moveIfNeed,\r\n        element: function() {\r\n            return $element\r\n        },\r\n        dispose: function() {\r\n            stop();\r\n            scrollable.off(\"scroll\", onScroll)\r\n        }\r\n    }\r\n}\r\nvar Sortable = DOMComponent.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            onChanged: null,\r\n            onDragging: null,\r\n            itemRender: null,\r\n            groupSelector: null,\r\n            itemSelector: \".dx-sort-item\",\r\n            itemContainerSelector: \".dx-sortable\",\r\n            sourceClass: \"dx-drag-source\",\r\n            dragClass: \"dx-drag\",\r\n            targetClass: \"dx-drag-target\",\r\n            direction: \"vertical\",\r\n            allowDragging: true,\r\n            groupFilter: null,\r\n            useIndicator: false\r\n        })\r\n    },\r\n    _renderItem: function($sourceItem, target) {\r\n        var $item, itemRender = this.option(\"itemRender\");\r\n        if (itemRender) {\r\n            $item = itemRender($sourceItem, target)\r\n        } else {\r\n            $item = $sourceItem.clone();\r\n            $item.css({\r\n                width: $sourceItem.width(),\r\n                height: $sourceItem.height()\r\n            })\r\n        }\r\n        return $item\r\n    },\r\n    _renderIndicator: function($item, isVertical, $targetGroup, isLast) {\r\n        var height = $item.outerHeight(true),\r\n            width = $item.outerWidth(true),\r\n            top = $item.offset().top - $targetGroup.offset().top,\r\n            left = $item.offset().left - $targetGroup.offset().left;\r\n        this._indicator.css({\r\n            position: \"absolute\",\r\n            top: isLast && isVertical ? top + height : top,\r\n            left: isLast && !isVertical ? left + width : left\r\n        }).toggleClass(\"dx-position-indicator-horizontal\", !isVertical).toggleClass(\"dx-position-indicator-vertical\", !!isVertical).toggleClass(\"dx-position-indicator-last\", !!isLast).height(\"\").width(\"\").appendTo($targetGroup);\r\n        isVertical ? this._indicator.width(width) : this._indicator.height(height)\r\n    },\r\n    _renderDraggable: function($sourceItem) {\r\n        this._$draggable && this._$draggable.remove();\r\n        this._$draggable = this._renderItem($sourceItem, \"drag\").addClass(this.option(\"dragClass\")).appendTo(getSwatchContainer($sourceItem)).css({\r\n            zIndex: 1e6,\r\n            position: \"absolute\"\r\n        })\r\n    },\r\n    _detachEventHandlers: function() {\r\n        var dragEventsString = [dragEvents.move, dragEvents.start, dragEvents.end, dragEvents.enter, dragEvents.leave, dragEvents.drop].join(\" \");\r\n        eventsEngine.off(this._getEventListener(), addNamespace(dragEventsString, SORTABLE_NAMESPACE))\r\n    },\r\n    _getItemOffset: function(isVertical, itemsOffset, e) {\r\n        for (var i = 0; i < itemsOffset.length; i++) {\r\n            var shouldInsert, sameLine = e.pageY < itemsOffset[i].posVertical;\r\n            if (isVertical) {\r\n                shouldInsert = sameLine\r\n            } else {\r\n                if (sameLine) {\r\n                    shouldInsert = checkHorizontalPosition(e.pageX, itemsOffset[i], this.option(\"rtlEnabled\"));\r\n                    if (!shouldInsert && itemsOffset[i + 1] && itemsOffset[i + 1].posVertical > itemsOffset[i].posVertical) {\r\n                        shouldInsert = true\r\n                    }\r\n                }\r\n            }\r\n            if (shouldInsert) {\r\n                return itemsOffset[i]\r\n            }\r\n        }\r\n    },\r\n    _getEventListener: function() {\r\n        var groupSelector = this.option(\"groupSelector\"),\r\n            element = this.$element();\r\n        return groupSelector ? element.find(groupSelector) : element\r\n    },\r\n    _attachEventHandlers: function() {\r\n        var $sourceItem, sourceIndex, $targetItem, $targetGroup, startPositions, sourceGroup, $groups, that = this,\r\n            itemSelector = that.option(\"itemSelector\"),\r\n            itemContainerSelector = that.option(\"itemContainerSelector\"),\r\n            groupSelector = that.option(\"groupSelector\"),\r\n            sourceClass = that.option(\"sourceClass\"),\r\n            targetClass = that.option(\"targetClass\"),\r\n            onDragging = that.option(\"onDragging\"),\r\n            groupFilter = that.option(\"groupFilter\"),\r\n            element = that.$element(),\r\n            scrollWrapper = null,\r\n            targetIndex = -1;\r\n        var setStartPositions = function() {\r\n            startPositions = [];\r\n            each($sourceItem, function(_, item) {\r\n                startPositions.push($(item).offset())\r\n            })\r\n        };\r\n        var createGroups = function() {\r\n            if (!groupSelector) {\r\n                return element\r\n            } else {\r\n                return groupFilter ? $(groupSelector).filter(groupFilter) : element.find(groupSelector)\r\n            }\r\n        };\r\n        var disposeScrollWrapper = function() {\r\n            scrollWrapper && scrollWrapper.dispose();\r\n            scrollWrapper = null\r\n        };\r\n        var invokeOnDraggingEvent = function() {\r\n            var draggingArgs = {\r\n                sourceGroup: sourceGroup,\r\n                sourceIndex: sourceIndex,\r\n                sourceElement: $sourceItem,\r\n                targetGroup: $targetGroup.attr(\"group\"),\r\n                targetIndex: $targetGroup.find(itemSelector).index($targetItem)\r\n            };\r\n            onDragging && onDragging(draggingArgs);\r\n            if (draggingArgs.cancel) {\r\n                $targetGroup = void 0\r\n            }\r\n        };\r\n        that._detachEventHandlers();\r\n        if (that.option(\"allowDragging\")) {\r\n            var $eventListener = that._getEventListener();\r\n            eventsEngine.on($eventListener, addNamespace(dragEvents.start, SORTABLE_NAMESPACE), itemSelector, function(e) {\r\n                $sourceItem = $(e.currentTarget);\r\n                var $sourceGroup = $sourceItem.closest(groupSelector);\r\n                sourceGroup = $sourceGroup.attr(\"group\");\r\n                sourceIndex = getIndex((groupSelector ? $sourceGroup : element).find(itemSelector), $sourceItem);\r\n                if ($sourceItem.attr(\"item-group\")) {\r\n                    $sourceItem = $sourceGroup.find(\"[item-group='\" + $sourceItem.attr(\"item-group\") + \"']\")\r\n                }\r\n                that._renderDraggable($sourceItem);\r\n                $targetItem = that._renderItem($sourceItem, \"target\").addClass(targetClass);\r\n                $sourceItem.addClass(sourceClass);\r\n                setStartPositions();\r\n                $groups = createGroups();\r\n                that._indicator = $(\"<div>\").addClass(\"dx-position-indicator\")\r\n            });\r\n            eventsEngine.on($eventListener, addNamespace(dragEvents.move, SORTABLE_NAMESPACE), function(e) {\r\n                var $item, $itemContainer, $items, $lastItem, isVertical, itemOffset, $prevItem, itemsOffset = [];\r\n                if (!$sourceItem) {\r\n                    return\r\n                }\r\n                targetIndex = -1;\r\n                that._indicator.detach();\r\n                each(that._$draggable, function(index, draggableElement) {\r\n                    $(draggableElement).css({\r\n                        top: startPositions[index].top + e.offset.y,\r\n                        left: startPositions[index].left + e.offset.x\r\n                    })\r\n                });\r\n                $targetGroup && $targetGroup.removeClass(targetClass);\r\n                $targetGroup = getTargetGroup(e, $groups);\r\n                $targetGroup && invokeOnDraggingEvent();\r\n                if ($targetGroup && scrollWrapper && $targetGroup.get(0) !== scrollWrapper.element().get(0)) {\r\n                    disposeScrollWrapper()\r\n                }\r\n                scrollWrapper && scrollWrapper.moveIfNeed(e);\r\n                if (!$targetGroup) {\r\n                    $targetItem.detach();\r\n                    return\r\n                }\r\n                if (!scrollWrapper && $targetGroup.attr(\"allow-scrolling\")) {\r\n                    scrollWrapper = getScrollWrapper($targetGroup.dxScrollable(\"instance\"))\r\n                }\r\n                $targetGroup.addClass(targetClass);\r\n                $itemContainer = $targetGroup.find(itemContainerSelector);\r\n                $items = $itemContainer.find(itemSelector);\r\n                var targetSortable = $targetGroup.closest(\".\" + SORTABLE_CLASS).data(\"dxSortable\"),\r\n                    useIndicator = targetSortable.option(\"useIndicator\");\r\n                isVertical = \"vertical\" === (targetSortable || that).option(\"direction\");\r\n                itemsOffset = getItemsOffset($items, isVertical, $itemContainer);\r\n                itemOffset = that._getItemOffset(isVertical, itemsOffset, e);\r\n                if (itemOffset) {\r\n                    $item = itemOffset.item;\r\n                    $prevItem = itemsOffset[itemOffset.index - 1] && itemsOffset[itemOffset.index - 1].item;\r\n                    if ($item.hasClass(sourceClass) || $prevItem && $prevItem.hasClass(sourceClass) && $prevItem.is(\":visible\")) {\r\n                        $targetItem.detach();\r\n                        return\r\n                    }\r\n                    targetIndex = itemOffset.index;\r\n                    if (!useIndicator) {\r\n                        $targetItem.insertBefore($item);\r\n                        return\r\n                    }\r\n                    var isAnotherGroup = $targetGroup.attr(\"group\") !== sourceGroup,\r\n                        isSameIndex = targetIndex === sourceIndex,\r\n                        isNextIndex = targetIndex === sourceIndex + 1;\r\n                    if (isAnotherGroup) {\r\n                        that._renderIndicator($item, isVertical, $targetGroup, that.option(\"rtlEnabled\") && !isVertical);\r\n                        return\r\n                    }\r\n                    if (!isSameIndex && !isNextIndex) {\r\n                        that._renderIndicator($item, isVertical, $targetGroup, that.option(\"rtlEnabled\") && !isVertical)\r\n                    }\r\n                } else {\r\n                    $lastItem = $items.last();\r\n                    if ($lastItem.is(\":visible\") && $lastItem.hasClass(sourceClass)) {\r\n                        return\r\n                    }\r\n                    if ($itemContainer.length) {\r\n                        targetIndex = itemsOffset.length ? itemsOffset[itemsOffset.length - 1].index + 1 : 0\r\n                    }\r\n                    if (useIndicator) {\r\n                        $items.length && that._renderIndicator($lastItem, isVertical, $targetGroup, !that.option(\"rtlEnabled\") || isVertical)\r\n                    } else {\r\n                        $targetItem.appendTo($itemContainer)\r\n                    }\r\n                }\r\n            });\r\n            eventsEngine.on($eventListener, addNamespace(dragEvents.end, SORTABLE_NAMESPACE), function() {\r\n                disposeScrollWrapper();\r\n                if (!$sourceItem) {\r\n                    return\r\n                }\r\n                var onChanged = that.option(\"onChanged\"),\r\n                    changedArgs = {\r\n                        sourceIndex: sourceIndex,\r\n                        sourceElement: $sourceItem,\r\n                        sourceGroup: sourceGroup,\r\n                        targetIndex: targetIndex,\r\n                        removeSourceElement: true,\r\n                        removeTargetElement: false,\r\n                        removeSourceClass: true\r\n                    };\r\n                if ($targetGroup) {\r\n                    $targetGroup.removeClass(targetClass);\r\n                    changedArgs.targetGroup = $targetGroup.attr(\"group\");\r\n                    if (sourceGroup !== changedArgs.targetGroup || targetIndex > -1) {\r\n                        onChanged && onChanged(changedArgs);\r\n                        changedArgs.removeSourceElement && $sourceItem.remove()\r\n                    }\r\n                }\r\n                that._indicator.detach();\r\n                changedArgs.removeSourceClass && $sourceItem.removeClass(sourceClass);\r\n                $sourceItem = null;\r\n                that._$draggable.remove();\r\n                that._$draggable = null;\r\n                changedArgs.removeTargetElement && $targetItem.remove();\r\n                $targetItem.removeClass(targetClass);\r\n                $targetItem = null\r\n            })\r\n        }\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._attachEventHandlers()\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this.$element().addClass(SORTABLE_CLASS)\r\n    },\r\n    _dispose: function() {\r\n        var that = this;\r\n        that.callBase.apply(that, arguments);\r\n        that._$draggable && that._$draggable.detach();\r\n        that._indicator && that._indicator.detach()\r\n    },\r\n    _optionChanged: function(args) {\r\n        var that = this;\r\n        switch (args.name) {\r\n            case \"onDragging\":\r\n            case \"onChanged\":\r\n            case \"itemRender\":\r\n            case \"groupSelector\":\r\n            case \"itemSelector\":\r\n            case \"itemContainerSelector\":\r\n            case \"sourceClass\":\r\n            case \"targetClass\":\r\n            case \"dragClass\":\r\n            case \"allowDragging\":\r\n            case \"groupFilter\":\r\n            case \"useIndicator\":\r\n                that._attachEventHandlers();\r\n                break;\r\n            case \"direction\":\r\n                break;\r\n            default:\r\n                that.callBase(args)\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxSortable\", Sortable);\r\nmodule.exports = Sortable;\r\n","/**\r\n * DevExtreme (ui/pivot_grid/xmla_store/xmla_store.js)\r\n * Version: 18.2.3\r\n * Build date: Wed Nov 07 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../../core/renderer\"),\r\n    window = require(\"../../../core/utils/window\").getWindow(),\r\n    Class = require(\"../../../core/class\"),\r\n    stringFormat = require(\"../../../core/utils/string\").format,\r\n    errors = require(\"../../../data/errors\").errors,\r\n    noop = require(\"../../../core/utils/common\").noop,\r\n    typeUtils = require(\"../../../core/utils/type\"),\r\n    iteratorUtils = require(\"../../../core/utils/iterator\"),\r\n    inArray = require(\"../../../core/utils/array\").inArray,\r\n    pivotGridUtils = require(\"../ui.pivot_grid.utils\"),\r\n    deferredUtils = require(\"../../../core/utils/deferred\"),\r\n    when = deferredUtils.when,\r\n    Deferred = deferredUtils.Deferred,\r\n    getLanguageId = require(\"../../../localization/language_codes\").getLanguageId;\r\nexports.XmlaStore = Class.inherit(function() {\r\n    var discover = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><RequestType>{2}</RequestType><Restrictions><RestrictionList><CATALOG_NAME>{0}</CATALOG_NAME><CUBE_NAME>{1}</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>{0}</Catalog>{3}</PropertyList></Properties></Discover></Body></Envelope>',\r\n        execute = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>{0}</Statement></Command><Properties><PropertyList><Catalog>{1}</Catalog><ShowHiddenCubes>True</ShowHiddenCubes><SspropInitAppName>Microsoft SQL Server Management Studio</SspropInitAppName><Timeout>3600</Timeout>{2}</PropertyList></Properties></Execute></Body></Envelope>',\r\n        mdx = \"SELECT {2} FROM {0} {1} CELL PROPERTIES VALUE, FORMAT_STRING, LANGUAGE, BACK_COLOR, FORE_COLOR, FONT_FLAGS\",\r\n        mdxFilterSelect = \"(SELECT {0} FROM {1})\",\r\n        mdxWith = \"{0} {1} as {2}\",\r\n        mdxSlice = \"WHERE ({0})\",\r\n        mdxNonEmpty = \"NonEmpty({0}, {1})\",\r\n        mdxAxis = \"{0} DIMENSION PROPERTIES PARENT_UNIQUE_NAME,HIERARCHY_UNIQUE_NAME, MEMBER_VALUE ON {1}\",\r\n        mdxCrossJoin = \"CrossJoin({0})\",\r\n        mdxSet = \"{{0}}\",\r\n        each = iteratorUtils.each,\r\n        MEASURE_DEMENSION_KEY = \"DX_MEASURES\",\r\n        MD_DIMTYPE_MEASURE = \"2\";\r\n\r\n    function execXMLA(requestOptions, data) {\r\n        var deferred = new Deferred,\r\n            beforeSend = requestOptions.beforeSend,\r\n            ajaxSettings = {\r\n                url: requestOptions.url,\r\n                dataType: \"text\",\r\n                data: data,\r\n                headers: {\r\n                    \"Content-Type\": \"text/xml\"\r\n                },\r\n                xhrFields: {},\r\n                method: \"POST\"\r\n            };\r\n        if (typeUtils.isFunction(beforeSend)) {\r\n            beforeSend(ajaxSettings)\r\n        }\r\n        pivotGridUtils.sendRequest(ajaxSettings).fail(function() {\r\n            deferred.reject(arguments)\r\n        }).done(function(text) {\r\n            var parser = new window.DOMParser;\r\n            var xml;\r\n            try {\r\n                try {\r\n                    xml = parser.parseFromString(text, \"text/xml\")\r\n                } catch (e) {\r\n                    xml = void 0\r\n                }\r\n                if (!xml || xml.getElementsByTagName(\"parsererror\").length || 0 === xml.childNodes.length) {\r\n                    throw new errors.Error(\"E4023\", text)\r\n                }\r\n            } catch (e) {\r\n                deferred.reject({\r\n                    statusText: e.message,\r\n                    stack: e.stack,\r\n                    responseText: text\r\n                })\r\n            }\r\n            deferred.resolve(xml)\r\n        });\r\n        return deferred\r\n    }\r\n\r\n    function getLocaleIdProperty() {\r\n        var languageId = getLanguageId();\r\n        if (void 0 !== languageId) {\r\n            return stringFormat(\"<LocaleIdentifier>{0}</LocaleIdentifier>\", languageId)\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    function mdxDescendants(level, levelMember, nextLevel) {\r\n        var memberExpression = levelMember ? levelMember : level;\r\n        return \"Descendants({\" + memberExpression + \"}, \" + nextLevel + \", SELF_AND_BEFORE)\"\r\n    }\r\n\r\n    function getAllMember(dimension) {\r\n        return (dimension.hierarchyName || dimension.dataField) + \".[All]\"\r\n    }\r\n\r\n    function getAllMembers(field) {\r\n        return field.dataField + \".allMembers\"\r\n    }\r\n\r\n    function crossJoinElements(elements) {\r\n        var elementsString = elements.join(\",\");\r\n        return elements.length > 1 ? stringFormat(mdxCrossJoin, elementsString) : elementsString\r\n    }\r\n\r\n    function union(elements) {\r\n        var elementsString = elements.join(\",\");\r\n        return elements.length > 1 ? \"Union(\" + elementsString + \")\" : elementsString\r\n    }\r\n\r\n    function generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName) {\r\n        var dataField, allMember, hierarchyName, arg, prevDimension, prevHierarchyName, isLastDimensionInGroup, isFirstDimensionInGroup, expandAllIndex, field, member, i, crossJoinArgs = [],\r\n            dimensions = options[axisName],\r\n            fields = [];\r\n        for (i = expandIndex; i <= expandLevel; i++) {\r\n            field = dimensions[i];\r\n            dataField = field.dataField;\r\n            prevHierarchyName = dimensions[i - 1] && dimensions[i - 1].hierarchyName;\r\n            hierarchyName = field.hierarchyName;\r\n            isLastDimensionInGroup = !hierarchyName || !dimensions[i + 1] || dimensions[i + 1].hierarchyName !== hierarchyName;\r\n            expandAllIndex = path.length + expandAllCount + expandIndex;\r\n            arg = null;\r\n            fields.push(field);\r\n            if (i < path.length) {\r\n                if (isLastDimensionInGroup) {\r\n                    arg = \"(\" + dataField + \".\" + preparePathValue(path[i], dataField) + \")\"\r\n                }\r\n            } else {\r\n                if (i <= expandAllIndex) {\r\n                    if (0 === i && 0 === expandAllCount) {\r\n                        allMember = getAllMember(dimensions[expandIndex]);\r\n                        if (!hierarchyName) {\r\n                            arg = getAllMembers(dimensions[expandIndex])\r\n                        } else {\r\n                            arg = allMember + \",\" + dimensions[expandIndex].dataField\r\n                        }\r\n                    } else {\r\n                        if (hierarchyName) {\r\n                            member = preparePathValue(slicePath[slicePath.length - 1]);\r\n                            if (isLastDimensionInGroup || i === expandAllIndex) {\r\n                                if (prevHierarchyName === hierarchyName) {\r\n                                    if (slicePath.length) {\r\n                                        prevDimension = dimensions[slicePath.length - 1]\r\n                                    }\r\n                                    if (!prevDimension || prevDimension.hierarchyName !== hierarchyName) {\r\n                                        prevDimension = dimensions[i - 1];\r\n                                        member = \"\"\r\n                                    }\r\n                                    arg = mdxDescendants(prevDimension.dataField, member, dataField)\r\n                                } else {\r\n                                    arg = getAllMembers(field)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            arg = getAllMembers(field)\r\n                        }\r\n                    }\r\n                } else {\r\n                    isFirstDimensionInGroup = !hierarchyName || prevHierarchyName !== hierarchyName;\r\n                    if (isFirstDimensionInGroup) {\r\n                        arg = \"(\" + getAllMember(field) + \")\"\r\n                    }\r\n                }\r\n            }\r\n            if (arg) {\r\n                arg = stringFormat(mdxSet, arg);\r\n                crossJoinArgs.push(arg)\r\n            }\r\n        }\r\n        return crossJoinElements(crossJoinArgs)\r\n    }\r\n\r\n    function fillCrossJoins(crossJoins, path, expandLevel, expandIndex, slicePath, options, axisName, cellsString) {\r\n        var dimensionIndex, expandAllCount = -1,\r\n            dimensions = options[axisName];\r\n        do {\r\n            expandAllCount++;\r\n            dimensionIndex = path.length + expandAllCount + expandIndex;\r\n            crossJoins.push(stringFormat(mdxNonEmpty, generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName), cellsString))\r\n        } while (dimensions[dimensionIndex] && dimensions[dimensionIndex + 1] && dimensions[dimensionIndex].expanded)\r\n    }\r\n\r\n    function declare(expression, withArray, name, type) {\r\n        name = name || \"[DX_Set_\" + withArray.length + \"]\";\r\n        type = type || \"set\";\r\n        withArray.push(stringFormat(mdxWith, type, name, expression));\r\n        return name\r\n    }\r\n\r\n    function generateAxisMdx(options, axisName, cells, withArray, parseOptions) {\r\n        var dimensions = options[axisName],\r\n            crossJoins = [],\r\n            path = [],\r\n            expandedPaths = [],\r\n            expandIndex = 0,\r\n            expandLevel = 0,\r\n            result = [],\r\n            cellsString = stringFormat(mdxSet, cells.join(\",\"));\r\n        if (dimensions && dimensions.length) {\r\n            if (options.headerName === axisName) {\r\n                path = options.path;\r\n                expandIndex = path.length\r\n            } else {\r\n                expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || expandedPaths\r\n            }\r\n            expandLevel = pivotGridUtils.getExpandedLevel(options, axisName);\r\n            fillCrossJoins(crossJoins, [], expandLevel, expandIndex, path, options, axisName, cellsString);\r\n            each(expandedPaths, function(_, expandedPath) {\r\n                fillCrossJoins(crossJoins, expandedPath, expandLevel, expandIndex, expandedPath, options, axisName, cellsString)\r\n            });\r\n            for (var i = expandLevel; i >= path.length; i--) {\r\n                if (dimensions[i].hierarchyName) {\r\n                    parseOptions.visibleLevels[dimensions[i].hierarchyName] = parseOptions.visibleLevels[dimensions[i].hierarchyName] || [];\r\n                    parseOptions.visibleLevels[dimensions[i].hierarchyName].push(dimensions[i].dataField)\r\n                }\r\n            }\r\n        }\r\n        if (crossJoins.length) {\r\n            result.push(declare(union(crossJoins), withArray, \"[DX_\" + axisName + \"]\"))\r\n        }\r\n        if (\"columns\" === axisName && cells.length && !options.skipValues) {\r\n            result.push(cellsString)\r\n        }\r\n        return stringFormat(mdxAxis, crossJoinElements(result), axisName)\r\n    }\r\n\r\n    function generateAxisFieldsFilter(fields) {\r\n        var filterMembers = [];\r\n        each(fields, function(_, field) {\r\n            var filterStringExpression, dataField = field.dataField,\r\n                filterExpression = [],\r\n                filterValues = field.filterValues || [];\r\n            if (field.hierarchyName && typeUtils.isNumeric(field.groupIndex)) {\r\n                return\r\n            }\r\n            each(filterValues, function(_, filterValue) {\r\n                var filterMdx = dataField + \".\" + preparePathValue(Array.isArray(filterValue) ? filterValue[filterValue.length - 1] : filterValue, dataField);\r\n                if (\"exclude\" === field.filterType) {\r\n                    filterExpression.push(filterMdx + \".parent\");\r\n                    filterMdx = \"Descendants(\" + filterMdx + \")\"\r\n                }\r\n                filterExpression.push(filterMdx)\r\n            });\r\n            if (filterValues.length) {\r\n                filterStringExpression = stringFormat(mdxSet, filterExpression.join(\",\"));\r\n                if (\"exclude\" === field.filterType) {\r\n                    filterStringExpression = \"Except(\" + getAllMembers(field) + \",\" + filterStringExpression + \")\"\r\n                }\r\n                filterMembers.push(filterStringExpression)\r\n            }\r\n        });\r\n        return filterMembers.length ? crossJoinElements(filterMembers) : \"\"\r\n    }\r\n\r\n    function generateFrom(columnsFilter, rowsFilter, filter, cubeName) {\r\n        var from = \"[\" + cubeName + \"]\";\r\n        each([columnsFilter, rowsFilter, filter], function(_, filter) {\r\n            if (filter) {\r\n                from = stringFormat(mdxFilterSelect, filter + \"on 0\", from)\r\n            }\r\n        });\r\n        return from\r\n    }\r\n\r\n    function generateMdxCore(axisStrings, withArray, columns, rows, filters, slice, cubeName) {\r\n        var mdxString = \"\",\r\n            withString = (withArray.length ? \"with \" + withArray.join(\" \") : \"\") + \" \";\r\n        if (axisStrings.length) {\r\n            mdxString = withString + stringFormat(mdx, generateFrom(generateAxisFieldsFilter(columns), generateAxisFieldsFilter(rows), generateAxisFieldsFilter(filters || []), cubeName), slice.length ? stringFormat(mdxSlice, slice.join(\",\")) : \"\", axisStrings.join(\",\"))\r\n        }\r\n        return mdxString\r\n    }\r\n\r\n    function prepareDataFields(withArray, valueFields) {\r\n        return iteratorUtils.map(valueFields, function(cell) {\r\n            if (typeUtils.isString(cell.expression)) {\r\n                declare(cell.expression, withArray, cell.dataField, \"member\")\r\n            }\r\n            return cell.dataField\r\n        })\r\n    }\r\n\r\n    function generateMDX(options, cubeName, parseOptions) {\r\n        var columns = options.columns || [],\r\n            rows = options.rows || [],\r\n            values = options.values && options.values.length ? options.values : [{\r\n                dataField: \"[Measures]\"\r\n            }],\r\n            slice = [],\r\n            withArray = [],\r\n            axisStrings = [],\r\n            dataFields = prepareDataFields(withArray, values);\r\n        parseOptions.measureCount = options.skipValues ? 1 : values.length;\r\n        parseOptions.visibleLevels = {};\r\n        if (options.headerName && options.path) {\r\n            each(options.path, function(index, value) {\r\n                var dimension = options[options.headerName][index];\r\n                if (!dimension.hierarchyName || dimension.hierarchyName !== options[options.headerName][index + 1].hierarchyName) {\r\n                    slice.push(dimension.dataField + \".\" + preparePathValue(value, dimension.dataField))\r\n                }\r\n            })\r\n        }\r\n        if (columns.length || dataFields.length) {\r\n            axisStrings.push(generateAxisMdx(options, \"columns\", dataFields, withArray, parseOptions))\r\n        }\r\n        if (rows.length) {\r\n            axisStrings.push(generateAxisMdx(options, \"rows\", dataFields, withArray, parseOptions))\r\n        }\r\n        return generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName)\r\n    }\r\n\r\n    function createDrillDownAxisSlice(slice, fields, path) {\r\n        each(path, function(index, value) {\r\n            var field = fields[index];\r\n            if (field.hierarchyName && (fields[index + 1] || {}).hierarchyName === field.hierarchyName) {\r\n                return\r\n            }\r\n            slice.push(field.dataField + \".\" + preparePathValue(value, field.dataField))\r\n        })\r\n    }\r\n\r\n    function generateDrillDownMDX(options, cubeName, params) {\r\n        var coreMDX, columns = options.columns || [],\r\n            rows = options.rows || [],\r\n            values = options.values && options.values.length ? options.values : [{\r\n                dataField: \"[Measures]\"\r\n            }],\r\n            slice = [],\r\n            withArray = [],\r\n            axisStrings = [],\r\n            dataFields = prepareDataFields(withArray, values),\r\n            maxRowCount = params.maxRowCount,\r\n            customColumns = params.customColumns || [],\r\n            customColumnsString = customColumns.length > 0 ? \" return \" + customColumns.join(\",\") : \"\";\r\n        createDrillDownAxisSlice(slice, columns, params.columnPath || []);\r\n        createDrillDownAxisSlice(slice, rows, params.rowPath || []);\r\n        if (columns.length || columns.length || dataFields.length) {\r\n            axisStrings.push([(dataFields[params.dataIndex] || dataFields[0]) + \" on 0\"])\r\n        }\r\n        coreMDX = generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName);\r\n        return coreMDX ? \"drillthrough\" + (maxRowCount > 0 ? \" maxrows \" + maxRowCount : \"\") + coreMDX + customColumnsString : coreMDX\r\n    }\r\n\r\n    function getNumber(str) {\r\n        return parseInt(str, 10)\r\n    }\r\n\r\n    function parseValue(valueText) {\r\n        return typeUtils.isNumeric(valueText) ? parseFloat(valueText) : valueText\r\n    }\r\n\r\n    function getFirstChild(node, tagName) {\r\n        return (node.getElementsByTagName(tagName) || [])[0]\r\n    }\r\n\r\n    function getFirstChildText(node, childTagName) {\r\n        return getNodeText(getFirstChild(node, childTagName))\r\n    }\r\n\r\n    function parseAxes(xml, skipValues) {\r\n        var axes = [];\r\n        each(xml.getElementsByTagName(\"Axis\"), function(_, axisElement) {\r\n            var name = axisElement.getAttribute(\"name\"),\r\n                axis = [],\r\n                index = 0;\r\n            if (0 === name.indexOf(\"Axis\") && typeUtils.isNumeric(getNumber(name.substr(4)))) {\r\n                axes.push(axis);\r\n                each(axisElement.getElementsByTagName(\"Tuple\"), function(_, tupleElement) {\r\n                    var tuple, level, i, tupleMembers = tupleElement.childNodes,\r\n                        levelSum = 0,\r\n                        members = [],\r\n                        membersCount = skipValues ? tupleMembers.length : tupleMembers.length - 1,\r\n                        isAxisWithMeasure = 1 === axes.length;\r\n                    if (isAxisWithMeasure) {\r\n                        membersCount--\r\n                    }\r\n                    axis.push(members);\r\n                    for (i = membersCount; i >= 0; i--) {\r\n                        tuple = tupleMembers[i];\r\n                        level = getNumber(getFirstChildText(tuple, \"LNum\"));\r\n                        members[i] = {\r\n                            caption: getFirstChildText(tuple, \"Caption\"),\r\n                            value: parseValue(getFirstChildText(tuple, \"MEMBER_VALUE\")),\r\n                            level: level,\r\n                            index: index++,\r\n                            hasValue: !levelSum && (!!level || 0 === i),\r\n                            name: getFirstChildText(tuple, \"UName\"),\r\n                            hierarchyName: tupleMembers[i].getAttribute(\"Hierarchy\"),\r\n                            parentName: getFirstChildText(tuple, \"PARENT_UNIQUE_NAME\"),\r\n                            levelName: getFirstChildText(tuple, \"LName\")\r\n                        };\r\n                        levelSum += level\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        while (axes.length < 2) {\r\n            axes.push([\r\n                [{\r\n                    level: 0\r\n                }]\r\n            ])\r\n        }\r\n        return axes\r\n    }\r\n\r\n    function getNodeText(node) {\r\n        return node && node && (node.textContent || node.text || node.innerHTML) || \"\"\r\n    }\r\n\r\n    function parseCells(xml, axes, measureCount) {\r\n        var measureIndex, row, cells = [],\r\n            cell = [],\r\n            index = 0,\r\n            cellsOriginal = [],\r\n            cellElements = xml.getElementsByTagName(\"Cell\"),\r\n            errorDictionary = {};\r\n        for (var i = 0; i < cellElements.length; i++) {\r\n            var xmlCell = cellElements[i],\r\n                valueElement = xmlCell.getElementsByTagName(\"Value\")[0],\r\n                errorElements = valueElement && valueElement.getElementsByTagName(\"Error\") || [],\r\n                text = 0 === errorElements.length ? getNodeText(valueElement) : \"#N/A\",\r\n                value = parseFloat(text),\r\n                isNumeric = text - value + 1 > 0,\r\n                cellOrdinal = getNumber(xmlCell.getAttribute(\"CellOrdinal\"));\r\n            if (errorElements.length) {\r\n                errorDictionary[getNodeText(errorElements[0].getElementsByTagName(\"ErrorCode\")[0])] = getNodeText(errorElements[0].getElementsByTagName(\"Description\")[0])\r\n            }\r\n            cellsOriginal[cellOrdinal] = {\r\n                value: isNumeric ? value : text || null\r\n            }\r\n        }\r\n        each(axes[1], function() {\r\n            row = [];\r\n            cells.push(row);\r\n            each(axes[0], function() {\r\n                measureIndex = index % measureCount;\r\n                if (0 === measureIndex) {\r\n                    cell = [];\r\n                    row.push(cell)\r\n                }\r\n                cell.push(cellsOriginal[index] ? cellsOriginal[index].value : null);\r\n                index++\r\n            })\r\n        });\r\n        Object.keys(errorDictionary).forEach(function(key) {\r\n            errors.log(\"W4002\", errorDictionary[key])\r\n        });\r\n        return cells\r\n    }\r\n\r\n    function preparePathValue(pathValue, dataField) {\r\n        if (pathValue) {\r\n            pathValue = typeUtils.isString(pathValue) && pathValue.indexOf(\"&\") !== -1 ? pathValue : \"[\" + pathValue + \"]\";\r\n            if (dataField && 0 === pathValue.indexOf(dataField + \".\")) {\r\n                pathValue = pathValue.slice(dataField.length + 1, pathValue.length)\r\n            }\r\n        }\r\n        return pathValue\r\n    }\r\n\r\n    function getItem(hash, name, member, index) {\r\n        var item = hash[name];\r\n        if (!item) {\r\n            item = {};\r\n            hash[name] = item\r\n        }\r\n        if (!typeUtils.isDefined(item.value) && member) {\r\n            item.text = member.caption;\r\n            item.value = member.value;\r\n            item.key = name ? name : \"\";\r\n            item.levelName = member.levelName;\r\n            item.hierarchyName = member.hierarchyName;\r\n            item.parentName = member.parentName;\r\n            item.index = index;\r\n            item.level = member.level\r\n        }\r\n        return item\r\n    }\r\n\r\n    function getVisibleChildren(item, visibleLevels) {\r\n        var result = [],\r\n            children = item.children && (item.children.length ? item.children : Object.keys(item.children.grandTotalHash || {}).reduce(function(result, name) {\r\n                return result.concat(item.children.grandTotalHash[name].children)\r\n            }, [])),\r\n            firstChild = children && children[0];\r\n        if (firstChild && (visibleLevels[firstChild.hierarchyName] && inArray(firstChild.levelName, visibleLevels[firstChild.hierarchyName]) !== -1 || !visibleLevels[firstChild.hierarchyName] || 0 === firstChild.level)) {\r\n            var newChildren = children.filter(function(child) {\r\n                return child.hierarchyName === firstChild.hierarchyName\r\n            });\r\n            newChildren.grandTotalHash = children.grandTotalHash;\r\n            return newChildren\r\n        } else {\r\n            if (firstChild) {\r\n                for (var i = 0; i < children.length; i++) {\r\n                    if (children[i].hierarchyName === firstChild.hierarchyName) {\r\n                        result.push.apply(result, getVisibleChildren(children[i], visibleLevels))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    function processMember(dataIndex, member, parentItem) {\r\n        var currentItem, children = parentItem.children = parentItem.children || [],\r\n            hash = children.hash = children.hash || {},\r\n            grandTotalHash = children.grandTotalHash = children.grandTotalHash || {};\r\n        if (member.parentName) {\r\n            parentItem = getItem(hash, member.parentName);\r\n            children = parentItem.children = parentItem.children || []\r\n        }\r\n        currentItem = getItem(hash, member.name, member, dataIndex);\r\n        if (member.hasValue && !currentItem.added) {\r\n            currentItem.index = dataIndex;\r\n            currentItem.added = true;\r\n            children.push(currentItem)\r\n        }\r\n        if ((!parentItem.value || !parentItem.parentName) && member.parentName) {\r\n            grandTotalHash[member.parentName] = parentItem\r\n        } else {\r\n            if (grandTotalHash[parentItem.name]) {\r\n                delete grandTotalHash[member.parentName]\r\n            }\r\n        }\r\n        return currentItem\r\n    }\r\n\r\n    function getGrandTotalIndex(parentItem, visibleLevels) {\r\n        var grandTotalIndex;\r\n        if (1 === parentItem.children.length && \"\" === parentItem.children[0].parentName) {\r\n            grandTotalIndex = parentItem.children[0].index;\r\n            var grandTotalHash = parentItem.children.grandTotalHash;\r\n            parentItem.children = parentItem.children[0].children || [];\r\n            parentItem.children.grandTotalHash = grandTotalHash;\r\n            parentItem.children = getVisibleChildren(parentItem, visibleLevels)\r\n        } else {\r\n            if (0 === parentItem.children.length) {\r\n                grandTotalIndex = 0\r\n            }\r\n        }\r\n        return grandTotalIndex\r\n    }\r\n\r\n    function fillDataSourceAxes(dataSourceAxis, axisTuples, measureCount, visibleLevels) {\r\n        var grandTotalIndex, result = [];\r\n        each(axisTuples, function(tupleIndex, members) {\r\n            var parentItem = {\r\n                    children: result\r\n                },\r\n                dataIndex = typeUtils.isDefined(measureCount) ? Math.floor(tupleIndex / measureCount) : tupleIndex;\r\n            each(members, function(_, member) {\r\n                parentItem = processMember(dataIndex, member, parentItem)\r\n            })\r\n        });\r\n        var parentItem = {\r\n            children: result\r\n        };\r\n        parentItem.children = getVisibleChildren(parentItem, visibleLevels);\r\n        grandTotalIndex = getGrandTotalIndex(parentItem, visibleLevels);\r\n        pivotGridUtils.foreachTree(parentItem.children, function(items) {\r\n            var item = items[0],\r\n                children = getVisibleChildren(item, visibleLevels);\r\n            if (children.length) {\r\n                item.children = children\r\n            } else {\r\n                delete item.children\r\n            }\r\n            delete item.levelName;\r\n            delete item.hierarchyName;\r\n            delete item.added;\r\n            delete item.parentName;\r\n            delete item.level\r\n        }, true);\r\n        each(parentItem.children || [], function(_, e) {\r\n            dataSourceAxis.push(e)\r\n        });\r\n        return grandTotalIndex\r\n    }\r\n\r\n    function checkError(xml) {\r\n        var description, error, faultElementNS = xml.getElementsByTagName(\"soap:Fault\"),\r\n            faultElement = xml.getElementsByTagName(\"Fault\"),\r\n            errorElement = $([].slice.call(faultElement.length ? faultElement : faultElementNS)).find(\"Error\");\r\n        if (errorElement.length) {\r\n            description = errorElement.attr(\"Description\");\r\n            error = new errors.Error(\"E4000\", description);\r\n            errors.log(\"E4000\", description);\r\n            return error\r\n        }\r\n        return null\r\n    }\r\n\r\n    function parseResult(xml, parseOptions) {\r\n        var axes, dataSource = {\r\n                columns: [],\r\n                rows: []\r\n            },\r\n            measureCount = parseOptions.measureCount;\r\n        axes = parseAxes(xml, parseOptions.skipValues);\r\n        dataSource.grandTotalColumnIndex = fillDataSourceAxes(dataSource.columns, axes[0], measureCount, parseOptions.visibleLevels);\r\n        dataSource.grandTotalRowIndex = fillDataSourceAxes(dataSource.rows, axes[1], void 0, parseOptions.visibleLevels);\r\n        dataSource.values = parseCells(xml, axes, measureCount);\r\n        return dataSource\r\n    }\r\n\r\n    function parseDiscoverRowSet(xml, schema, dimensions, translatedDisplayFolders) {\r\n        var result = [],\r\n            isMeasure = \"MEASURE\" === schema,\r\n            displayFolderField = isMeasure ? \"MEASUREGROUP_NAME\" : schema + \"_DISPLAY_FOLDER\";\r\n        each(xml.getElementsByTagName(\"row\"), function(_, row) {\r\n            var hierarchyName = \"LEVEL\" === schema ? getFirstChildText(row, \"HIERARCHY_UNIQUE_NAME\") : void 0,\r\n                levelNumber = getFirstChildText(row, \"LEVEL_NUMBER\"),\r\n                displayFolder = getFirstChildText(row, displayFolderField);\r\n            if (isMeasure) {\r\n                displayFolder = translatedDisplayFolders[displayFolder] || displayFolder\r\n            }\r\n            if ((\"0\" !== levelNumber || \"true\" !== getFirstChildText(row, schema + \"_IS_VISIBLE\")) && getFirstChildText(row, \"DIMENSION_TYPE\") !== MD_DIMTYPE_MEASURE) {\r\n                var dimension = isMeasure ? MEASURE_DEMENSION_KEY : getFirstChildText(row, \"DIMENSION_UNIQUE_NAME\"),\r\n                    dataField = getFirstChildText(row, schema + \"_UNIQUE_NAME\");\r\n                result.push({\r\n                    dimension: dimensions.names[dimension] || dimension,\r\n                    groupIndex: levelNumber ? getNumber(levelNumber) - 1 : void 0,\r\n                    dataField: dataField,\r\n                    caption: getFirstChildText(row, schema + \"_CAPTION\"),\r\n                    hierarchyName: hierarchyName,\r\n                    groupName: hierarchyName,\r\n                    displayFolder: displayFolder,\r\n                    isMeasure: isMeasure,\r\n                    isDefault: !!dimensions.defaultHierarchies[dataField]\r\n                })\r\n            }\r\n        });\r\n        return result\r\n    }\r\n\r\n    function parseMeasureGroupDiscoverRowSet(xml) {\r\n        var measureGroups = {};\r\n        each(xml.getElementsByTagName(\"row\"), function(_, row) {\r\n            measureGroups[getFirstChildText(row, \"MEASUREGROUP_NAME\")] = getFirstChildText(row, \"MEASUREGROUP_CAPTION\")\r\n        });\r\n        return measureGroups\r\n    }\r\n\r\n    function parseDimensionsDiscoverRowSet(xml) {\r\n        var result = {\r\n            names: {},\r\n            defaultHierarchies: {}\r\n        };\r\n        each($(xml).find(\"row\"), function() {\r\n            var $row = $(this),\r\n                type = $row.children(\"DIMENSION_TYPE\").text(),\r\n                dimensionName = type === MD_DIMTYPE_MEASURE ? MEASURE_DEMENSION_KEY : $row.children(\"DIMENSION_UNIQUE_NAME\").text();\r\n            result.names[dimensionName] = $row.children(\"DIMENSION_CAPTION\").text();\r\n            result.defaultHierarchies[$row.children(\"DEFAULT_HIERARCHY\").text()] = true\r\n        });\r\n        return result\r\n    }\r\n\r\n    function parseStringWithUnicodeSymbols(str) {\r\n        str = str.replace(/_x(....)_/g, function(whole, group1) {\r\n            return String.fromCharCode(parseInt(group1, 16))\r\n        });\r\n        var stringArray = str.match(/\\[.+?\\]/gi);\r\n        if (stringArray && stringArray.length) {\r\n            str = stringArray[stringArray.length - 1]\r\n        }\r\n        return str.replace(/\\[/gi, \"\").replace(/\\]/gi, \"\").replace(/\\$/gi, \"\").replace(/\\./gi, \" \")\r\n    }\r\n\r\n    function parseDrillDownRowSet(xml) {\r\n        var rows = xml.getElementsByTagName(\"row\"),\r\n            result = [],\r\n            columnNames = {};\r\n        for (var i = 0; i < rows.length; i++) {\r\n            var children = rows[i].childNodes,\r\n                item = {};\r\n            for (var j = 0; j < children.length; j++) {\r\n                var tagName = children[j].tagName,\r\n                    name = columnNames[tagName] = columnNames[tagName] || parseStringWithUnicodeSymbols(tagName);\r\n                item[name] = getNodeText(children[j])\r\n            }\r\n            result.push(item)\r\n        }\r\n        return result\r\n    }\r\n\r\n    function sendQuery(storeOptions, mdxString) {\r\n        mdxString = $(\"<div>\").text(mdxString).html();\r\n        return execXMLA(storeOptions, stringFormat(execute, mdxString, storeOptions.catalog, getLocaleIdProperty()))\r\n    }\r\n    return {\r\n        ctor: function(options) {\r\n            this._options = options\r\n        },\r\n        getFields: function() {\r\n            var options = this._options,\r\n                catalog = options.catalog,\r\n                cube = options.cube,\r\n                localeIdProperty = getLocaleIdProperty(),\r\n                dimensionsRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_DIMENSIONS\", localeIdProperty)),\r\n                measuresRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_MEASURES\", localeIdProperty)),\r\n                hierarchiesRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_HIERARCHIES\", localeIdProperty)),\r\n                levelsRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_LEVELS\", localeIdProperty)),\r\n                result = new Deferred;\r\n            when(dimensionsRequest, measuresRequest, hierarchiesRequest, levelsRequest).then(function(dimensionsResponse, measuresResponse, hierarchiesResponse, levelsResponse) {\r\n                execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_MEASUREGROUPS\", localeIdProperty)).done(function(measureGroupsResponse) {\r\n                    var dimensions = parseDimensionsDiscoverRowSet(dimensionsResponse),\r\n                        hierarchies = parseDiscoverRowSet(hierarchiesResponse, \"HIERARCHY\", dimensions),\r\n                        levels = parseDiscoverRowSet(levelsResponse, \"LEVEL\", dimensions),\r\n                        measureGroups = parseMeasureGroupDiscoverRowSet(measureGroupsResponse),\r\n                        fields = parseDiscoverRowSet(measuresResponse, \"MEASURE\", dimensions, measureGroups).concat(hierarchies),\r\n                        levelsByHierarchy = {};\r\n                    each(levels, function(_, level) {\r\n                        levelsByHierarchy[level.hierarchyName] = levelsByHierarchy[level.hierarchyName] || [];\r\n                        levelsByHierarchy[level.hierarchyName].push(level)\r\n                    });\r\n                    each(hierarchies, function(_, hierarchy) {\r\n                        if (levelsByHierarchy[hierarchy.dataField] && levelsByHierarchy[hierarchy.dataField].length > 1) {\r\n                            hierarchy.groupName = hierarchy.hierarchyName = hierarchy.dataField;\r\n                            fields.push.apply(fields, levelsByHierarchy[hierarchy.hierarchyName])\r\n                        }\r\n                    });\r\n                    result.resolve(fields)\r\n                }).fail(result.reject)\r\n            }).fail(result.reject);\r\n            return result\r\n        },\r\n        load: function(options) {\r\n            var result = new Deferred,\r\n                storeOptions = this._options,\r\n                parseOptions = {\r\n                    skipValues: options.skipValues\r\n                },\r\n                mdxString = generateMDX(options, storeOptions.cube, parseOptions);\r\n            if (mdxString) {\r\n                when(sendQuery(storeOptions, mdxString)).done(function(executeXml) {\r\n                    var error = checkError(executeXml);\r\n                    if (!error) {\r\n                        result.resolve(parseResult(executeXml, parseOptions))\r\n                    } else {\r\n                        result.reject(error)\r\n                    }\r\n                }).fail(result.reject)\r\n            } else {\r\n                result.resolve({\r\n                    columns: [],\r\n                    rows: [],\r\n                    values: [],\r\n                    grandTotalColumnIndex: 0,\r\n                    grandTotalRowIndex: 0\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        supportSorting: function() {\r\n            return true\r\n        },\r\n        getDrillDownItems: function(options, params) {\r\n            var result = new Deferred,\r\n                storeOptions = this._options,\r\n                mdxString = generateDrillDownMDX(options, storeOptions.cube, params);\r\n            if (mdxString) {\r\n                when(sendQuery(storeOptions, mdxString)).done(function(executeXml) {\r\n                    var error = checkError(executeXml);\r\n                    if (!error) {\r\n                        result.resolve(parseDrillDownRowSet(executeXml))\r\n                    } else {\r\n                        result.reject(error)\r\n                    }\r\n                }).fail(result.reject)\r\n            } else {\r\n                result.resolve([])\r\n            }\r\n            return result\r\n        },\r\n        key: noop,\r\n        filter: noop\r\n    }\r\n}()).include(pivotGridUtils.storeDrillDownMixin);\r\n"],"sourceRoot":""}